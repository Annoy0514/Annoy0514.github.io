<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Annoy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-22T09:30:49.769Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Annoy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【22/03/22】在线学习网站项目_day01</title>
    <link href="http://example.com/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/"/>
    <id>http://example.com/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/</id>
    <published>2022-03-22T08:53:26.000Z</published>
    <updated>2022-03-22T09:30:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在线学习网站项目Day01"><a href="#在线学习网站项目Day01" class="headerlink" title="在线学习网站项目Day01"></a>在线学习网站项目Day01</h2><hr><h3 id="项目背景分析"><a href="#项目背景分析" class="headerlink" title="项目背景分析"></a>项目背景分析</h3><p><code>B2C</code>模式在线教育系统，分为 <strong>前台用户系统</strong> 和 <strong>后台运营平台</strong> 。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)两种角色：管理员和普通用户</span><br><span class="line"><span class="bullet">*</span> 管理员： 添加、修改、删除</span><br><span class="line"><span class="bullet">*</span> 用户： 查询</span><br><span class="line"></span><br><span class="line">(2)核心模块：课程模块</span><br></pre></td></tr></table></figure><hr><h4 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h4><ol><li><p>系统后台—<strong>管理员</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)讲师管理模块</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)课程分类管理模块</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)课程管理模块</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)统计分析模块</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>)订单管理模块</span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>)banner管理</span><br><span class="line"></span><br><span class="line">(<span class="number">7</span>)权限管理</span><br></pre></td></tr></table></figure></li><li><p>系统前台—用户</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(1)</span>首页数据展示</span><br><span class="line"></span><br><span class="line"><span class="comment">(2)</span>讲师列表和详情</span><br><span class="line"></span><br><span class="line"><span class="comment">(3)</span>课程列表和课程详情</span><br><span class="line"></span><br><span class="line"><span class="comment">(4)</span>登录和注册功能</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><ol><li><p>后端技术</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">springboot springcloud mybatis-plus spring security </span></span><br><span class="line"><span class="attribute">redis maven</span> </span><br></pre></td></tr></table></figure></li><li><p>前端技术</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Vue element-ui axios nodejs</span></span><br></pre></td></tr></table></figure></li><li><p>其他技术</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">阿里云oss</span><br><span class="line">阿里云视频点播</span><br><span class="line">阿里云短信服务</span><br><span class="line">微信支付和登录</span><br><span class="line">docker</span><br><span class="line">git</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h4><img src="/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/image-20220320172727369.png" class="" title="image-20220320172727369"><hr><h3 id="项目工程结构搭建"><a href="#项目工程结构搭建" class="headerlink" title="项目工程结构搭建"></a>项目工程结构搭建</h3><ol><li><p>创建<strong>父工程</strong> <code>guli_online</code></p><ul><li><p>使用IDEA中的<font color=red> Spring Initializr </font> 快速初始化一个 Spring Boot 模块，版本使用：<code>2.2.1.RELEASE</code></p><img src="/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/image-20220322171550382.png" class="" title="image-20220322171550382"></li><li><p>修改父工程 <code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- SpringBoot版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>    </span><br><span class="line">     </span><br><span class="line"><span class="comment">&lt;!-- 确定依赖的版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">guli.version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">guli.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun.oss.version</span>&gt;</span>2.8.3<span class="tag">&lt;/<span class="name">aliyun.oss.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">jodatime.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">jodatime.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">poi.version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">poi.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-java-sdk-core.version</span>&gt;</span>4.3.3<span class="tag">&lt;/<span class="name">aliyun-java-sdk-core.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-sdk-oss.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">aliyun-sdk-oss.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-java-vod-upload.version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">aliyun-java-vod-upload.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.28<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">json.version</span>&gt;</span>20170516<span class="tag">&lt;/<span class="name">json.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">commons-dbutils.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">commons-dbutils.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">canal.client.version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">canal.client.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>zx<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">cloud-alibaba.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">cloud-alibaba.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">   <span class="comment">&lt;!--依赖管理，锁定依赖的版本--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--Spring Cloud--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;velocity.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">           <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--swagger ui--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--aliyunOSS--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--日期时间工具--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jodatime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--xls--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--xlsx--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--commons-io--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--httpclient--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;httpclient.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;gson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--aliyun--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-sdk-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-sdk-oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-vod<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-sdk-vod.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-vod-upload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-sdk-vod-upload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;json.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-dbutils.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;canal.client.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>搭建 <strong>service 模块</strong></p><ul><li><p>在父工程下创建一个 <font color=red>Maven</font> 工程</p><img src="/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/image-20220322172754248.png" class="" title="image-20220322172754248"><img src="/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/image-20220322172820358.png" class="" title="image-20220322172820358"></li><li><p>添加项目的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;hystrix依赖，主要是用 @HystrixCommand &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;服务注册&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;服务调用&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--xls--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--httpclient--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--commons-io--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 service 下再创建子项目 service_edu</p></li></ol>]]></content>
    
    
    <summary type="html">学习开发在线学习网站项目，第一天内容。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/18】Mybatis-plus笔记</title>
    <link href="http://example.com/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-18T08:40:32.000Z</published>
    <updated>2022-03-22T09:00:41.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mybatis-plus"><a href="#Mybatis-plus" class="headerlink" title="Mybatis-plus"></a>Mybatis-plus</h2><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/relationship-with-mybatis-16479396398741.png" class="" title="img"><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><hr><h3 id="项目中的应用"><a href="#项目中的应用" class="headerlink" title="项目中的应用"></a>项目中的应用</h3><ol><li><p><code>pom.xml</code> 中引入依赖库 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></br></li><li><p><code>application.properties</code> 文件中添加</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#mysql数据库连接</span><br><span class="line">spring<span class="selector-class">.datasource</span>.driver-class-name=com<span class="selector-class">.mysql</span><span class="selector-class">.cj</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></span><br><span class="line">spring<span class="selector-class">.datasource</span>.url=jdbc:mysql:<span class="comment">//localhost:3306/mybatis_plus</span></span><br><span class="line">spring<span class="selector-class">.datasource</span>.username=root</span><br><span class="line">spring<span class="selector-class">.datasource</span>.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">#mybatis日志</span><br><span class="line">mybatis-plus<span class="selector-class">.configuration</span>.log-impl=org<span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.logging</span><span class="selector-class">.stdout</span>.StdOutImpl</span><br></pre></td></tr></table></figure></br></li><li><p>测试 <strong>查询</strong> 方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> testSelectList() &#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;------------查询所有的用户信息------------&quot;);</span><br><span class="line">    List&lt;<span class="keyword">User</span>&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : users) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220318165032911.png" class="" title="image-20220318165032911"></br></li><li><p>测试 <strong>插入</strong> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userMapper.insert(user);</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span>  insertUser() &#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;----------完成插入用户操作------------&quot;);</span><br><span class="line">    <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">    <span class="keyword">user</span>.setName(&quot;小王&quot;);</span><br><span class="line">    <span class="keyword">user</span>.setAge(<span class="number">19</span>);</span><br><span class="line">    <span class="keyword">user</span>.setEmail(&quot;123456@163.com&quot;);</span><br><span class="line">   </span><br><span class="line">    <span class="type">int</span> result = userMapper.<span class="keyword">insert</span>(<span class="keyword">user</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(result);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220318165206923.png" class="" title="image-20220318165206923"><ul><li><p>**执行插入操作的 <font color=red>特性</font> **</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(1)</span> 不需要设置id值<span class="comment">(主键)</span></span><br><span class="line"><span class="comment">(2)</span> mp会自动生成id值</span><br></pre></td></tr></table></figure></br></li></ul></li><li><p>测试 <strong>更新</strong> 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userMapper.updateById(user);</span><br><span class="line">==&gt; UPDATE user SET age=? WHERE id=?</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------完成修改用户操作------------&quot;</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>);</span><br><span class="line">    user.setAge(<span class="number">120</span>);</span><br><span class="line">    <span class="keyword">int</span> row = userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数:&quot;</span> + row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br></li><li><p><strong>自动添加</strong> 功能(创建时间、更新时间)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.对需要添加“自动添加”功能的属性加注解</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><p><font color=red>注意：不要忘记添加 @Component 注解</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 编写Handler处理类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------完成修改用户操作------------&quot;</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">4L</span>);</span><br><span class="line">        user.setAge(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">int</span> row = userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数:&quot;</span> + row);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220319161054448.png" class="" title="image-20220319161054448"><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220319161137373.png" class="" title="image-20220319161137373"></br></li><li><p>测试 <strong>乐观锁</strong> 机制</p><ol><li><p>先在数据表中增加 <code>vesion</code> 字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `user` ADD COLUMN `version` INT</span><br></pre></td></tr></table></figure></li><li><p>在实体类中增加 <code>version</code> 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure></li><li><p>配置 <strong><font color=red>乐观锁组件</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 乐观锁插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 测试乐观锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------测试 乐观锁 操作------------&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.先查询</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1505114640969801729L</span>);</span><br><span class="line">    <span class="comment">// 2.再修改</span></span><br><span class="line">    user.setAge(<span class="number">77</span>);</span><br><span class="line">    <span class="keyword">int</span> row = userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数:&quot;</span> + row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220319173724087.png" class="" title="image-20220319173724087"></br></li></ol></li><li><p>多种 <strong>查询</strong> 方式</p><ol><li><p>查询多条数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试查询多条数据(批量查询)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过Map查询数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 测试通过map方式查询数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">50</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color=red>分页</font></strong> 查询</p><ol><li><p>配置分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试分页查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.创建 page对象</span></span><br><span class="line"><span class="comment">     * 传入两个参数: 当前页 和 每页显示的记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">         </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.调用mp分页查询的方法</span></span><br><span class="line"><span class="comment">     * 调用 mp分页查询过程中，底层封装</span></span><br><span class="line"><span class="comment">     * 把分页所有数据封装到page对象中去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">         </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一些分页查询常用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(page.getCurrent()); <span class="comment">// 获取当前页</span></span><br><span class="line">    System.out.println(page.getRecords()); <span class="comment">// 获取当前页的记录</span></span><br><span class="line">    System.out.println(page.getPages()); <span class="comment">// 每页显示的记录数</span></span><br><span class="line">    System.out.println(page.hasNext()); <span class="comment">// 是否具有下一页</span></span><br><span class="line">    System.out.println(page.hasPrevious()); <span class="comment">// 是否具有上一页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br></li></ol></li></ol></li><li><p><strong>删除</strong> 操作</p><ol><li><p>单条记录删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除单条记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>批量删除</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除批量数据</span></span><br><span class="line">@Test</span><br><span class="line">public void delete<span class="constructor">BatchIds()</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> result = userMapper.delete<span class="constructor">BatchIds(Arrays.<span class="params">asList</span>(1505088456118714369l, 1505114640969801729l)</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color=red>逻辑删除</font></strong></p><p>**<font color=red>假删除</font>**，将对应数据中代表是否被删除字段状态修改为“被删除状态”，之后在数据库中仍 旧能看到此条数据记录。</p><ol><li><p>数据库中新建一列<code>deleted</code>，用于存储数据是否被删除的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `user` ADD COLUMN `deleted` boolean</span><br></pre></td></tr></table></figure></li><li><p>实体类中添加 <code>deleted</code> 字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure></li><li><p>元对象处理接口添加 <code>deleted</code> 的 <code>insert</code> 值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line"> ......</span><br><span class="line"><span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;deleted&quot;</span>, <span class="number">0</span>, metaObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>config类中添加 <strong>逻辑删除插件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑删除插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除结果</p><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220320160312345.png" class="" title="image-20220320160312345"></li></ol></li></ol></br></li><li><p><strong>MP的复杂查询</strong> (<font color=red><strong>条件构造器</strong></font>)</p></li></ol><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220320165312742.png" class="" title="image-20220320165312742"><ol><li><p><code>QueryWrapper</code> </p><p>通过 <code>queryWrapper</code> 设置条件</p><ul><li><p>ge gt le lt: 大于等于, 大于, 小于等于, 小于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.ge(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>)</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>eq ne: 等于/不等于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>between: 在范围之间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure></li><li><p>like: 模糊查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.Like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>orderByDesc: 降序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>last: 添加到最后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.last(<span class="string">&quot;limit 1&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>select: 指定要查询的列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="Mybatis-Plus特性"><a href="#Mybatis-Plus特性" class="headerlink" title="Mybatis-Plus特性"></a>Mybatis-Plus特性</h3><ol><li><p>主键策略</p><ul><li><code>ID_WORKER</code> : 全局唯一ID.<ul><li> Mybatis-plus<strong>默认采用的策略</strong>。</li><li>snowflake算法: 雪花算法</li></ul></li><li>自增策略: AutoIncrement</li><li>UUID: 每次生成唯一的值(但是排序不方便)</li><li>redis实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用自定义主键策略: 在实体类中的主键上加@TableId注解</span></span><br><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">// AUTO(自增),INPUT(设置id值),NONE(输入),UUID(随机唯一值),ID_WORKER/ID_WORKER_STR(mp自带策略)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure></li><li><p>锁机制</p><ul><li><p>读问题(不考虑事务隔离性，产生读问题)</p><ul><li><p>脏读</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>读取到未提交的数据</span><br><span class="line">如果事务发生回滚，则第二个事务就读到了 脏数据。</span><br></pre></td></tr></table></figure></li><li><p>幻读</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行；</span><br><span class="line"><span class="comment">(1)</span> 第一个事务进行查询，读取到一行数据。</span><br><span class="line"><span class="comment">(2)</span> 第二个事务添加一行数据。</span><br><span class="line"><span class="comment">(3)</span> 第一个事务再查询，读取到两行数据。【幻影行】</span><br></pre></td></tr></table></figure></li><li><p>不可重复读</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 同一个事务中，对于同一数据，执行完全相同的select语句时可能看到不一样的结果</span><br><span class="line"><span class="comment">(1)</span> 第一个事务进行查询，得到结果<span class="number">1.</span></span><br><span class="line"><span class="comment">(2)</span> 第二个事务进行更新，修改了数据。</span><br><span class="line"><span class="comment">(3)</span> 第一个事务再次查询，得到结果<span class="number">2.</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>写问题( <strong>锁机制</strong> )</p><ul><li><p>丢失更新问题</p><ul><li><p>悲观锁</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>串行处理业务。</span><br><span class="line">多个人对一条数据进行操作时，其中一个进入业务处理，当业务处理未完成时，其余用户需要等待该业务处理完成，才能够进入处理业务中。</span><br></pre></td></tr></table></figure></li><li><p><strong>乐观锁</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>引入 版本号</span><br><span class="line">在进入到业务处理中时，会检查该业务的版本号，若版本号一直则进行处理，不一致则不处理。</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ol>]]></content>
    
    
    <summary type="html">Mybatis-plus学习笔记。</summary>
    
    
    
    <category term="Mybatis" scheme="http://example.com/categories/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/15】Linux学习笔记</title>
    <link href="http://example.com/2022/03/15/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/15/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-15T08:43:04.000Z</published>
    <updated>2022-03-16T12:03:04.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>需要安装：</p><ol><li><p>VMware: 虚拟机软件。</p></li><li><p>CentOS: Linux操作系统。</p></li><li><p>CRT: 远程连接软件。[建议使用xshell]</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)快速连接</span><br><span class="line">* 填写Linux的<span class="built_in">ip</span>地址</span><br><span class="line">- Linux操作系统中: # ifconfig 查询虚拟机<span class="built_in">ip</span>地址</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Linux的常用命令"><a href="#Linux的常用命令" class="headerlink" title="Linux的常用命令"></a>Linux的常用命令</h3><ol><li><p>切换目录</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cd</span></span><br><span class="line">目录名: 进入某目录</span><br><span class="line">..: 返回 上一级 目录</span><br><span class="line"><span class="symbol">~</span>: 进入到root用户目录</span><br><span class="line">-: 返回 上一次 的目录</span><br></pre></td></tr></table></figure></li><li><p>列出文件列表</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ls</span><br><span class="line">-<span class="ruby">a : 列举所有文件(包括隐藏文件)</span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby">l : 列举文件的详细信息(可简写为 <span class="comment"># ll)</span></span></span><br></pre></td></tr></table></figure></li><li><p>创建目录和移除目录</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># mkdir</span></span><br><span class="line">目录名: 创建一个目录</span><br><span class="line"></span><br><span class="line"><span class="meta"># rmdir</span></span><br><span class="line">目录名: 移除一个目录</span><br></pre></td></tr></table></figure></li><li><p>浏览文件</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cat</span></span><br><span class="line">文件名: 查看文件的所有内容</span><br><span class="line"></span><br><span class="line"><span class="meta"># more</span></span><br><span class="line"><span class="meta"># less</span></span><br><span class="line">都是查看文件的内容，可以分页。</span><br><span class="line"></span><br><span class="line"><span class="meta"># tail</span></span><br><span class="line">文件名: 看文件最后十行内容</span><br></pre></td></tr></table></figure></li><li><p>文件操作</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># cp : 复制</span><br><span class="line"></span><br><span class="line"># mv : 剪切</span><br><span class="line"></span><br><span class="line"># rm : 删除文件</span><br><span class="line">-rf : 不询问，直接删除</span><br><span class="line"></span><br><span class="line"># tar : 打包或者压缩</span><br><span class="line">-cvf 文件名 : 打包</span><br><span class="line">-zcvf 文件名 : 打包并压缩</span><br><span class="line">-zxvf 文件名 : 解压</span><br><span class="line"></span><br><span class="line"># find : 查找符合条件的文件的位置</span><br><span class="line">-name : 根据文件名</span><br><span class="line"></span><br><span class="line"># gref : 查找文件中符合条件的内容</span><br><span class="line"><span class="comment">--color : 对查询结果进行高亮显示</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>其他常用操作</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pwd : 显示当前所在目录</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># touch : 创建一个空文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># clear : 清屏</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># vim : 使用vim编辑器编辑文件。</span></span><br><span class="line">* esc + :wq 保存文件</span><br><span class="line">* i,o,a执行不同的操作</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重定向 &gt;[覆盖], &gt;&gt;[追加]</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 进程相关: ps[查看进程] kill[杀死进程] kill -9[强制杀死进程]</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 管道 : | [将一个命令的输出当作另一个命令的输入] 例如: ls --help | more</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Linux的权限"><a href="#Linux的权限" class="headerlink" title="Linux的权限"></a>Linux的权限</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">----------</span><br><span class="line">1234</span><br><span class="line"></span><br><span class="line">(1)代表文件类型</span><br><span class="line"><span class="comment">* -表示文件</span></span><br><span class="line"><span class="comment">* d表示文件夹</span></span><br><span class="line"><span class="comment">* l表示连接</span></span><br><span class="line"></span><br><span class="line">(2)当前用户具有该文件的权限</span><br><span class="line"><span class="comment">* r read 读文件4</span></span><br><span class="line"><span class="comment">* w write 写文件2</span></span><br><span class="line"><span class="comment">* x excute 执行1</span></span><br><span class="line"></span><br><span class="line">(3)当前组内其他用户具有该文件的权限</span><br><span class="line"><span class="comment">* 同上</span></span><br><span class="line"></span><br><span class="line">(4)其他组的用户具有该文件的权限</span><br><span class="line"><span class="comment">* 同上</span></span><br></pre></td></tr></table></figure><p><strong>修改权限</strong></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span> <span class="comment">chmod</span> <span class="comment">u=</span>--<span class="literal">-</span> <span class="comment">g=</span>--<span class="literal">-</span> <span class="comment">o=</span>--<span class="literal">-</span></span><br></pre></td></tr></table></figure><p><strong>防火墙</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># service iptables stop : 关闭防火墙</span></span><br><span class="line"><span class="bullet">*</span> 在安装软件的时候可能要用到</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Linux学习笔记。</summary>
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/04】JavaWebServlet笔记</title>
    <link href="http://example.com/2022/03/04/JavaWeb-Servlet%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/04/JavaWeb-Servlet%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-04T14:06:04.000Z</published>
    <updated>2022-03-11T06:57:30.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</span><br><span class="line"><span class="bullet">2.</span> 查找web.xml文件，是否有对应的<span class="xml"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span></span>标签体内容。</span><br><span class="line"><span class="bullet">3.</span> 如果有，则在找到对应的<span class="xml"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span>全类名</span><br><span class="line"><span class="bullet">4.</span> tomcat会将字节码文件加载进内存，并且创建其对象</span><br><span class="line"><span class="bullet">5.</span> 调用其方法</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a><strong>生命周期</strong></h3><ol><li>被创建：执行<code>init方法</code>,只执行一次。<ul><li>Servlet的<code>init方法</code>，只执行一次，说明一个Servlet在内存中只存在一个对象，<strong>Servlet是单例的</strong>。</li><li>多个用户同时访问时，可能存在线程安全问题。</li><li>尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值。</li></ul></li><li>提供服务：执行service方法，执行多次。<ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul></li><li>被销毁：执行destroy方法，只执行一次。<ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁。</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源。</li></ul></li></ol><h3 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Servlet -- 接口</span><br><span class="line"><span class="code">|</span></span><br><span class="line"><span class="code">GenericServlet -- 抽象类</span></span><br><span class="line"><span class="code">|</span></span><br><span class="line"><span class="code">HttpServlet  -- 抽象类</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</span><br><span class="line"><span class="bullet">*</span> 将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> HttpServlet：对http协议的一种封装，简化操作</span><br><span class="line"><span class="bullet">1.</span> 定义类继承HttpServlet</span><br><span class="line"><span class="bullet">2.</span> 复写doGet/doPost方法</span><br></pre></td></tr></table></figure><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>Hyper Text Transfer Protocol 超文本传输协议.</p>]]></content>
    
    
    <summary type="html">JavaWeb中Servlet相关知识点复习记录。</summary>
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/02】JavaScript笔记</title>
    <link href="http://example.com/2022/03/02/JavaScript%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/02/JavaScript%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-02T01:47:20.000Z</published>
    <updated>2022-03-11T06:54:05.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript笔记"><a href="#JavaScript笔记" class="headerlink" title="JavaScript笔记"></a>JavaScript笔记</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ol><li><strong>概念</strong>：一门客户端脚本语言。<ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎。</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了。</li></ul></li><li><strong>功能</strong>：<ul><li>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li></ul></li><li><strong>JavaScript</strong> = <strong>ECMAScript</strong> + JavaScript自己特有的东西(<strong>BOM+DOM</strong>)</li></ol><hr><h3 id="ECMAScript：客户端脚本语言的标准"><a href="#ECMAScript：客户端脚本语言的标准" class="headerlink" title="ECMAScript：客户端脚本语言的标准"></a>ECMAScript：客户端脚本语言的标准</h3><ol><li><p><strong>基本语法</strong></p><ol><li><p>与html结合的方式</p><pre><code>1. 内部JS：* 定义&lt;script&gt;，标签体内容就是js代码2. 外部JS：* 定义&lt;script&gt;，通过src属性引入外部的js文件</code></pre></li></ol></li><li><p><strong>数据类型</strong></p><ol><li><strong>原始数据类型</strong><ul><li><code>number</code>：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)</li><li><code>string</code>：字符串。 字符串  “abc” “a” ‘abc’</li><li><code>boolean</code>: true和false</li><li><code>null</code>：一个对象为空的占位符</li><li><code>undefined</code>：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li></ul></li><li>引用数据类型：对象</li></ol></li><li><p><strong>变量</strong></p><ul><li><p>一小块存储数据的内存空间</p></li><li><p><font color=red>Java语言是<strong>强类型</strong>语言，而JavaScript是弱类型语言。</font></p><ul><li><strong>强类型</strong>：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据。</li><li><strong>弱类型</strong>：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 语法： */</span></span><br><span class="line"><span class="comment">/* var 变量名 = 初始化值; */</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>运算符</strong></p><ul><li><p>一元运算符：只有一个运算数的运算符</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* 一元运算符</span><br><span class="line">    ++，<span class="comment">-- ， +(正号)  </span></span><br><span class="line">    ++ <span class="comment">--: 自增(自减)</span></span><br><span class="line">    ++(<span class="comment">--) 在前，先自增(自减)，再运算</span></span><br><span class="line">    ++(<span class="comment">--) 在后，先运算，再自增(自减)</span></span><br><span class="line">    +(-)：正负号</span><br><span class="line"></span><br><span class="line">* 注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换</span><br><span class="line"></span><br><span class="line">* 其他类型转<span class="built_in">number</span>：</span><br><span class="line"><span class="built_in">string</span>转<span class="built_in">number</span>：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）</span><br><span class="line"><span class="built_in">boolean</span>转<span class="built_in">number</span>：<span class="literal">true</span>转为<span class="number">1</span>，<span class="literal">false</span>转为<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>算数运算符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> - <span class="emphasis">* / % ...</span></span><br></pre></td></tr></table></figure></li><li><p>赋值运算符</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">= += -+....</span></span><br></pre></td></tr></table></figure></li><li><p>比较运算符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; &lt; &gt;= &lt;= == ===(全等于)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 比较方式</span><br><span class="line"><span class="bullet">    1.</span> 类型相同：直接比较</span><br><span class="line"><span class="bullet">    *</span> 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</span><br><span class="line"><span class="bullet">    2.</span> 类型不同：先进行类型转换，再比较</span><br><span class="line"><span class="bullet">    *</span> ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; || !</span><br><span class="line"></span><br><span class="line">* 其他类型转<span class="built_in">boolean</span>：</span><br><span class="line">    <span class="number">1.</span> <span class="built_in">number</span>：<span class="number">0</span>或<span class="literal">NaN</span>为假，其他为真</span><br><span class="line">    <span class="number">2.</span> <span class="built_in">string</span>：除了空字符串(<span class="string">&quot;&quot;</span>)，其他都是<span class="literal">true</span></span><br><span class="line">    <span class="number">3.</span> <span class="literal">null</span>&amp;<span class="literal">undefined</span>:都是<span class="literal">false</span></span><br><span class="line">    <span class="number">4.</span> 对象：所有对象都为<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>三元运算符</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? : 表达式</span><br><span class="line"></span><br><span class="line">* 语法：</span><br><span class="line">    * 表达式? 值<span class="number">1</span>:值<span class="number">2</span>;</span><br><span class="line">    * 判断表达式的值，如果是<span class="literal">true</span>则取值<span class="number">1</span>，如果是<span class="literal">false</span>则取值<span class="number">2</span>；</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>流程控制语句</strong></p><ul><li><p><code>if...else...</code></p></li><li><p><code>switch</code>:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 在java中，<span class="keyword">switch</span>语句可以接受的数据类型： <span class="keyword">byte</span> <span class="keyword">int</span> shor <span class="keyword">char</span>,枚举(<span class="number">1.5</span>),<span class="built_in"><span class="keyword">String</span></span>(<span class="number">1.7</span>)</span><br><span class="line"></span><br><span class="line">* <span class="built_in"><span class="keyword">switch</span></span>(变量):</span><br><span class="line"><span class="keyword">case</span> 值:</span><br><span class="line"></span><br><span class="line">* 在JS中,<span class="keyword">switch</span>语句可以接受任意的原始数据类型</span><br></pre></td></tr></table></figure></li><li><p><code>while</code></p></li><li><p><code>do...while</code></p></li><li><p><code>for</code></p></li></ul></li><li><p><strong>JS特殊语法</strong></p><ul><li>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</li><li>变量的定义使用var关键字，也可以不使用<ul><li>用： 定义的变量是局部变量</li><li>不用：定义的变量是全局变量(不建议)</li></ul></li></ul></li></ol><hr><h4 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h4><ol><li><p><code>Function</code>: 函数(方法)对象</p><ol><li><p>创建</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.第一种方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 方法名称(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.第二种方式</span></span><br><span class="line"><span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性：length:代表形参的个数</p></li><li><p>**<font color=red>特点</font>**：</p><ul><li>形参的类型不用写,返回值类型也不写。</li><li>方法是一个对象，如果定义名称相同的方法，会覆盖。【重写方法】</li><li>在JS中，方法的调用只与方法的名称有关，和参数列表无关。</li><li>在方法声明中有一个隐藏的内置对象（数组）<code>arguments</code> ,封装所有的实际参数。</li></ul></li><li><p>调用方式</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名称(实际参数列表)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>Array</code> : 数组对象</p><ol><li><p>创建</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="type">Array</span>(元素列表);</span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="type">Array</span>(默认长度);</span><br><span class="line"><span class="number">3.</span> <span class="keyword">var</span> arr = [元素列表];</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">join</span><span class="params">(参数)</span></span>:将数组中的元素按照指定的分隔符拼接为字符串</span><br><span class="line"><span class="function"><span class="title">push</span><span class="params">()</span></span>向数组的末尾添加一个或更多元素，并返回新的长度。</span><br></pre></td></tr></table></figure></li><li><p>属性：length:数组的长度</p></li><li><p>特点：</p><ul><li>JS中，数组<strong>元素的类型可变</strong>的。</li><li>JS中，<strong>数组长度可变</strong>的。</li></ul></li></ol></li><li><p><code>Date</code>: 日期对象</p><ol><li><p>创建</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">toLocaleString</span><span class="params">()</span></span>：返回当前date对象对应的时间本地字符串格式</span><br><span class="line"><span class="function"><span class="title">getTime</span><span class="params">()</span></span>:获取毫秒值。返回当前如期对象描述的时间到<span class="number">1970</span>年<span class="number">1</span>月<span class="number">1</span>日零点的毫秒值差</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>Math</code>: 数学对象</p><ol><li><p>创建</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Math</span>.方法名();</span><br><span class="line">* 特点：<span class="keyword">Math</span>对象不用创建，直接使用。</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">random</span><span class="params">()</span></span>:返回 <span class="number">0</span> ~ <span class="number">1</span> 之间的随机数。 含<span class="number">0</span>不含<span class="number">1</span>。(<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="title">ceil</span><span class="params">(x)</span></span>：对数进行上舍入。</span><br><span class="line"><span class="function"><span class="title">floor</span><span class="params">(x)</span></span>：对数进行下舍入。</span><br><span class="line"><span class="function"><span class="title">round</span><span class="params">(x)</span></span>：把数四舍五入为最接近的整数。</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>RegExp</code>：正则表达式对象</p><ol><li><p>创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;正则表达式&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> reg = <span class="regexp">/正则表达式/</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>正则表达式</strong></p><ul><li><p>单个字符:[]</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如： <span class="comment">[a]</span> <span class="comment">[ab]</span> <span class="comment">[a-zA-Z0-9_]</span></span><br><span class="line"></span><br><span class="line">* 特殊符号代表特殊含义的单个字符:</span><br><span class="line">\d:单个数字字符 <span class="comment">[0-9]</span></span><br><span class="line">\w:单个单词字符<span class="comment">[a-zA-Z0-9_]</span></span><br></pre></td></tr></table></figure></li><li><p>量词符号：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?：表示出现<span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">*：表示出现<span class="number">0</span>次或多次</span><br><span class="line">+：出现<span class="number">1</span>次或多次</span><br><span class="line">&#123;m,<span class="built_in">n</span>&#125;<span class="symbol">:</span>表示 m&lt;= 数量 &lt;= <span class="built_in">n</span></span><br><span class="line">* m如果缺省： &#123;,<span class="built_in">n</span>&#125;<span class="symbol">:</span>最多<span class="built_in">n</span>次</span><br><span class="line">* <span class="built_in">n</span>如果缺省：&#123;m,&#125; 最少m次</span><br></pre></td></tr></table></figure></li><li><p>开始和结束符号</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>^:开始</span><br><span class="line"><span class="bullet">* </span>$:结束</span><br></pre></td></tr></table></figure></li></ul></li><li><p>正则对象方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">test</span><span class="params">(参数)</span></span>:验证指定的字符串是否符合正则定义的规范</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Global对象</p><ol><li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名()<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>():<span class="built_in">url</span>编码</span><br><span class="line"><span class="built_in">decodeURI</span>():<span class="built_in">url</span>解码</span><br><span class="line"></span><br><span class="line"><span class="built_in">encodeURIComponent</span>():<span class="built_in">url</span>编码,编码的字符更多</span><br><span class="line"><span class="built_in">decodeURIComponent</span>():<span class="built_in">url</span>解码</span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>():将字符串转为数字</span><br><span class="line">* 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> num = str1.parseInt();</span><br><span class="line">* <span class="keyword">var</span> --&gt; <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>():判断一个值是否是<span class="literal">NaN</span></span><br><span class="line">* <span class="literal">NaN</span>六亲不认，连自己都不认。<span class="literal">NaN</span>参与的==比较全部问<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>():讲 JavaScript 字符串，并把它作为脚本代码来执行。</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>Browser Object Model 浏览器对象模型。</p><ol><li><p>组成</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Window：窗口对象</span><br><span class="line"><span class="bullet">* </span>Navigator：浏览器对象</span><br><span class="line"><span class="bullet">* </span>Screen：显示器屏幕对象</span><br><span class="line"><span class="bullet">* </span>History：历史记录对象</span><br><span class="line"><span class="bullet">* </span>Location：地址栏对象</span><br></pre></td></tr></table></figure></li><li><p>Window：窗口对象</p><ol><li><p>创建</p></li><li><p>方法</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 与弹出框有关的方法：</span><br><span class="line">    <span class="function"><span class="title">alert</span>()显示带有一段消息和一个确认按钮的警告框。</span></span><br><span class="line"><span class="function">    <span class="title">confirm</span>()显示带有一段消息以及确认按钮和取消按钮的对话框。</span></span><br><span class="line"><span class="function">        * 如果用户点击确定按钮，则方法返回<span class="variable"><span class="literal">true</span></span></span></span><br><span class="line"><span class="function">        * 如果用户点击取消按钮，则方法返回<span class="variable"><span class="literal">false</span></span></span></span><br><span class="line"><span class="function">    <span class="title">prompt</span>()显示可提示用户输入的对话框。</span></span><br><span class="line"><span class="function">        * 返回值：获取用户输入的值</span></span><br><span class="line"><span class="function">                </span></span><br><span class="line"><span class="function"><span class="number">2</span>. 与打开关闭有关的方法：</span></span><br><span class="line"><span class="function">    <span class="title">close</span>()关闭浏览器窗口。</span></span><br><span class="line"><span class="function">        * 谁调用我 ，我关谁</span></span><br><span class="line"><span class="function">    <span class="title">open</span>()打开一个新的浏览器窗口</span></span><br><span class="line"><span class="function">        * 返回新的<span class="variable">Window</span>对象</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="number">3</span>. 与定时器有关的方式</span></span><br><span class="line"><span class="function">    <span class="title">setTimeout</span>()在指定的毫秒数后调用函数或计算表达式。</span></span><br><span class="line"><span class="function">        * 参数：</span></span><br><span class="line"><span class="function">            <span class="number">1</span>. js代码或者方法对象</span></span><br><span class="line"><span class="function">            <span class="number">2</span>. 毫秒值</span></span><br><span class="line"><span class="function">        * 返回值：唯一标识，用于取消定时器</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">clearTimeout</span>()取消由 <span class="title">setTimeout</span>() 方法设置的 <span class="variable">timeout</span>。</span></span><br><span class="line"><span class="function">    <span class="title">setInterval</span>()按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line"><span class="function">    <span class="title">clearInterval</span>()取消由 <span class="title">setInterval</span>() 设置的 <span class="variable">timeout</span>。</span></span><br></pre></td></tr></table></figure></li><li><p>属性</p><ol><li><p>获取其他<strong>BOM对象</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history</span><br><span class="line"><span class="keyword">location</span></span><br><span class="line"><span class="title">Navigator</span></span><br><span class="line">Screen</span><br></pre></td></tr></table></figure></li><li><p>获取<strong>DOM对象</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong><font color=red>特点</font></strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* <span class="built_in">Window</span>对象不需要创建可以直接使用 <span class="built_in">window</span>使用。</span><br><span class="line"><span class="built_in">window</span>.方法名();</span><br><span class="line"></span><br><span class="line">* <span class="built_in">window</span>引用可以省略。  </span><br><span class="line">方法名();</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Location：地址栏对象</p><ol><li><p>创建</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. window.<span class="keyword">location</span></span><br><span class="line"><span class="title">2</span>. location</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">reload</span><span class="params">()</span></span>重新加载当前文档。刷新</span><br></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">href设置或返回完整的 <span class="built_in">URL</span>。</span><br></pre></td></tr></table></figure></li></ol></li><li><p>History：历史记录对象</p><ol><li><p>创建</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> window.history</span><br><span class="line"><span class="bullet">2.</span> history</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> back():加载 history 列表中的前一个 URL。</span><br><span class="line"><span class="bullet">*</span> forward():加载 history 列表中的下一个 URL。</span><br><span class="line"><span class="bullet">*</span> go(参数):加载 history 列表中的某个具体页面。</span><br><span class="line"><span class="bullet">    *</span> 参数：</span><br><span class="line"><span class="bullet">    *</span> 正数：前进几个历史记录</span><br><span class="line"><span class="bullet">    *</span> 负数：后退几个历史记录</span><br></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">length</span>返回当前窗口历史列表中的 <span class="built_in">URL</span> 数量。</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>Document Object Model 文档对象模型。</p><ol><li><p>DOM的三个部分</p><ol><li><p>核心DOM[针对任何结构化文档的标准模型]</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Document：文档对象</span><br><span class="line"><span class="bullet">* </span>Element：元素对象</span><br><span class="line"><span class="bullet">* </span>Attribute：属性对象</span><br><span class="line"><span class="bullet">* </span>Text：文本对象</span><br><span class="line"><span class="bullet">* </span>Comment:注释对象</span><br><span class="line"><span class="bullet">* </span>Node：节点对象，其他5个的父对象</span><br></pre></td></tr></table></figure></li><li><p>XML DOM[针对 <strong>XML 文档</strong>的标准模型]</p></li><li><p>HTML DOM[针对 <strong>HTML 文档</strong>的标准模型]</p></li></ol></li><li><p><strong><font color =red>核心DOM模型</font></strong></p><ol><li><p><strong>Document：文档对象</strong></p><ol><li><p>创建</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">window</span>.<span class="built_in">document</span></span><br><span class="line"><span class="number">2.</span> <span class="built_in">document</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 获取Element对象：</span><br><span class="line">    <span class="number">1.</span> get<span class="constructor">ElementById()</span>： 根据id属性值获取元素对象。id属性值一般唯一</span><br><span class="line">    <span class="number">2.</span> get<span class="constructor">ElementsByTagName()</span>：根据元素名称获取元素对象们。返回值是一个数组</span><br><span class="line">    <span class="number">3.</span> get<span class="constructor">ElementsByClassName()</span>:根据Class属性值获取元素对象们。返回值是一个数组</span><br><span class="line">    <span class="number">4.</span> get<span class="constructor">ElementsByName()</span>: 根据name属性值获取元素对象们。返回值是一个数组</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> 创建其他DOM对象：</span><br><span class="line">    create<span class="constructor">Attribute(<span class="params">name</span>)</span></span><br><span class="line">    create<span class="constructor">Comment()</span></span><br><span class="line">    create<span class="constructor">Element()</span></span><br><span class="line">    create<span class="constructor">TextNode()</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>Element：元素对象</strong></p><ol><li><p>创建</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过<span class="built_in">document</span>来获取和创建</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="comment">removeAttribute()：删除属性</span></span><br><span class="line"><span class="number">2</span>. setAttribute()：设置属性</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>Node节点对象</strong></p><p>所有dom对象都可以被认为是一个节点。</p><ol><li><p>方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> CRUD dom树：</span><br><span class="line"><span class="bullet">    *</span> appendChild()：向节点的子节点列表的结尾添加新的子节点。</span><br><span class="line"><span class="bullet">    *</span> removeChild()：删除（并返回）当前节点的指定子节点。</span><br><span class="line"><span class="bullet">    *</span> replaceChild()：用新节点替换一个子节点。</span><br></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>parentNode 返回节点的父节点。</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><hr><h3 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h3><ol><li><p>概念</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line"><span class="bullet">*</span> 事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</span><br><span class="line"><span class="bullet">*</span> 事件源：组件。如： 按钮 文本输入框...</span><br><span class="line"><span class="bullet">*</span> 监听器：代码。</span><br><span class="line"><span class="bullet">*</span> 注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</span><br></pre></td></tr></table></figure></li><li><p>常见的事件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 点击事件：</span><br><span class="line"><span class="bullet">1.</span> onclick：单击事件</span><br><span class="line"><span class="bullet">2.</span> ondblclick：双击事件</span><br><span class="line"><span class="bullet">2.</span> 焦点事件</span><br><span class="line"><span class="bullet">1.</span> onblur：失去焦点</span><br><span class="line"><span class="bullet">2.</span> onfocus:元素获得焦点。</span><br><span class="line">   </span><br><span class="line"><span class="bullet">3.</span> 加载事件：</span><br><span class="line"><span class="bullet">1.</span> onload：一张页面或一幅图像完成加载。</span><br><span class="line">   </span><br><span class="line"><span class="bullet">4.</span> 鼠标事件：</span><br><span class="line"><span class="bullet">1.</span> onmousedown鼠标按钮被按下。</span><br><span class="line"><span class="bullet">2.</span> onmouseup鼠标按键被松开。</span><br><span class="line"><span class="bullet">3.</span> onmousemove鼠标被移动。</span><br><span class="line"><span class="bullet">4.</span> onmouseover鼠标移到某元素之上。</span><br><span class="line"><span class="bullet">5.</span> onmouseout鼠标从某元素移开。</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
    
    
    <summary type="html">JavaScript笔记。</summary>
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/01】HTML笔记</title>
    <link href="http://example.com/2022/03/01/HTML%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/01/HTML%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-01T10:57:33.000Z</published>
    <updated>2022-03-11T06:56:06.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML笔记"><a href="#HTML笔记" class="headerlink" title="HTML笔记"></a>HTML笔记</h2><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><h4 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h4><p><strong>Input</strong>: 可以通过type属性值，改变元素展示的样式</p><ul><li><p><code>type</code>属性</p><ul><li><p><code>text</code> ：文本输入框[<strong>默认值</strong>]</p><ul><li>placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息。</li></ul></li><li><p><code>password</code> ：密码输入框</p></li><li><p><code>radio</code> :单选框</p><ul><li>要想让多个单选框实现单选的效果，<strong>则多个单选框的name属性值必须一样</strong>。</li><li> 一般会给每一个单选框提供value属性，指定其被选中后提交的值。</li><li> checked属性，可以指定默认值。</li></ul></li><li><p><code>checkbox</code>: 复选框</p></li><li><p><code>hidden</code>: 隐藏域[<strong>常用于提交信息</strong>]</p></li></ul></li></ul><hr><h2 id="CSS笔记"><a href="#CSS笔记" class="headerlink" title="CSS笔记"></a>CSS笔记</h2><p><code>CSS</code>： Cascading Style Sheets 层叠样式表。[<strong>将内容展示和样式控制分离</strong>]</p><h3 id="CSS的使用"><a href="#CSS的使用" class="headerlink" title="CSS的使用"></a>CSS的使用</h3><ol><li><p>内联样式[<strong>不推荐使用</strong>]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在标签内使用style属性指定css代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内部样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在head标签内，定义style标签，style标签的标签体内容就是css代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.定义css资源文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.在head标签内，定义link标签，引入外部的资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/a.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="selector-tag">a</span><span class="selector-class">.css</span>文件 --&gt;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="CSS的语法"><a href="#CSS的语法" class="headerlink" title="CSS的语法"></a>CSS的语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    属性名<span class="number">1</span>:属性值<span class="number">1</span>;</span><br><span class="line">    属性名<span class="number">2</span>:属性值<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择器:筛选具有相似特征的元素 */</span></span><br><span class="line"><span class="comment">/* 每一对属性需要使用；隔开，最后一对属性可以不加； */</span></span><br></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>筛选具有相似特征的元素。</p><ol><li><p>基础选择器</p><ol><li><p>id选择器: 选择具体的id属性值的元素.建议在一个html页面中id值唯一。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>属性值&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>元素选择器: 选择具有相同标签名称的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签名称&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>类选择器: 选择具有相同的class属性值的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span>属性值&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>扩展选择器</p><p>选择所有元素<code>*&#123;&#125;</code>、并集选择器<code>选择器1,选择器2&#123;&#125;</code>、子选择器<code>筛选选择器1元素下的选择器2元素--选择器1 选择器2&#123;&#125;</code>、属性选择器<code>元素名称[属性名=&quot;属性值&quot;]&#123;&#125;</code>等。</p></li></ol><hr><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ol><li><p><code>get</code> 和 <code>post</code> 的区别</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.get：</span><br><span class="line"><span class="bullet">1.</span> 请求参数会在地址栏中显示。会封装到请求行中(HTTP协议后讲解)。</span><br><span class="line"><span class="bullet">2.</span> 请求参数大小是有限制的。</span><br><span class="line"><span class="bullet">3.</span> 不太安全。</span><br><span class="line">2.post：</span><br><span class="line"><span class="bullet">1.</span> 请求参数不会再地址栏中显示。会封装在请求体中(HTTP协议后讲解)</span><br><span class="line"><span class="bullet">2.</span> 请求参数的大小没有限制。</span><br><span class="line"><span class="bullet">3.</span> 较为安全。</span><br><span class="line"><span class="bullet">*</span> 注意：</span><br><span class="line"><span class="code">表单项中的数据要想被提交：必须指定其name属性。</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">HTML笔记。</summary>
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="html" scheme="http://example.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>【22/02/26】mysql复习</title>
    <link href="http://example.com/2022/02/26/mysql%E5%A4%8D%E4%B9%A0-1/"/>
    <id>http://example.com/2022/02/26/mysql%E5%A4%8D%E4%B9%A0-1/</id>
    <published>2022-02-26T07:17:44.000Z</published>
    <updated>2022-03-11T06:59:37.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL复习笔记-一"><a href="#MySQL复习笔记-一" class="headerlink" title="MySQL复习笔记(一)"></a>MySQL复习笔记(一)</h2><h3 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL: 查询语句"></a>DQL: 查询语句</h3><hr><h4 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h4><ul><li>语法：<code>order by</code></li><li>排序方式:<ul><li>升序：<code>ASC</code></li><li>降序：<code>DESC</code></li></ul></li><li><strong>多条件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 只有当第一条件值相同时，才会判断第二条件。</span><br><span class="line">SELECT * FROM student3 ORDER BY math ASC, english ASC;</span><br></pre></td></tr></table></figure><hr><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>将一列数据作为一个整体，进行纵向的计算。<strong>聚合函数的计算，排除null值。</strong></p><ul><li>count[计算个数]<ul><li>一般选择非空的列：主键</li></ul></li><li>max[计算最大值] </li><li>min[计算最小值] </li><li>sum[计算和] </li><li>avg[计算平均值]</li></ul><hr><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><ul><li><p>语法：<code>group by</code></p></li><li><p><strong>注意：</strong></p><ul><li>分组之后的查询的字段：分组字段、聚合函数</li><li><code>where</code>和<code>having</code>的区别：<ul><li>where 在<strong>分组之前</strong>进行限定，如果不满足条件，则不参与分组。having在<strong>分组之后</strong>进行限定，如果不满足结果，则不会被查询出来。</li><li>where 后不可以跟<strong>聚合函数</strong>，having可以进行聚合函数的判断。</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT sex 性别, avg(math) 数学平均成绩, count(id) 人数 FROM student3 WHERE math &gt; 70 GROUP BY sex HAVING count(id) &gt; 2;</span><br></pre></td></tr></table></figure><hr><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><ul><li>语法：<code>limit</code> 开始的索引，每一页查询的条数。</li><li>公式：<strong>开始的索引 = （当前的页码 - 1） * 每页显示的条数</strong></li><li><strong>方言：</strong>在MySQL中才生效。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 每页显示3条记录 </span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 0,3; -- 第1页</span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 3,3; -- 第2页</span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 6,3; -- 第3页</span><br></pre></td></tr></table></figure><hr><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul><li><p>概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。    </p></li><li><p>分类：</p><ul><li><p><strong>主键约束</strong>：<code>primary key</code></p><ul><li>含义：非空且唯一</li><li>一张表<strong>只能有一个</strong>字段为主键</li><li>主键就是表中记录的<strong>唯一标识</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 1. 在创建表时，添加主键约束</span><br><span class="line">create table stu(</span><br><span class="line">id int primary key,-- 给id添加主键约束</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 2. 删除主键</span><br><span class="line"># 错误 alter table stu modify id int ;</span><br><span class="line">ALTER TABLE stu DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">      # 3. 创建完表后，添加主键</span><br><span class="line">      ALTER TABLE stu MODIFY id INT PRIMARY KEY;</span><br></pre></td></tr></table></figure><ul><li>自增 <code>AUTO_INCREMENT</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1. 在创建表时，添加主键约束，并且完成主键自增长</span><br><span class="line">create table stu(</span><br><span class="line">id int primary key auto_increment,-- 给id添加主键约束</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 2. 删除自动增长</span><br><span class="line">ALTER TABLE stu MODIFY id INT;</span><br><span class="line"></span><br><span class="line"># 3. 添加自动增长</span><br><span class="line">ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>非空约束</strong>：<code>not null</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1. 创建表时添加约束</span><br><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT,</span><br><span class="line">NAME VARCHAR(20) NOT NULL -- name为非空</span><br><span class="line">);</span><br><span class="line"># 2. 创建表完后，添加非空约束</span><br><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</span><br><span class="line">    </span><br><span class="line"># 3. 删除name的非空约束</span><br><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20);</span><br></pre></td></tr></table></figure></li><li><p><strong>唯一约束</strong>：<code>unique</code></p><p>某一列的值<strong>不能重复</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1. 注意：</span><br><span class="line">#* 唯一约束可以有NULL值，但是只能有一条记录为null</span><br><span class="line"># 2. 在创建表时，添加唯一约束</span><br><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT,</span><br><span class="line">phone_number VARCHAR(20) UNIQUE -- 手机号</span><br><span class="line">);</span><br><span class="line"># 3. 删除唯一约束</span><br><span class="line">ALTER TABLE stu DROP INDEX phone_number;</span><br><span class="line"># 4. 在表创建完后，添加唯一约束</span><br><span class="line">ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</span><br></pre></td></tr></table></figure></li><li><p><strong>外键约束</strong>：<code>foreign key</code></p><ul><li><p>让表于表产生关系，从而保证数据的正确性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 1. 在创建表时，可以添加外键</span><br><span class="line"># 语法：</span><br><span class="line">create table 表名(</span><br><span class="line">....</span><br><span class="line">外键列</span><br><span class="line">constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</span><br><span class="line">);</span><br><span class="line">      </span><br><span class="line"># 2. 删除外键</span><br><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span><br><span class="line">      </span><br><span class="line"># 3. 创建表之后，添加外键</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</span><br></pre></td></tr></table></figure></li><li><p>级联操作</p><ul><li><code>on update cascade</code> ：级联更新</li><li><code> on delete cascade</code>： 级联删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 创建外键约束</span><br><span class="line">constraint emp_depid_fk foreign key (dep_id) references</span><br><span class="line"> department(id) on update cascade on delete cascade</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h3></li><li><p><strong>多表之间的关系</strong></p><ul><li><p><strong>分类</strong></p><ul><li><p>一对一</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">  一个人只有一个身份证，一个身份证只能对应一个人</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>多对一</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个部门有多个员工，一个员工只能对应一个部门</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>多对多</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个学生可以选择很多门课程，一个课程也可以被很多学生选择</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**实现关系**</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> 一对多(多对一)</span><br><span class="line"></span><br><span class="line"><span class="code">      实现方式：在多的一方建立外键，指向一的一方的主键。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">    -</span> 多对多</span><br><span class="line"></span><br><span class="line"><span class="code">      实现方式： 多对多关系实现需要借助**第三张中间表**。中间表至少包含两个字段，这两个字段作为中间表的外键，分别指向两张表的主键。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**范式**</span></span><br><span class="line"><span class="bullet">  -</span> 第一范式：每一列都是不可分割的原子数据项。</span><br><span class="line"><span class="bullet">  -</span> 第二范式：在满足<span class="strong">**第一范式**</span>的基础上，消除非主属性对主码的<span class="strong">**部分函数依赖**</span>。</span><br><span class="line"><span class="bullet">  -</span> 第三范式：在满足<span class="strong">**第二范式**</span>的基础上，消除<span class="strong">**传递依赖**</span>。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">### 多表查询</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**笛卡尔积**</span></span><br><span class="line"><span class="bullet">  -</span> 有两个集合A,B .取这两个集合的所有组成情况。</span><br><span class="line"><span class="bullet">  -</span> 要完成多表查询，需要消除无用的数据。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**分类**</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**内连接查询**</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> 隐式内连接：使用where条件消除无用数据</span><br><span class="line"></span><br><span class="line"><span class="code">      ```mysql</span></span><br><span class="line"><span class="code">      SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</span></span><br></pre></td></tr></table></figure></li><li><p>显式内连接：select 字段列表 from 表名1 [inner] join 表名2 on 条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`;</span><br><span class="line">SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>外连接查询</strong></p><ul><li><p>**<font color=red>左外连接</font>**：select 字段列表 from 表1 left [outer] join 表2 on 条件</p><p>查询的是<strong>左表所有数据</strong>以及其交集部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span><br><span class="line">SELECT t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li><li><p>右外连接：select 字段列表 from 表1 right [outer] join 表2 on 条件；</p><p>查询的是右表所有数据以及其交集部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>子查询</strong></p><p><strong>查询中嵌套查询</strong>，称嵌套查询为子查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 查询工资最高的员工信息</span><br><span class="line"># 1 单行单列</span><br><span class="line">SELECT * FROM emp WHERE emp.`salary` = (SELECT MAX(salary) FROM emp);</span><br><span class="line"></span><br><span class="line"># 2 多行单列：子查询可以作为条件，使用运算符in来判断</span><br><span class="line"># 查询&#x27;财务部&#x27;和&#x27;市场部&#x27;所有的员工信息</span><br><span class="line">-- 子查询</span><br><span class="line">SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = &#x27;财务部&#x27; OR NAME = &#x27;市场部&#x27;);</span><br><span class="line"></span><br><span class="line"># 多行多列</span><br><span class="line"># 子查询可以作为一张虚拟表参与查询</span><br><span class="line"># 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span><br><span class="line">SELECT </span><br><span class="line">*</span><br><span class="line">FROM </span><br><span class="line">dept t1,</span><br><span class="line">(SELECT * FROM emp WHERE emp.join_date &gt; &#x27;2011-11-11&#x27;) t2</span><br><span class="line">WHERE</span><br><span class="line">t1.id = t2.dept_id</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="多表查询练习"><a href="#多表查询练习" class="headerlink" title="多表查询练习"></a>多表查询练习</h4><ul><li><p>建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 1.部门表</span><br><span class="line">CREATE TABLE dept (</span><br><span class="line">    id INT PRIMARY KEY PRIMARY KEY, -- 部门id</span><br><span class="line">    dname VARCHAR(50), -- 部门名称</span><br><span class="line">    loc VARCHAR(50) -- 部门所在地</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 2.职务表</span><br><span class="line">CREATE TABLE job (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    jname VARCHAR(20), -- 职务名称</span><br><span class="line">    description VARCHAR(50) -- 职务描述</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 3.员工表</span><br><span class="line">CREATE TABLE emp (</span><br><span class="line">    id INT PRIMARY KEY, -- 员工id</span><br><span class="line">    ename VARCHAR(50), -- 员工姓名</span><br><span class="line">    job_id INT, -- 职务id</span><br><span class="line">    mgr INT , -- 上级领导</span><br><span class="line">    joindate DATE, -- 入职日期</span><br><span class="line">    salary DECIMAL(7,2), -- 工资</span><br><span class="line">    bonus DECIMAL(7,2), -- 奖金</span><br><span class="line">    dept_id INT, -- 所在部门编号</span><br><span class="line">    CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),</span><br><span class="line">    CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 4.工资表</span><br><span class="line">CREATE TABLE salarygrade (</span><br><span class="line">    grade INT PRIMARY KEY,   -- 级别</span><br><span class="line">    losalary INT,  -- 最低工资</span><br><span class="line">    hisalary INT -- 最高工资</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 1.部门表：添加4个部门</span><br><span class="line">INSERT INTO dept(id,dname,loc) VALUES </span><br><span class="line">(10,&#x27;教研部&#x27;,&#x27;北京&#x27;),</span><br><span class="line">(20,&#x27;学工部&#x27;,&#x27;上海&#x27;),</span><br><span class="line">(30,&#x27;销售部&#x27;,&#x27;广州&#x27;),</span><br><span class="line">(40,&#x27;财务部&#x27;,&#x27;深圳&#x27;);</span><br><span class="line"></span><br><span class="line"># 2.职务表：添加4个职务</span><br><span class="line">INSERT INTO job (id, jname, description) VALUES</span><br><span class="line">(1, &#x27;董事长&#x27;, &#x27;管理整个公司，接单&#x27;),</span><br><span class="line">(2, &#x27;经理&#x27;, &#x27;管理部门员工&#x27;),</span><br><span class="line">(3, &#x27;销售员&#x27;, &#x27;向客人推销产品&#x27;),</span><br><span class="line">(4, &#x27;文员&#x27;, &#x27;使用办公软件&#x27;);</span><br><span class="line"></span><br><span class="line"># 3.员工表：添加员工</span><br><span class="line">INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES </span><br><span class="line">(1001,&#x27;孙悟空&#x27;,4,1004,&#x27;2000-12-17&#x27;,&#x27;8000.00&#x27;,NULL,20),</span><br><span class="line">(1002,&#x27;卢俊义&#x27;,3,1006,&#x27;2001-02-20&#x27;,&#x27;16000.00&#x27;,&#x27;3000.00&#x27;,30),</span><br><span class="line">(1003,&#x27;林冲&#x27;,3,1006,&#x27;2001-02-22&#x27;,&#x27;12500.00&#x27;,&#x27;5000.00&#x27;,30),</span><br><span class="line">(1004,&#x27;唐僧&#x27;,2,1009,&#x27;2001-04-02&#x27;,&#x27;29750.00&#x27;,NULL,20),</span><br><span class="line">(1005,&#x27;李逵&#x27;,4,1006,&#x27;2001-09-28&#x27;,&#x27;12500.00&#x27;,&#x27;14000.00&#x27;,30),</span><br><span class="line">(1006,&#x27;宋江&#x27;,2,1009,&#x27;2001-05-01&#x27;,&#x27;28500.00&#x27;,NULL,30),</span><br><span class="line">(1007,&#x27;刘备&#x27;,2,1009,&#x27;2001-09-01&#x27;,&#x27;24500.00&#x27;,NULL,10),</span><br><span class="line">(1008,&#x27;猪八戒&#x27;,4,1004,&#x27;2007-04-19&#x27;,&#x27;30000.00&#x27;,NULL,20),</span><br><span class="line">(1009,&#x27;罗贯中&#x27;,1,NULL,&#x27;2001-11-17&#x27;,&#x27;50000.00&#x27;,NULL,10),</span><br><span class="line">(1010,&#x27;吴用&#x27;,3,1006,&#x27;2001-09-08&#x27;,&#x27;15000.00&#x27;,&#x27;0.00&#x27;,30),</span><br><span class="line">(1011,&#x27;沙僧&#x27;,4,1004,&#x27;2007-05-23&#x27;,&#x27;11000.00&#x27;,NULL,20),</span><br><span class="line">(1012,&#x27;李逵&#x27;,4,1006,&#x27;2001-12-03&#x27;,&#x27;9500.00&#x27;,NULL,30),</span><br><span class="line">(1013,&#x27;小白龙&#x27;,4,1004,&#x27;2001-12-03&#x27;,&#x27;30000.00&#x27;,NULL,20),</span><br><span class="line">(1014,&#x27;关羽&#x27;,4,1007,&#x27;2002-01-23&#x27;,&#x27;13000.00&#x27;,NULL,10);</span><br><span class="line"></span><br><span class="line"># 4.工资表：添加5个工资等级</span><br><span class="line">INSERT INTO salarygrade(grade,losalary,hisalary) VALUES </span><br><span class="line">(1,7000,12000),</span><br><span class="line">(2,12010,14000),</span><br><span class="line">(3,14010,20000),</span><br><span class="line">(4,20010,30000),</span><br><span class="line">(5,30010,99990);</span><br></pre></td></tr></table></figure></li><li><p>练习需求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</span><br><span class="line">SELECT </span><br><span class="line">t1.ename, -- 员工编号</span><br><span class="line">t1.id, -- 员工姓名</span><br><span class="line">t1.salary, -- 工资</span><br><span class="line">t2.jname, -- 职务名称</span><br><span class="line">t2.description -- 职务描述</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">job t2</span><br><span class="line">WHERE</span><br><span class="line">t1.job_id = t2.id;</span><br><span class="line"></span><br><span class="line"># 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</span><br><span class="line">SELECT </span><br><span class="line">t1.ename, -- 员工编号</span><br><span class="line">t1.id, -- 员工姓名</span><br><span class="line">t1.salary, -- 工资</span><br><span class="line">t2.jname, -- 职务名称</span><br><span class="line">t2.description, -- 职务描述</span><br><span class="line">t3.dname, -- 部门名称</span><br><span class="line">t3.loc -- 部门位置</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">job t2,</span><br><span class="line">dept t3</span><br><span class="line">WHERE</span><br><span class="line">t1.dept_id = t3.id AND t1.job_id = t2.id;</span><br><span class="line"></span><br><span class="line"># 3.查询员工姓名，工资，工资等级</span><br><span class="line">SELECT</span><br><span class="line">t1.ename, -- 员工姓名</span><br><span class="line">t1.salary, -- 工资</span><br><span class="line">t2.grade -- 工资等级</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">salarygrade t2</span><br><span class="line">WHERE</span><br><span class="line">t1.salary BETWEEN t2.losalary AND t2.hisalary;</span><br><span class="line"></span><br><span class="line"># 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</span><br><span class="line">SELECT</span><br><span class="line">t1.ename, -- 员工姓名</span><br><span class="line">t1.salary, -- 工资</span><br><span class="line">t2.jname, -- 职务名称</span><br><span class="line">t2.description, -- 职务描述</span><br><span class="line">t3.dname, -- 部门名称</span><br><span class="line">t3.loc, -- 部门位置</span><br><span class="line">t4.grade -- 工资等级</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">job t2,</span><br><span class="line">dept t3,</span><br><span class="line">salarygrade t4</span><br><span class="line">WHERE</span><br><span class="line">t1.dept_id = t3.id AND</span><br><span class="line">t1.job_id = t2.id AND</span><br><span class="line">t1.salary BETWEEN t4.losalary AND t4.hisalary;</span><br><span class="line"></span><br><span class="line"># 5.查询出部门编号、部门名称、部门位置、部门人数</span><br><span class="line">SELECT</span><br><span class="line">t1.id, -- 部门编号</span><br><span class="line">t1.dname, -- 部门名称</span><br><span class="line">t1.loc, -- 部门位置</span><br><span class="line">t2.total</span><br><span class="line">FROM</span><br><span class="line">dept t1,</span><br><span class="line">(SELECT dept_id, COUNT(id) total FROM emp GROUP BY dept_id) t2</span><br><span class="line">WHERE</span><br><span class="line">t1.id = t2.dept_id;</span><br><span class="line"></span><br><span class="line"># 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询</span><br><span class="line">SELECT</span><br><span class="line">t1.ename,</span><br><span class="line">t1.mgr,</span><br><span class="line">t2.id,</span><br><span class="line">t2.ename</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">emp t2</span><br><span class="line">WHERE</span><br><span class="line">t1.mgr = t2.id;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li><p><strong>概念</strong>：如果一个包含多个步骤的业务操作，被<strong>事务管理</strong>，那么这些操作要么同时成功，要么同时失败。</p></li><li><p> 操作：</p></li><li><p>开启事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br></pre></td></tr></table></figure></li><li><p>回滚：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure></li><li><p>提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color=red>事务的四大特征</font></strong></p><ul><li><strong>原子性</strong>: 是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li><strong>持久性</strong>: 当事务提交或回滚后，数据库会持久化的保存数据。</li><li><strong>隔离性</strong>: 多个事务之间。相互独立。</li><li><strong>一致性</strong>: 事务操作前后，数据总量不变。</li></ul></li><li><p><strong>事务的隔离级别</strong></p><ul><li>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</li><li><strong>存在问题</strong><ul><li><strong>脏读</strong>: 一个事务，读取到另一个事务中还没有提交的数据。</li><li><strong>不可重复读</strong>: 在同一个事务中，两次读取的数据不一样。</li><li><strong>幻读</strong>: 一个事务操作(DML)数据表中的所有记录，另一个事务添加了一条数据，则第一个事务查询不道自己的修改。</li></ul></li><li>隔离级别：从上到下<strong>安全性越来越高，效率越来越低</strong>。<ul><li><code>read uncommitted</code> : 读未提交。【脏读、不可重复读、幻读】</li><li><code>read committed</code>: 读已提交。【不可重复读、幻读】</li><li><code>repeatable read</code>: 可重复读。【幻读】</li><li><code>serializable</code>: 串行化。【无问题】</li></ul></li></ul></li></ul><hr>]]></content>
    
    
    <summary type="html">mysql复习。</summary>
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>【22/02/24】SpringBoot学习笔记(四)</title>
    <link href="http://example.com/2022/02/24/SpringBoot%E7%AC%94%E8%AE%B0-4/"/>
    <id>http://example.com/2022/02/24/SpringBoot%E7%AC%94%E8%AE%B0-4/</id>
    <published>2022-02-24T06:41:51.000Z</published>
    <updated>2022-03-11T06:51:03.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot笔记4—数据访问"><a href="#SpringBoot笔记4—数据访问" class="headerlink" title="SpringBoot笔记4—数据访问"></a>SpringBoot笔记4—数据访问</h2><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><h4 id="1-导入JDBC场景"><a href="#1-导入JDBC场景" class="headerlink" title="1 导入JDBC场景"></a>1 导入JDBC场景</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 想要修改版本</span></span><br><span class="line"><span class="comment">1、直接依赖引入具体版本（maven的就近依赖原则）</span></span><br><span class="line"><span class="comment">2、重新声明版本（maven的属性的就近优先原则）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-修改配置项-配置数据源"><a href="#2-修改配置项-配置数据源" class="headerlink" title="2 修改配置项[配置数据源]"></a>2 修改配置项[配置数据源]</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;characterSetResults=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h4 id="3-测试-查询数据库中数据表的信息"><a href="#3-测试-查询数据库中数据表的信息" class="headerlink" title="3 测试[查询数据库中数据表的信息]"></a>3 测试[查询数据库中数据表的信息]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootWebApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Long num = template.queryForObject(<span class="string">&quot;select count(*) from user&quot;</span>, Long.class);</span><br><span class="line">        log.info(<span class="string">&quot;查询到数据的行数:&#123;&#125;&quot;</span>,num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="查询结果："><a href="#查询结果：" class="headerlink" title="查询结果："></a>查询结果：</h4></li></ul><img src="/2022/02/24/SpringBoot%E7%AC%94%E8%AE%B0-4/image-20220224220117316.png" class="" title="image-20220224220117316"><img src="/2022/02/24/SpringBoot%E7%AC%94%E8%AE%B0-4/image-20220224220105071.png" class="" title="image-20220224220105071"><hr><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><h4 id="1-引入druid-starter"><a href="#1-引入druid-starter" class="headerlink" title="1 引入druid-starter"></a>1 引入<code>druid-starter</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-在配置文件中对druid进行配置"><a href="#2-在配置文件中对druid进行配置" class="headerlink" title="2 在配置文件中对druid进行配置"></a>2 在配置文件中对<code>druid</code>进行配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;characterSetResults=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">com.fanpeng.boot.*</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">drop-table-allow:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><h3 id="MyBatis-重点"><a href="#MyBatis-重点" class="headerlink" title="MyBatis[重点]"></a><font color=red>MyBatis[重点]</font></h3><h4 id="1-引入MyBatis-starter"><a href="#1-引入MyBatis-starter" class="headerlink" title="1 引入MyBatis-starter"></a>1 引入MyBatis-starter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/02/24/SpringBoot%E7%AC%94%E8%AE%B0-4/image-20220225131751618.png" class="" title="image-20220225131751618"><h4 id="2-编写mapper接口。标注-Mapper注解。"><a href="#2-编写mapper接口。标注-Mapper注解。" class="headerlink" title="2 编写mapper接口。标注@Mapper注解。"></a>2 编写mapper接口。标注@Mapper注解。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-编写sql映射文件并绑定mapper接口。"><a href="#3-编写sql映射文件并绑定mapper接口。" class="headerlink" title="3 编写sql映射文件并绑定mapper接口。"></a>3 编写sql映射文件并绑定mapper接口。</h4><p><code>UserService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = userMapper.getUser(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SqlController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getuser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-在application-yaml中指定Mapper配置文件的位置；指定全局配置文件的信息【建议配置在mybatis-configuration】。"><a href="#4-在application-yaml中指定Mapper配置文件的位置；指定全局配置文件的信息【建议配置在mybatis-configuration】。" class="headerlink" title="4 在application.yaml中指定Mapper配置文件的位置；指定全局配置文件的信息【建议配置在mybatis.configuration】。"></a>4 在<code>application.yaml</code>中指定Mapper配置文件的位置；指定全局配置文件的信息【建议配置在mybatis.configuration】。</h4><p><code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#  config-location: classpath:mybatis/mybatis-config.xml # 二选一(1)</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span> <span class="comment"># 二选一(2)</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 可以不写全局；配置文件，所有全局配置文件都放在configuration配置项中即可。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Mapper接口--》绑定xml文件[xxxMapper.xml文件中`&lt;mapper namespace=&quot;com.xxx&quot;&gt;`]</span></span><br><span class="line"><span class="comment"># Mapper接口需要标注@Mapper</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">SpringBoot：数据访问。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/01/22】SpringBoot学习笔记(三)</title>
    <link href="http://example.com/2022/02/20/SpringBoot%E7%AC%94%E8%AE%B0-3/"/>
    <id>http://example.com/2022/02/20/SpringBoot%E7%AC%94%E8%AE%B0-3/</id>
    <published>2022-02-20T03:26:39.000Z</published>
    <updated>2022-02-24T06:40:39.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot学习笔记-三"><a href="#SpringBoot学习笔记-三" class="headerlink" title="SpringBoot学习笔记(三)"></a>SpringBoot学习笔记(三)</h2><h3 id="1-简单功能分析"><a href="#1-简单功能分析" class="headerlink" title="1 简单功能分析"></a>1 简单功能分析</h3><h4 id="1-1-静态资源访问"><a href="#1-1-静态资源访问" class="headerlink" title="1.1 静态资源访问"></a>1.1 静态资源访问</h4><p><strong>(1) 静态资源目录</strong></p><p>​    静态资源放在类路径下：<code>/static</code>、<code>/public</code>、<code>/resource</code> 或者 <code>/META-INF/resources</code>。</p><p>​    <strong>访问规则</strong>：当前项目根路径/ + 静态资源名</p><p>​    <strong>访问原理</strong>： 静态映射/**。</p><p>​    <strong>处理流程</strong>： 请求进入，①首先查找Controller中是否可以处理。②不能处理的所有请求又都交给静态资源处理器。③静态资源找不到，则返回404。</p><p>​    <strong>修改静态资源路径</strong>：</p><p>​    默认无前缀，修改访问前缀：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure><p>​    该路径为：当前项目 + static-path-pattern + 静态资源名 ==&gt; 静态资源文件夹下查找</p><p>​    <strong>测试结果</strong>：</p><p>​    <img src="/2022/02/20/SpringBoot%E7%AC%94%E8%AE%B0-3/image-20220220113938578.png" class="" title="image-20220220113938578"></p><hr><h4 id="1-2-欢迎页支持"><a href="#1-2-欢迎页支持" class="headerlink" title="1.2 欢迎页支持"></a>1.2 欢迎页支持</h4><p>静态资源路径下index.html</p><ul><li>可以配置静态资源路径。</li><li>不可以配置静态资源访问前缀(会导致资源无法访问到)。</li><li>controller可以处理/index.</li></ul><hr><h4 id="1-3-静态资源配置原理"><a href="#1-3-静态资源配置原理" class="headerlink" title="1.3 静态资源配置原理"></a>1.3 静态资源配置原理</h4><ul><li>SpringBoot 启动默认加载 <code>xxxAutoConfiguration</code> 类(自动配置类)</li><li>SpringMVC 功能自动配置类为<code>WebMvcAutoConfiguration</code></li></ul><hr><h4 id="1-4-请求处理-Rest映射"><a href="#1-4-请求处理-Rest映射" class="headerlink" title="1.4 请求处理(Rest映射)"></a>1.4 请求处理(Rest映射)</h4><p>使用HTTP请求方式动词对资源进行操作。</p><ul><li><p>以前： <em>/getUser</em>  <em>获取用户</em>    <em>/deleteUser</em> <em>删除用户</em>   <em>/editUser</em>  <em>修改用户</em>      <em>/saveUser</em> <em>保存用户</em></p></li><li><p><strong>Rest风格</strong>： /user <em>GET-获取用户</em>    <em>DELETE-删除用户</em>     <em>PUT-修改用户</em>      <em>POST-保存用户</em> </p></li><li><p>核心Filter: <strong>HiddenHttpMethodFilter</strong></p></li><li><p><strong>使用注解</strong>：</p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li></ul></li><li><p>使用方法：</p><ul><li><p>开启表单Rest功能</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure></li><li><p>表单属性method=post， 隐藏域 <strong>_method</strong> = put或者delete。【get和post无需隐藏】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT提交&quot;</span><span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Rest原理解析</strong></p><p>表单提交，需要使用REST的时候</p><ul><li>表单提交会带上 <code>_method=PUT</code></li><li>请求会被<strong>HiddenHttpMethodFilter</strong>拦截<ul><li>请求是否正常?并且是POST<ul><li>获取到 <code>_method</code> 的值</li><li>兼容以下请求: <strong>PUT DELETE PATCH</strong></li><li>原生<strong>request(post)<strong>，包装模式</strong>requesWrapper</strong>重写<strong>getMethod</strong>方法，返回的是传入的值。</li><li>过滤器链放行时用wrapper，以后的方法调用getMethod是调用requesWrapper的。</li></ul></li></ul></li></ul></li></ul><hr><h4 id="1-5-请求处理-常用参数注解使用"><a href="#1-5-请求处理-常用参数注解使用" class="headerlink" title="1.5 请求处理(常用参数注解使用)"></a>1.5 请求处理(常用参数注解使用)</h4><p>常用注解：</p><p><code>@PathVariable </code>: 路径变量，<code>@RequestHeader</code>: 请求头，<code>@RequestParam</code>: 获取请求参数，<code>@RequestBody</code>: 获取请求体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 测试@PathVariable @RequestParam --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/car/3/owner/zhangsan?age=18&amp;inters=basketball&amp;inters=football&quot;</span>&gt;</span>/car/&#123;id&#125;/owner/&#123;username&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/car/3/owner/zhangsan:路径变量</span></span><br><span class="line"><span class="comment">?age=18&amp;inters=basketball&amp;inters=football:请求参数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- =========================================================================== --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 测试@RequestBody --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/save&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 测试@PathVariable @RequestParam</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String UserAgent,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam</span> MultiValueMap&lt;String,String&gt; params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//        MultiValueMap&lt;String, Object&gt; map = new LinkedMultiValueMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;UserAgent&quot;,UserAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;header&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 测试@RequestBody</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-6-视图解析与模板引擎"><a href="#1-6-视图解析与模板引擎" class="headerlink" title="1.6 视图解析与模板引擎"></a>1.6 视图解析与模板引擎</h4><p><code>Thymeleaf</code> 的使用</p><ul><li><p>引入starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入starter之后，<code>thymeleaf</code>的配置都在 <code>ThymeleafProperties</code> 中配置好了(包括<code>SpringTemplateEngine</code>,<code>ThymeleafViewResolver</code>)。</p></li><li><p>编写控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;百度一下你就知道&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;link&quot;</span>,<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写页面(success.html)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>success<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span> 成功 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- $&#123;...&#125;用于变量取值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;$&#123;link&#125;&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.google.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/link&#125;&quot;</span>&gt;</span>百度一下2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- @&#123;...&#125;用于设置链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-后台管理系统"><a href="#2-后台管理系统" class="headerlink" title="2 后台管理系统"></a>2 后台管理系统</h3><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">indexController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 访问首页</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/&quot;,&quot;/login&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">(User user, HttpSession session, Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasLength(user.getUsername()) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(user.getPassword())) &#123;</span><br><span class="line">            <span class="comment">// 登录成功的用户存储一下</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             *   使用重定向</span></span><br><span class="line"><span class="comment">             *   登陆成功重定向到main.html，防止表单重复提交</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;账号密码错误！&quot;</span>);</span><br><span class="line">            <span class="comment">// 重新返回登录页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  去main页面</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/main.html&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mainPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- method设置为post, th:action设置为@&#123;/login&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- name设置为username和password, 接受输入框的数据与User建立关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录检查</span></span><br><span class="line"><span class="comment"> * 1、配置好拦截器要拦截哪些请求</span></span><br><span class="line"><span class="comment"> * 2、把这些配置放在容器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行前</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String requestUrl = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 登陆前检查</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截住</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行完成以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染完成后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置类WebConfig"><a href="#配置类WebConfig" class="headerlink" title="配置类WebConfig"></a>配置类WebConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、编写一个拦截器实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment"> * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）</span></span><br><span class="line"><span class="comment"> * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p><code>FormController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/form_layouts&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">form_layouts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;form/form_layouts&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;,username=&#123;&#125;,headerImg=&#123;&#125;&quot;</span>,</span><br><span class="line">                email,username,headerImg.getSize());</span><br><span class="line">        <span class="keyword">if</span>(!headerImg.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 保存文件到磁盘中</span></span><br><span class="line">            String originalFilename = headerImg.getOriginalFilename();</span><br><span class="line">            headerImg.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;E:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>form_layouts.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;headerImg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li>默认情况下，SpringBoot提供一个处理所有错误的映射<code>/error</code>，响应一个”<code>whitelabel</code>“错误视图。</li></ul><ul><li><p><strong>添加自定义</strong>，将View解析为error。</p><ul><li><p><code>error/</code>下的<code>404、5xx</code>页面会自动解析。</p><img src="/2022/02/20/SpringBoot%E7%AC%94%E8%AE%B0-3/image-20220224101424354.png" class="" title="image-20220224101424354"></li><li><p>也可自定义**控制器(Controller)**。</p></li></ul></li></ul><h4 id="Web原生组件注入-Servlet、Filter、Listener"><a href="#Web原生组件注入-Servlet、Filter、Listener" class="headerlink" title="Web原生组件注入(Servlet、Filter、Listener)"></a>Web原生组件注入(Servlet、Filter、Listener)</h4><ul><li><p> <strong><font color=red>使用Servlet API</font></strong></p></li><li><p><code>@ServletComponentScan(&quot;com.fanpeng&quot;)</code>:指定原生<code>servlet</code>都放在哪里。</p></li><li><p><code>@WebServlet(urlPatterns = &quot;/my&quot;)</code>:注册<code>servlet</code>组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@WebFilter(urlPatterns = &#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</code>:设置<code>Filter</code>进行拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</span></span><br><span class="line"><span class="comment">// ”/css/*“:servlet写法；“/css/**”：spring写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 销毁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Filter工作&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@WebListener</code>:设置监听器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyServletContextListener初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyServletContextListener销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color=red>使用RegistrationBean</font></strong></p><ul><li><p><code>MyServletConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(myServlet,<span class="string">&quot;/my&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/css/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyServletContextListener myServletContextListener = <span class="keyword">new</span> MyServletContextListener();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean(myServletContextListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr>]]></content>
    
    
    <summary type="html">SpringBoot：Web开发。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/01/22】SpringBoot学习笔记(二)</title>
    <link href="http://example.com/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/"/>
    <id>http://example.com/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/</id>
    <published>2022-01-22T09:16:55.000Z</published>
    <updated>2022-02-20T02:39:36.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot学习笔记-二"><a href="#SpringBoot学习笔记-二" class="headerlink" title="SpringBoot学习笔记(二)"></a>SpringBoot学习笔记(二)</h2><h3 id="1-组件功能"><a href="#1-组件功能" class="headerlink" title="1 组件功能"></a>1 组件功能</h3><h4 id="1-1-Configuration"><a href="#1-1-Configuration" class="headerlink" title="1.1 @Configuration"></a>1.1 @Configuration</h4><ul><li>Full模式: 配置类组件之间<strong>有依赖关系</strong>，方法会被调用得到之前单实例组件，用Full模式。</li><li>Lite模式: 配置类组件之间<strong>无依赖关系</strong>用Lite模式加速容器启动过程，减少判断。</li></ul><h4 id="1-2-Bean-Component-Controller-Service-Repository"><a href="#1-2-Bean-Component-Controller-Service-Repository" class="headerlink" title="1.2 @Bean @Component @Controller @Service @Repository"></a>1.2 @Bean @Component @Controller @Service @Repository</h4><h4 id="1-3-ComponentScan-Import"><a href="#1-3-ComponentScan-Import" class="headerlink" title="1.3 @ComponentScan @Import"></a>1.3 @ComponentScan @Import</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="comment">// 给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span></span><br></pre></td></tr></table></figure><h4 id="1-4-Conditional"><a href="#1-4-Conditional" class="headerlink" title="1.4 @Conditional"></a>1.4 @Conditional</h4><ul><li><p><strong>条件装配：</strong> 满足Conditional指定的条件，则进行组件注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span></span><br></pre></td></tr></table></figure></li></ul><br><h3 id="2-原生配置文件引入"><a href="#2-原生配置文件引入" class="headerlink" title="2 原生配置文件引入"></a>2 原生配置文件引入</h3><h4 id="2-1-ImportResource"><a href="#2-1-ImportResource" class="headerlink" title="2.1 @ImportResource"></a>2.1 @ImportResource</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">======================beans.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">======================测试=================</span><br><span class="line">        <span class="keyword">boolean</span> haha = run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> hehe = run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;haha：&quot;</span>+haha);<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hehe：&quot;</span>+hehe);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><h3 id="3-配置绑定"><a href="#3-配置绑定" class="headerlink" title="3 配置绑定"></a>3 配置绑定</h3><p>读取properties文件中的内容，并将其封装到JavaBean中。</p><h4 id="3-1-ConfigurationProperties"><a href="#3-1-ConfigurationProperties" class="headerlink" title="3.1 @ConfigurationProperties"></a>3.1 @ConfigurationProperties</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-EnableConfigurationProperties-ConfigurationProperties"><a href="#3-2-EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="3.2 @EnableConfigurationProperties + @ConfigurationProperties"></a>3.2 @EnableConfigurationProperties + @ConfigurationProperties</h4><h4 id="3-3-Component-ConfigurationProperties"><a href="#3-3-Component-ConfigurationProperties" class="headerlink" title="3.3 @Component + @ConfigurationProperties"></a>3.3 @Component + @ConfigurationProperties</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="comment">//1、开启Car配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="4-开发技巧"><a href="#4-开发技巧" class="headerlink" title="4 开发技巧"></a>4 开发技巧</h3><h4 id="4-1-Lombok"><a href="#4-1-Lombok" class="headerlink" title="4.1 Lombok"></a>4.1 Lombok</h4><p>简化JavaBean开发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">idea中搜索安装lombok插件</span><br></pre></td></tr></table></figure><h4 id="4-2-Spring-Initailizr-项目初始化向导"><a href="#4-2-Spring-Initailizr-项目初始化向导" class="headerlink" title="4.2 Spring Initailizr(项目初始化向导)"></a>4.2 Spring Initailizr(项目初始化向导)</h4><img src="/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/image-20220219143638487.png" class="" title="image-20220219143638487"><p>创建项目时选择开发场景。</p><img src="/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/image-20220219143702772.png" class="" title="image-20220219143702772"><p>会自动引入依赖。</p><img src="/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/image-20220219143755096.png" class="" title="image-20220219143755096"><p>项目结构</p><img src="/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/image-20220219143906462.png" class="" title="image-20220219143906462"><hr>]]></content>
    
    
    <summary type="html">SpringBoot：组件功能、配置绑定与开发小技巧。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/01/15】SpringBoot学习笔记(一)</title>
    <link href="http://example.com/2022/01/17/SpringBoot%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://example.com/2022/01/17/SpringBoot%E7%AC%94%E8%AE%B0-1/</id>
    <published>2022-01-17T08:43:57.000Z</published>
    <updated>2022-02-20T02:39:00.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot学习笔记-一"><a href="#SpringBoot学习笔记-一" class="headerlink" title="SpringBoot学习笔记(一)"></a>SpringBoot学习笔记(一)</h2><h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1 搭建环境"></a>1 搭建环境</h3><p><strong>(1) 系统要求</strong></p><p>Java8，Maven3.3+</p><p><strong>(2) maven设置</strong></p><p>修改maven中的配置文件内容：①设置镜像 ②设置maven中Java编译版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 创建工程</p><p>(4) 工程中引入依赖(pom.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(5) 创建主程序，设置为程序运行入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(6) 创建控制器方法(controller.HelloController.java)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.boot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,SpringBoot 2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(7) 运行程序，显示结果</p><img src="/2022/01/17/SpringBoot%E7%AC%94%E8%AE%B0-1/image-20220117193650666.png" class="" title="image-20220117193650666"><p>#配置端口号</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure><p>#配置部署(打包成jar包)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-SpringBoot自动配置原理"><a href="#2-SpringBoot自动配置原理" class="headerlink" title="2 SpringBoot自动配置原理"></a>2 SpringBoot自动配置原理</h3><h4 id="2-1-依赖管理"><a href="#2-1-依赖管理" class="headerlink" title="2.1 依赖管理"></a>2.1 依赖管理</h4><p>父项目做依赖管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖管理--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--他的父项目--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>spring-boot-starter-*: 只要引入starter，这个场景的所有常规需要的依赖就会自动导入。</p></li><li><p>*-spring-boot-starter: 常用于引入第三方提供的场景启动器。</p></li><li><p>不用关心版本号，自动版本仲裁</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--若需要修改版本号，可在pom.xml中添加配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-自动配置"><a href="#2-2-自动配置" class="headerlink" title="2.2 自动配置"></a>2.2 自动配置</h4><ul><li><p>自动配置Tomcat</p></li><li><p>自动配置SpringMVC</p></li><li><p>自动配置Web常见功能</p></li><li><p>默认包结构</p><ul><li>主程序所在包及其下面子包的所有组件，都会被默认扫描进来。</li><li>也可以自定义扫描路径 @SpringBootApplication(scanBasePackages=<strong>“com.xxxx”</strong>)</li></ul></li><li><p>各种配置都有默认值</p><ul><li>默认配置最终都会映射到某个类上。</li><li>配置文件的值都会绑定到某个类上，<strong>这个类会在容器中创建对象</strong>。</li></ul></li><li><p>按需加载所有自动配置项。</p><ul><li>引入某种场景，某种场景的自动配置才会开启。</li><li>SpringBoot所有的自动配置功能都在 <strong>spring-boot-autoconfigure</strong> 包里面</li></ul></li></ul>]]></content>
    
    
    <summary type="html">SpringBoot：搭建环境、自动配置原理。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/21】Java_Maven项目搭建(IDEA版本)</title>
    <link href="http://example.com/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-01-06T05:30:16.985Z</published>
    <updated>2021-12-22T03:34:56.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Maven项目搭建-IDEA版本"><a href="#Java-Maven项目搭建-IDEA版本" class="headerlink" title="Java_Maven项目搭建(IDEA版本)"></a>Java_Maven项目搭建(IDEA版本)</h2><p>参考：</p><p>(1) <a href="https://www.cnblogs.com/zzvar/articles/14596785.html">Idea中创建maven项目</a></p><p>(2) <a href="https://blog.csdn.net/zzvar/article/details/114896761">Idea中配置Tomcat以及运行maven项目</a></p><hr><h3 id="一、安装Maven"><a href="#一、安装Maven" class="headerlink" title="一、安装Maven"></a>一、安装Maven</h3><p>(1) 第一步，<strong>去官网下载Maven</strong>。</p><p>官网地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>下载后解压，结果如下：</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095391653.png" class="" width="1640095391653"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095405307.png" class="" width="1640095405307"><p><br>(2) 第二步，<strong>配置环境变量</strong>。</p><p>① 新建一个环境变量，命名为 <font color=red> <strong>MAVEN_HOME</strong> </font>。变量值为你 <strong>安装Maven的路径地址</strong>。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095620453.png" class="" width="1640095620453"><p>② 在Path中增加一个变量： <strong>%MAVEN_HOME%\bin</strong></p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095723521.png" class="" width="1640095723521"><p><br>(3) 第三步，<strong>验证Maven环境是否搭建成功</strong>。</p><p>在提示命令行中输入： <strong>mvn -v</strong></p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095864016.png" class="" width="1640095864016"><p><font color=green>出现以上结果，说明配置完成。</font></p><br><p>(4) 第四步，<strong>配置setting文件</strong>。</p><p>① 打开Maven安装目录下的 <strong>conf文件夹</strong> ，找到 <strong>settings.xml</strong> 文件，用记事本或是Notepad++打开。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095989501.png" class="" width="1640095989501"><p>② 找到<code>&lt;locakRepository&gt;</code>,中间值修改为你的仓库路径(可以直接新建一个 <strong>RepMaven文件夹</strong> )。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096119211.png" class="" width="1640096119211"><p>③ 保存，关闭。</p><hr><h3 id="二、在IDEA中配置Maven环境"><a href="#二、在IDEA中配置Maven环境" class="headerlink" title="二、在IDEA中配置Maven环境"></a>二、在IDEA中配置Maven环境</h3><p><strong>1.IDEA中Maven的设置</strong></p><p>(1) 打开IDEA，File —&gt; Settings</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096395564.png" class="" width="1640096395564"><p>(2) 修改配置如下：</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096511008.png" class="" width="1640096511008"><br><p><strong>2.新建一个Maven项目</strong></p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096652252.png" class="" width="1640096652252"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096770516.png" class="" width="1640096770516"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142250691.png" class="" width="1640142250691"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142492777.png" class="" width="1640142492777"><p>添加配置 <code>DarchetypeCatalog=internal</code> ，添加原因：每次创建maven项目时， IDEA 要使用插件进行创建，这些插件当你创建新的项目时，它每次都会去中央仓库下载，这样使得创建比较慢。所以在创建maven项目时，应该让它找本地仓库中的插件进行项目的创建。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142533137.png" class="" width="1640142533137"><br><p><strong>3.完善maven-web项目模板</strong></p><p>(1) 第一次加载项目比较慢，等待加载即可。</p><p>(2) 在项目下按下图操作 <strong>创建文件夹</strong> 。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142970380.png" class="" width="1640142970380"><p>(3) 右键项目，点击选择 <strong>Open Module Settings</strong> 打开项目配置页面更改 。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143149194.png" class="" width="1640143149194"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143241733.png" class="" width="1640143241733"><hr><h3 id="三、Idea中配置Tomcat以及运行maven项目"><a href="#三、Idea中配置Tomcat以及运行maven项目" class="headerlink" title="三、Idea中配置Tomcat以及运行maven项目"></a>三、Idea中配置Tomcat以及运行maven项目</h3><p>确保电脑中已经下好了tomcat，并配置完成。</p><p>(1) 打开Run —&gt; Edit Configurations</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143834321.png" class="" width="1640143834321"><p>(2) 按如下图，添加 <strong>Tomcat Server</strong> 。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143942030.png" class="" width="1640143942030"><p>(3) 添加完成。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143978016.png" class="" width="1640143978016"><p>(4) 启动Tomcat服务。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640144017454.png" class="" width="1640144017454"><p>(5) 运行成功。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640144057769.png" class="" width="1640144057769"><p><font color=red><strong>至此，整个流程结束。</strong></font></p><hr>]]></content>
    
    
    <summary type="html">Java中使用IDEA创建一个Maven项目。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】9_Java_包装类</title>
    <link href="http://example.com/2022/01/06/9_%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://example.com/2022/01/06/9_%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2022-01-06T05:30:16.790Z</published>
    <updated>2021-12-17T14:05:40.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>基本数据类型,使用起来非常方便,但是没有对应的方法来操作这些基本类型的数据。</p><p>可以使用一个类,把基本类型的数据装起来,在类中定义一些方法,这个类叫做包装类。</p><p>我们可以使用类中的方法来操作这些基本类型的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 装箱：把基本类型的数据，包装到包装类中（基本数据类型-&gt;包装类）</span></span><br><span class="line"><span class="comment">* 构造方法：</span></span><br><span class="line"><span class="comment">*   Integer(int value) 构造一个新的Integer对象，代表指定的int值。</span></span><br><span class="line"><span class="comment">*   Integer(String s) 构造一个新分配的Integer对象，表示String参数所指示的int值。</span></span><br><span class="line"><span class="comment">*   传递的字符串必须是基本类型的字符串，否则会抛出异常。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">Integer in1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(in1);</span><br><span class="line"></span><br><span class="line">Integer in2 = <span class="keyword">new</span> Integer(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(in2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 拆箱：在包装类中取出基本类型的数据。（包装类-&gt;基本类型的数据）</span></span><br><span class="line"><span class="comment">* 成员方法：</span></span><br><span class="line"><span class="comment">*   int intValue()以int类型返回该Integer的值。</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h4 id="基本类型与字符串类型的相互转换"><a href="#基本类型与字符串类型的相互转换" class="headerlink" title="基本类型与字符串类型的相互转换"></a>基本类型与字符串类型的相互转换</h4><p><strong>(1) 基本类型到字符串类型</strong></p><ol><li>基本类型的值+“ ” 【最简单的方法】。</li><li>包装类的静态方法toString(参数)，不是Object中的toString()重载。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 返回一个表示指定整数的String对象。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>String类的静态方法valueOf(参数)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 返回int参数的字符串表示形式。</span></span><br></pre></td></tr></table></figure><p><strong>(2) 字符串到基本类型</strong></p><p>使用包装类的静态方法parseXXX(“字符串”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Integer类</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s)</span></span>;</span><br><span class="line"><span class="comment">// Double类</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">parseDouble</span><span class="params">(String s)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中包装类的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】8_Java_StringBuilder类</title>
    <link href="http://example.com/2022/01/06/8_StringBuilder/"/>
    <id>http://example.com/2022/01/06/8_StringBuilder/</id>
    <published>2022-01-06T05:30:16.786Z</published>
    <updated>2021-12-17T14:03:28.800Z</updated>
    
    <content type="html"><![CDATA[<h3 id="StringBuilder类【字符串缓冲区】"><a href="#StringBuilder类【字符串缓冲区】" class="headerlink" title="StringBuilder类【字符串缓冲区】"></a>StringBuilder类【字符串缓冲区】</h3><p>可以解决字符串拼接问题。</p><h4 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h4><ol><li>字符串是常量，被定义后不能被改变。</li><li>字符串的底层是一个被final修饰的数组，不能改变，是一个常量。</li></ol><p>使用String进行字符串的相加，内存会有多个字符串，占用空间较多，效率低下。</p><h4 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h4><ol><li><p>是一个字符串缓冲区，提高字符串操作的效率。</p></li><li><p>底层是一个数组，但是<font color=red>没有被final修饰</font>，可以改变。</p></li><li><p>在内存中始终是一个数组，占用空间少，效率高。超出了StringBuilder的容量，会自动扩容。</p></li></ol><p><strong>1 构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 构造一个不带字符的字符串生成器，其容量为16个字符。</span></span><br><span class="line">StringBuilder bu1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">// 2 构造一个字符串生成器，并初始化为指定的字符串内容。</span></span><br><span class="line">StringBuilder(String str);</span><br></pre></td></tr></table></figure><p><strong>2 成员方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 添加任意类型数据的字符串形式，并返回当前对象自身。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(...)</span></span>;</span><br><span class="line"><span class="comment">// 2 将当前的StringBuilder对象转换为String对象。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中StringBuilder的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】7_Java_System类</title>
    <link href="http://example.com/2022/01/06/7_System%E7%B1%BB/"/>
    <id>http://example.com/2022/01/06/7_System%E7%B1%BB/</id>
    <published>2022-01-06T05:30:16.771Z</published>
    <updated>2021-12-17T14:01:36.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.System;</span><br></pre></td></tr></table></figure><p>提供了大量得静态方法，可以获取与系统相关的信息或者系统级操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 将数组中指定的数据拷贝到另外一个数组中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">src-源数组</span></span><br><span class="line"><span class="comment"> srcPos - 源数组中的起始位置（索引）</span></span><br><span class="line"><span class="comment"> dest - 目标数组</span></span><br><span class="line"><span class="comment"> destPos - 目标数组的起始位置</span></span><br><span class="line"><span class="comment"> length - 复制的数据元素的数量</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中System类的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】6_Java_日期与时间的类</title>
    <link href="http://example.com/2022/01/06/6_%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E7%B1%BB/"/>
    <id>http://example.com/2022/01/06/6_%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E7%B1%BB/</id>
    <published>2022-01-06T05:30:16.753Z</published>
    <updated>2021-12-17T13:59:01.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="日期和时间类"><a href="#日期和时间类" class="headerlink" title="日期和时间类"></a>日期和时间类</h3><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date; <span class="comment">// 表示日期和时间的类</span></span><br><span class="line"><span class="comment">// 精确到毫秒，可以对时间和日期进行计算。</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date(); <span class="comment">// 获取当前系统的时间</span></span><br></pre></td></tr></table></figure><h4 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h4><p>格式化：日期-&gt;文本；解析：文本-》日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">format</span><span class="params">(Date date)</span></span>;  <span class="comment">// 日期转文本</span></span><br><span class="line"><span class="function">Date <span class="title">parse</span><span class="params">(String source)</span></span>; <span class="comment">// 文本解析成日期</span></span><br></pre></td></tr></table></figure><p>使用DateFormat类中的方法format，把日期格式转化为文本。</p><p>使用步骤:</p><ol><li>创建SimpleDateFormat对象，构造方法中传递指定的模式。</li><li>调用SimpleDateFormat对象中的format，按照构造方法中指定的模式，把Date日期格式化为符合模式的字符串（文本）。</li></ol><h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="comment">// 是一个抽象类，提供了一些操作日历字段的方法。</span></span><br><span class="line"><span class="comment">// Calendar类无法直接创建对象使用，里面有一个静态的方法getInstance()获取Calendar对象。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中与日期时间相关的操作类。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/28】5_Java_接口与多态</title>
    <link href="http://example.com/2022/01/06/5_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <id>http://example.com/2022/01/06/5_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81/</id>
    <published>2022-01-06T05:30:16.740Z</published>
    <updated>2021-12-17T14:02:12.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h3><p>一种公共的规范标准。</p><p>一种引用数据类型。最重要的内容就是：抽象方法。</p><h4 id="定义一个接口："><a href="#定义一个接口：" class="headerlink" title="定义一个接口："></a>定义一个接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// 接口内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译生成的字节码文件 .java-&gt;.class</span></span><br></pre></td></tr></table></figure><h4 id="接口中定义抽象方法："><a href="#接口中定义抽象方法：" class="headerlink" title="接口中定义抽象方法："></a>接口中定义抽象方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名称(参数列表);</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceAbstract</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>接口中的抽象方法，修饰符是两个固定的关键字:public abstract</li><li>两个关键字修饰符可以省略。</li><li>方法的三要素可以随意定义。</li></ol><h4 id="接口的使用："><a href="#接口的使用：" class="headerlink" title="接口的使用："></a>接口的使用：</h4><ol><li>接口不能直接使用，需要有一个”实现类“来”实现”该接口。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类名称 <span class="keyword">implements</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>接口的实现必须覆盖重写(实现)接口中的<strong>所有的抽象方法</strong>。</li></ol><p>实现：去掉abstract关键字，加上方法体大括号。</p><ol start="3"><li>创建实现类的对象，进行使用。</li></ol><p><strong>注意事项</strong>：</p><p>如果实现类没有覆盖重写接口中的所有抽象方法，那么这个实现类自己就必须是抽象类。</p><h4 id="接口的默认方法："><a href="#接口的默认方法：" class="headerlink" title="接口的默认方法："></a>接口的默认方法：</h4><p>接口的默认方法，用来解决接口升级的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>接口的默认方法，可以通过接口实现类对象，直接调用。</li><li>接口的默认方法，也可以被接口实现类进行覆盖重写。</li></ol><h4 id="接口的静态方法"><a href="#接口的静态方法" class="headerlink" title="接口的静态方法"></a>接口的静态方法</h4><p>从Java 8开始，接口当中允许定义静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line"><span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：不能通过接口实现类的对象来调用接口当中的静态方法。</p><p><strong>正确用法</strong>：通过接口名称，直接调用其中的静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        MyInterfaceStaticImpl impl = <span class="keyword">new</span> MyInterfaceStaticImpl();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 错误写法</span></span><br><span class="line">        impl.methodStatic();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 正确写法</span></span><br><span class="line">        MyInterfaceStatic.methodStatic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的成员变量"><a href="#接口的成员变量" class="headerlink" title="接口的成员变量"></a>接口的成员变量</h4><p>接口中也是可以定义”成员变量“，但是必须使用public static final 三个关键字进行修饰。</p><p>从效果上来看，就是接口的【常量】。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 数据类型 常量名称 = 数据值；</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>一旦使用final关键词进行修饰，说明不可改变。</li><li>接口中的常量，可以省略public static final.</li><li>接口中的常量，必须赋值，不能不赋值。</li><li>接口中常量的名称，使用完全大写的字母，并且用下划线进行分隔。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceConst</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一旦赋值，不可改变</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_OF_MY_CLASS = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用接口的注意事项"><a href="#使用接口的注意事项" class="headerlink" title="使用接口的注意事项"></a>使用接口的注意事项</h4><ol><li><p>接口没有静态代码块和构造方法。</p></li><li><p>一个类的直接父类是唯一的，一个类可以同时实现多个接口。</p></li><li><p>如果实现类所实现的多个接口当中，存在<strong>重复的抽象方法</strong>，那么只需要覆盖重写一次即可。</p></li><li><p>如果实现类没有覆盖重写接口中的所有抽象方法，那么这个实现类自己就必须是抽象类。</p></li><li><p>如果实现类实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</p></li><li><p>一个类如果直接父类中的方法和接口中的默认方法产生了冲突，优先用父类中的方法。【继承优先级高于接口】</p></li></ol><h4 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h4><ol><li>类与类之间是单继承的，直接父类只有一个。</li><li>类与接口之间是多实现的，一个类可以实现多个接口。</li><li>接口与接口之间是多继承的。</li></ol><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>extends继承或者implements实现，是多态性的前提。</p><p>代码中体现多态性：<strong>父类引用指向子类对象。</strong></p><h4 id="访问成员变量的方法："><a href="#访问成员变量的方法：" class="headerlink" title="访问成员变量的方法："></a>访问成员变量的方法：</h4><ol><li>直接通过对象名称访问成员变量：等号左边是谁，优先用谁，没有则向上找。</li><li>间接通过成员方法访问成员变量：方法属于谁，优先用谁，没有则向上找。</li></ol><h4 id="多态中成员方法的使用："><a href="#多态中成员方法的使用：" class="headerlink" title="多态中成员方法的使用："></a>多态中成员方法的使用：</h4><ol><li>看new的是谁，优先用谁，没有就向上找。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MultiMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu obj = <span class="keyword">new</span> Zi(); <span class="comment">// 多态</span></span><br><span class="line">        </span><br><span class="line">        obj.method(); <span class="comment">// 父子都有，优先用子</span></span><br><span class="line">        obj.method(); <span class="comment">// 子类没有，父类有，向上找到父类</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// *编译看左边，运行看右边。*</span></span><br><span class="line">        <span class="comment">// 编译看左边，左边是父类，没有methondZi方法，所以编译报错。</span></span><br><span class="line">        obj.methodZi(); <span class="comment">// 错误！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>成员变量：编译看左边，运行也看左边。</p><p>成员方法：编译看左边，运行看右边。</p><hr><h3 id="对象的转型"><a href="#对象的转型" class="headerlink" title="对象的转型"></a>对象的转型</h3><ol><li>对象的向上转型，就是 <strong>多态</strong> 写法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类名称 对象名 = <span class="keyword">new</span> 子类名称();</span><br></pre></td></tr></table></figure><p>含义：右侧创建一个子类对象，把它当作父类看待。</p><p>注意事项： 向上转型一定是安全的。从小范围转到大范围。</p><ol start="2"><li>对象的向下转型，是一个 <strong>还原</strong> 动作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类名称 对象名 = (子类名称) 父类对象;</span><br></pre></td></tr></table></figure><p>含义：将父类对象还原成原来的子类对象。</p><p>注意事项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Cat(); <span class="comment">// 本来就是猫，向上转型成动物。</span></span><br><span class="line">Cat cat = (Cat) animal; <span class="comment">// 本来就是猫，被当作动物了，现在进行还原。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// 1. 必须保证对象本来创建的时候就是猫，才能向下转型成猫。</span></span><br><span class="line"><span class="comment">// 2. 如果对象创建的时候不是猫，现在非要向下转型成为猫，就会报错。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>判断父类引用对象，本来是什么子类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">对象 <span class="keyword">instanceof</span> 类名称;</span><br><span class="line"><span class="comment">// 得到的结果是一个boolean值</span></span><br><span class="line"><span class="comment">// 判断前面的对象能不能当作后面的实例。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断这个对象是否是Dog</span></span><br><span class="line"><span class="keyword">if</span> ( animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">    Dog dog = (Dog) animal;</span><br><span class="line">    <span class="comment">// 调用dog方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>代表不可改变的。</p><p>常见用法：</p><ol><li><p>修饰类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代表这个类不能有任何的子类。</span></span><br></pre></td></tr></table></figure><p>注意：如果一个类是final的，其中所有的成员方法都无法进行覆盖重写。</p></li><li><p>修饰方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// final关键字修饰一个方法的时候，这个方法就是最终的方法，不能被覆盖重写。</span></span><br></pre></td></tr></table></figure><p>注意：对于类、方法来说，abstract关键字和final关键字不能同时使用，因为矛盾。</p></li><li><p>修饰局部变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一旦使用final用来修饰局部变量，那么这个变量就不能进行更改。</span></span><br><span class="line"><span class="comment">// “一次赋值，终生不变。”</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>对于基本类型，不可变代表变量当中的 <strong>数据</strong> 不可变。</li><li>对于引用类型，不可变代表变量中的 <strong>地址值</strong> 不可变。</li></ol></li><li><p>修饰成员变量。</p><p>如果使用final关键字修饰，那么这个变量也照样是不可变的。</p><ol><li><p>对于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值了。</p></li><li><p>对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一。</p></li><li><p>必须保证类当中所有重载的构造方法，都最终对final的成员变量进行赋值。</p></li></ol></li></ol><hr><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>一个类内部包含另一个类。</p><p><strong>分类</strong></p><ol><li><p>成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 内部类名称 </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：内用外，随意访问；外用内，需要<strong>内部类对象</strong>。</p><p><strong>使用成员内部类</strong>：</p><ol><li><p>间接使用: 在外部类的方法中，使用内部类；然后main只是调用外部类的方法。</p></li><li><p>直接使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名 = <span class="keyword">new</span> 类名称();</span><br><span class="line">外部类名称.内部类名称 对象名 = <span class="keyword">new</span> 外部类名称().new 内部类名称();</span><br></pre></td></tr></table></figure></li><li><p>内部类重名访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类名称.<span class="keyword">this</span>.外部类成员变量名</span><br></pre></td></tr></table></figure></li></ol></li><li><p>局部内部类</p><p>如果一个类定义在一个方法内部，那么就是一个局部内部类。</p><p>局部：是由当前所属的方法可以使用它，出了这个方法就不能用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称(参数列表) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>定义一个类时的权限修饰符<ol><li>外部类：public default</li><li>成员内部类：public/protected/(default)/private</li><li>局部内部类：什么都不写</li></ol></li></ol><hr><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>如果接口的实现类只需要使用唯一的一次，那么这种情况下就可以省略该类的定义，而改为使用【匿名内部类】。</p><p><strong>匿名内部类的定义格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">接口名称 对象名 = <span class="keyword">new</span> 接口名称() &#123;</span><br><span class="line">    <span class="comment">// 覆盖重写所有的抽象方法</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1.new代表创建对象的动作</span></span><br><span class="line"><span class="comment">// 2.接口名称就是匿名内部类需要实现哪个接口</span></span><br><span class="line"><span class="comment">// &#123;...&#125;才是匿名内部类的内容</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><p>匿名内部类，在【创建对象】的时候，只能使用唯一一次。如果希望多次创建对象，而且类的内容一样，就需要使用单独定义的实现类。</p></li><li><p>匿名对象，在【调用方法】的时候，只能调用唯一一次。如果希望同一个对象，调用多次方法，那么必须给对象起个名字。</p></li><li><p>匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】。</p></li></ol>]]></content>
    
    
    <summary type="html">Java接口与多态相关知识点总结。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/26】Java_API知识点</title>
    <link href="http://example.com/2022/01/06/3_API/"/>
    <id>http://example.com/2022/01/06/3_API/</id>
    <published>2022-01-06T05:30:16.719Z</published>
    <updated>2021-12-17T13:45:46.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA中常用的API"><a href="#JAVA中常用的API" class="headerlink" title="JAVA中常用的API"></a>JAVA中常用的API</h2><p>API:应用程序编程接口</p><h3 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h3><p>功能：可以实现 <strong>键盘输入</strong> 数据到程序之中。</p><ol><li><p>导包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包路径.类名称;</span><br></pre></td></tr></table></figure><p>如果需要使用的目标类，和当前类位于同一个包下，则可以省略导包语句不写。</p><p>只有java.lang包下的内容不需要导包，其他的包都需要import语句。</p></li><li><p>创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名 = <span class="keyword">new</span> 类名称();</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.成员方法名()</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><p>用来生成随机数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 创建</span></span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 使用</span></span><br><span class="line"><span class="keyword">int</span> num = r.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限定范围，左闭右开</span></span><br><span class="line">Random r2 = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> num2 = r2.nextInt(<span class="number">10</span>);  <span class="comment">// [0,10)范围内的随机数</span></span><br></pre></td></tr></table></figure><hr><h3 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h3><p>数组的长度不能发生改变。ArrayList的长度可以发生改变。</p><p>ArrayList<E> :这个E代表泛型。</p><p><strong>泛型：</strong>装在集合中的所有的元素，统一都为什么类型。</p><p>注意事项：</p><ol><li><p>泛型只能是引用类型，不能是基本类型。</p></li><li><p>ArrayList直接打印得到的是内容。如果内容为空，则得到空的中括号[]。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 向集合中添加数据，要用到add方法。</span></span><br><span class="line">list.add(<span class="string">&quot;Jack&quot;</span>);</span><br></pre></td></tr></table></figure><p>常用的方法：</p><table><thead><tr><th>方法名</th><th>效果</th></tr></thead><tbody><tr><td>add</td><td>向集合中添加元素，参数的类型同泛型一致。返回值代表是否添加成功。</td></tr><tr><td>get</td><td>从集合中获取元素，参数是索引编号，返回值是对应位置的元素。</td></tr><tr><td>remove</td><td>从集合中删除元素，参数是索引编号，返回值是被删除的元素。</td></tr><tr><td>size</td><td>获取集合的尺寸长度，返回值是集合中包含的元素个数。</td></tr></tbody></table><p> 如果想要向集合ArrayList中<strong>存储基本类型数据</strong>，必须使用基本类型对应的<strong>包装类</strong>。</p><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer【特殊】</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character【特殊】</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><hr><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><p>字符串类。程序中的所有的双引号字符串，都是String类的对象。</p><p>特点：</p><ol><li>字符串是常量，字符串的内容永不可变。【重点】</li><li>字符串可以共享使用。</li><li>字符串底层原理是byte[]字节数组。效果上相当于char[]字符数组。</li></ol><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 使用空参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 根据字符数组创建字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] array)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 根据字节数组创建字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] array)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 直接创建</span></span><br><span class="line">String str = <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><p>直接写上双引号，就是字符串。</p><p><strong>字符串常量池</strong></p><p>程序当中直接写上的双引号字符串，就在字符串常量池之中。</p><ol><li><p>对于基本类型，==是【数值】的比较。</p></li><li><p>对于引用类型，==是【地址值】的比较。</p></li></ol><p>对于new出的是字符串对象，不在字符串常量池中。 </p><p><strong>字符串比较</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// public boolean equals(Object obj)</span></span><br><span class="line"><span class="comment">// 参数可以是任何对象，只有参数是一个字符串并且内容相同才会给true，否则都是false.</span></span><br><span class="line"><span class="comment">// 注意：如果比较双方一个常量一个变量，推荐把常量字符串写在前面。</span></span><br><span class="line">str1.equals(str2);</span><br></pre></td></tr></table></figure><p><strong>字符串获取</strong></p><p><strong>字符串截取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 截取从参数位置一直到字符串末尾，返回新字符串。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 截取从begin开始，一直到end结束，中间的字符串。[begin,end)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>字符串转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 public char[] toCharArray():将当前字符串拆分成字符数组作为返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 public byte[] getBytes():获得当前字符串底层的字节数组。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 public String replace(CharSequence oldString, CharSequence newString):将所有出现的老字符串替换成新的字符串，返回替换之后的结果新字符串。</span></span><br></pre></td></tr></table></figure><p><strong>字符串切割</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照参数的规则，将字符串切成若干部分。</span></span><br><span class="line"><span class="keyword">public</span> String[] split(String regex)</span><br></pre></td></tr></table></figure><hr><h3 id="static关键词"><a href="#static关键词" class="headerlink" title="static关键词"></a>static关键词</h3><p>使用static关键词，<strong>内容不再属于对象自己，而是属于类的</strong>。</p><p>凡是本类的对象，都共享同一份。 </p><p>如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。</p><p>如果有了static关键字，那么不需要创建对象，直接通过类名称使用它。</p><p>无论是成员变量，还是成员方法。如果有了static，都推荐使用类名称进行调用。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">静态变量：类名称.静态变量</span><br><span class="line">静态方法：类名称.静态方法<span class="comment">()</span></span><br></pre></td></tr></table></figure><img src="/2022/01/06/3_API/1637810518113.png" class="" title="img"><p>根据类名称访问静态成员变量的时候，全程和对象没有关系，只和类有关系。</p><p><strong>注意事项：</strong></p><ol><li>静态不能直接访问非静态。</li><li>静态方法当中不能用this。</li></ol><hr><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><p>与数组相关的工具类，提供大量的静态方法，用来实现数组常见的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将参数数组变成字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(数组)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照默认升序对数组元素进行排序</span></span><br><span class="line"><span class="comment">// (1)如果是数字，按照从小到大。(2)如果是字符串，按照字母升序。(3)如果是自定义类型，需要有Comparable或者Comparator接口的支持。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(数组)</span></span>;</span><br></pre></td></tr></table></figure><hr><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><p>数学相关的工具类，完成与数学运算相关的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> num)</span></span>;<span class="comment">// 获取绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> num)</span></span>; <span class="comment">// 向上取整</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> num)</span></span>; <span class="comment">// 向下取整</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> num)</span></span>; <span class="comment">// 四舍五入</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录一些常用的API.</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/27】Java开发基础知识点(二)</title>
    <link href="http://example.com/2022/01/06/2_%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2022/01/06/2_%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2022-01-06T05:30:16.714Z</published>
    <updated>2021-12-17T13:35:07.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java知识点（二）"><a href="#Java知识点（二）" class="headerlink" title="Java知识点（二）"></a>Java知识点（二）</h1><p><strong>1 包装类型</strong></p><p> 基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。</p><hr><p><strong>2 缓存池：</strong></p><p>（1）new Integer(123)</p><p>每次都会<strong>新建一个对象</strong>。</p><p>（2）Integer.valueOf(123)</p><p>会<strong>使用缓存池中的对象</strong>，多次调用会取得同一个对象的引用。  </p><p>先<strong>判断值是否在缓存池中</strong>，如果在的话就直接返回缓存池的内容。</p><p> Java 8 中，Integer <strong>缓存池的大小</strong>默认为 -128~127 。</p><hr><p><strong>3  String：</strong></p><p>String被声明成<strong>final</strong>，因此它<strong>不可被继承</strong>。</p><p>内部<strong>使用char数组存储数据</strong>，该数组被声明成final，意味着value数组初始化之后就不能引用其他数组。并且String内部没有改变value数组的方法，可以保证String不可变。</p><p><strong>好处：</strong></p><p>​    (1) 可以用来缓存hash值</p><p>​        例如用String用作HashMap的key.</p><p>​    (2) String Pool</p><p>​        如果一个String对象已经被创建过了，就会从String Pool中取得引用。</p><p>​    (3)安全性</p><p>​        String经常作为参数，可以保证参数不变。</p><p>​    (4)线程安全</p><p>​        String的不变性可以在多个线程中安全地使用。</p><hr><p><strong>4 String【不可变】, StringBuffer and StringBuilder【可变】：</strong></p><p>(1)线程安全问题</p><p>String不可变【线程安全】</p><p>StringBuilder【不是线程安全的】</p><p>StringBuffer【线程安全，内部使用 <strong>synchronized</strong> 进行同步 】</p><hr><p><strong>5 String.intern()</strong></p><p> 使用 String.intern() 可以<strong>保证相同内容的字符串变量引用同一的内存对象</strong>。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用。</span></span><br><span class="line"><span class="comment">// intern() 首先把 s1 引用的对象放到 String Pool(字符串常量池)中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);           <span class="comment">// false</span></span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">System.out.println(s1.intern() == s3);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是采用 &quot;bbb&quot; 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Pool 中。</span></span><br><span class="line">String s4 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">String s5 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">System.out.println(s4 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><p><strong>6 参数传递</strong></p><p> Java 的参数是以值传递的形式传入方法中，而不是引用传递。 </p>]]></content>
    
    
    <summary type="html">包装、缓存池、Sting...</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/15】Java_SpringMVC</title>
    <link href="http://example.com/2022/01/06/2_5_SpringMVC/"/>
    <id>http://example.com/2022/01/06/2_5_SpringMVC/</id>
    <published>2022-01-06T05:30:16.702Z</published>
    <updated>2021-12-24T09:14:30.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring相关内容"><a href="#Spring相关内容" class="headerlink" title="Spring相关内容"></a>Spring相关内容</h2><hr><p>注明：本章跟随 <a href="https://www.iteye.com/category/231099">跟开涛学SpringMVC</a>进行学习，并记录。</p><hr><h3 id="1-Web开发中请求-响应模型："><a href="#1-Web开发中请求-响应模型：" class="headerlink" title="1. Web开发中请求-响应模型："></a>1. Web开发中请求-响应模型：</h3><p>Web客户端发起请求，Web服务器接收、处理并产生相应。</p><img src="/2022/01/06/2_5_SpringMVC/1639896707961.png" class="" width="1639896707961"><hr><h3 id="2-标准MVC-Model-View-Controller-模型"><a href="#2-标准MVC-Model-View-Controller-模型" class="headerlink" title="2. 标准MVC( Model-View-Controller )模型"></a>2. 标准MVC( Model-View-Controller )模型</h3><p>(1) <strong>Model( 模型 )</strong>: 数据模型，提供要展示的数据。为模型提供模型 <strong>数据查询</strong> 和 <strong>模型数据的状态更新</strong> 等功能，包括数据与业务。</p><p>JavaBean分为两类：</p><ul><li>实体类Bean: 专门存储业务数据的。如Student、User等。</li><li>业务处理Bean: 指Service或者Dao对象，专门用于处理业务逻辑和数据访问。</li></ul><p>(2) <strong>View( 视图 )</strong>: 负责对模型进行展示。<strong>工程中的html,jsp页面</strong>。【用户界面】</p><p>(3) <strong>Controller( 控制器 )</strong>: 接收用户请求，调度给模型进行处理，处理完毕将返回的模型数据传给视图，视图负责显示。<strong>工程中的Servlet</strong>。【调度员】</p><img src="/2022/01/06/2_5_SpringMVC/1639898453837.png" class="" width="1639898453837"><hr><h3 id="3-Web-MVC模型"><a href="#3-Web-MVC模型" class="headerlink" title="3. Web MVC模型"></a>3. Web MVC模型</h3><p>在Web MVC模型下，模型无法主动推数据给视图，如果用户想要视图更新，就要再发一次请求。(请求-相应模型)</p><img src="/2022/01/06/2_5_SpringMVC/1639899298840.png" class="" width="1639899298840"><h4 id="服务到工作者：Front-Controller-Application-Controller-Page-Controller-Context"><a href="#服务到工作者：Front-Controller-Application-Controller-Page-Controller-Context" class="headerlink" title=" 服务到工作者：Front Controller + Application Controller + Page Controller + Context "></a><font color=red> <strong>服务到工作者：Front Controller + Application Controller + Page Controller + Context</strong> </font></h4><p>即 <strong>前端控制器 + 应用控制器 + 页面控制器(也有称其为动作) + 上下文</strong></p><img src="/2022/01/06/2_5_SpringMVC/1639902599452.png" class="" width="1639902599452"><p><font color=red><strong>处理流程</strong></font>：</p><img src="/2022/01/06/2_5_SpringMVC/1639902666739.png" class="" width="1639902666739"><p><font color=red><strong>功能</strong></font>：</p><p><strong>(1) 前端控制器( Front Controller )</strong> </p><p>​    ① 负责为表现层提供统一访问点，避免出现重复的控制逻辑(由前端控制器统一回调相应的功能方法)。</p><p>​    ② 可以为多个请求提供共用的逻辑，将选择具体视图与具体的功能处理分离(如login中封装请求参数到模型)。</p><p><strong>(2) 应用控制器( Application Controller )</strong></p><p>​    ① 用来选择具体视图技术( 视图的管理 )。</p><p>​    ② 具体的功能处理( 页面控制器/命令对象/动作管理 )。</p><p><strong>(3) 页面控制器(  Page Controlle[Command]  )</strong></p><p>​    ① 功能处理代码。</p><p>​    ② 收集参数、封装参数到模型。</p><p>​    ③ 转调业务对象处理模型。</p><p>​    ④ 返回逻辑视图名交给前端控制器 。</p><p><strong>(4) 上下文(  Context  )</strong></p><p>有了上下文之后，可以将相关数据放置在上下文，从而与协议无关（如 Servlet API）的访问/设置模型数据，一般通过 ThreadLocal 模式实现。 </p><hr><h3 id="Spring-Web-MVC"><a href="#Spring-Web-MVC" class="headerlink" title="Spring Web MVC"></a>Spring Web MVC</h3><p>SpringMVC是Spring家族的原生产品，基于<strong>原生的Servlet</strong>，通过<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理。</p><p><strong>(1) 架构图</strong>：</p><img src="/2022/01/06/2_5_SpringMVC/1639913960343.png" class="" width="1639913960343"><p><strong>(2) 核心架构的具体执行流程</strong>：</p><ol><li><p>用户 <font color=green><strong>发送请求 —&gt; DispatcherServlet</strong> </font> : 前端控制器接收到请求后自己不处理，交给其他解析器进行处理，作为统一的访问点，进行<strong>全局流程控制</strong>。</p></li><li><p><font color=green><strong>DispatcherServlet —&gt;  HandlerMapping</strong>  </font>: HandlerMapping 将会把请求映射为<strong>HandlerExecutionChain</strong> 对象（包含一 个 Handler 处理器（页面控制器）对象、多个 HandlerInterceptor 拦截器）对象 。(<strong>用于添加新的映射策略</strong>)</p></li><li><p><font color=green><strong>DispatcherServlet —&gt;  HandlerAdapter</strong>  </font>: HandlerAdapter把处理器包装成适配器，从而支持多种类型处理器。</p></li><li><p><font color=green><strong>DispatcherServlet —&gt;  处理器功能处理方法的调用</strong>  </font>: 根据适配结果调用处理器的功能方法。返回一个<strong>ModelAndView</strong>对象。</p></li><li><p><font color=green><strong>ModelAndView的逻辑视图名 —&gt;  ViewResolver</strong>  </font>: ViewResolver把逻辑视图名解析成具体的<strong>View</strong>。(可用于更换其他视图技术)</p></li><li><p><font color=green><strong>View —&gt; 渲染</strong>  </font>: <strong>View</strong> 根据传来的 <strong>Model</strong> 模型数据进行渲染，此处的Model实际是一个 <strong>Map数据结构</strong>。</p></li><li><p><font color=green><strong>返回控制权给DispatcherServlet</strong>  </font>: 由DispatcherServlet <strong>返回响应</strong> 给用户。</p></li></ol><p><font color=red> <strong>(3) 具体的核心开发步骤：</strong> </font></p><ol start="0"><li><p>创建Maven工程。在 <code>pom.xml</code> 中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>DispatcherServlet 在 web.xml 中的部署描述，从而拦截请求到 Spring Web MVC。</p><ul><li><p>默认配置方式</p><p>此配置方式下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<code>&lt;servlet-name&gt;-servlet.xml</code> ,如以下配置所对应的SpringMVC的配置文件在WEB-INF下，文件名为<code>springMVC-servlet.xml</code> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       /所匹配的请求可以是/login或者.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">       但是不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>拓展配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ============================================================== --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- classpath对应的是类路径，.class或.java --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将前端控制器DispatcherServlet的初始化时间提前到服务器启动时 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ============================================================== --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>   <strong>对 main/resources/springMVC.xml 进行配置。</strong></p><ul><li><p>添加扫描组件</p></li><li><p>配置Thymeleaf视图解析器</p><p>springboot推荐的页面模板是Thymeleaf。<strong>前后端不分离</strong>的情况下，springboot推荐用html做页面，用Thymeleaf做模板渲染，做数据渲染。(相当于jsp)；<strong>前后端分离</strong>的情况下，前端用vue、react等做渲染页面，前后端采用restful json通信。[<a href="https://blog.csdn.net/velanjun/article/details/112475154">参考</a>]</p></li></ul>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.fanpeng.mvc.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置视图解析器的优先级 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   在 <code>HelloController.java</code> 中添加<strong>请求映射的注解</strong>。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.mvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fanpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/22 - 16:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过注解+组件的方式</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123; <span class="comment">// 控制器</span></span><br><span class="line">    <span class="comment">// “/”--&gt;WEB-INF/templates/index.html</span></span><br><span class="line">    <span class="comment">// 添加请求映射的注解</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   在 <code>main/webapp/WEB-INF</code>下创建 <code>templates</code> 文件夹，并创建HTML5文件，命名为 <code>index.html</code></p>   <img src="/2022/01/06/2_5_SpringMVC/1640183063610.png" class="" width="1640183063610"><p>   打开Tomcat服务器，验证是否搭建成功。</p>   <img src="/2022/01/06/2_5_SpringMVC/1640183085573.png" class="" width="1640183085573"><p>   <strong>小结：</strong></p><p>​        浏览器发送请求，如果请求地址符合前端控制器的url-pattern，该请求会被<strong>前端控制器DispatcherServlet</strong>处理。</p><p>​        前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中 <strong>@RequestMapping 注解的value属性值</strong>进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。</p><p>​        处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上<strong>前缀和后缀</strong>组成视图的路径，<strong>通过Thymeleaf对视图进行渲染</strong>，最终转发给视图所对应页面。</p><ol start="2"><li><p>HandlerMapping 的配置，从而将请求映射到处理器。</p></li><li><p>HandlerAdapter 的配置，从而支持多种类型的处理器。</p></li><li><p>ViewResolver 的配置，从而将逻辑视图名解析为具体视图技术。 </p></li><li><p>处理器（页面控制器）的配置，从而进行功能处理。</p></li></ol><hr><h3 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h3><p><strong>如果没有Spring框架，我们需要自己创建User/Dao/Service等。</strong> </p><p><strong>有了Spring框架，可以将原有Bean的创建工作转给框架, 需要用时从Bean的容器中获取即可，这样便简化了开发工作。</strong></p><p> 由用户管理Bean转变为框架管理Bean，这个就叫<strong>控制反转 - Inversion of Control (IoC)</strong> </p><p><font color=red><strong>引入的一些问题：</strong></font></p><ol><li>Spring框架托管创建的Bean放在<font color=red><strong>IoC Container</strong></font>中。</li><li>Spring引入不同方式(包括<font color=red> <strong>xml配置，Java配置，注解配置</strong> </font>)来配置Bean，为了能让用户更好配置Bean。</li><li>Spring框架负责Bean的生成，同时也负责管理整个Bean的生命周期。</li><li>应用程序从IoC Container中获取依赖的Bean, 注入到应用程序中, 这个过程叫<font color=red> <strong>依赖注入(Dependency Injection，DI)。</strong> </font> 控制反转是通过依赖注入实现的，其实它们是同一个概念的不同角度描述。 <strong>IoC是设计思想，DI是实现方式</strong> 。</li><li>依赖注入使用<font color=red><strong>构造器方式</strong></font>(包括 @Autowired, @Resource, @Qualifier… )。</li></ol><br><h3 id="理解IoC"><a href="#理解IoC" class="headerlink" title="理解IoC"></a>理解IoC</h3><h4 id="1-Spring-Bean是什么？"><a href="#1-Spring-Bean是什么？" class="headerlink" title="(1) Spring Bean是什么？"></a>(1) Spring Bean是什么？</h4><p>Spring Bean类似于定义的一个组件，这个组件的作用是实现某个功能。使用Bean是<strong>使用一种更为简便的方法来调用这个组件实现功能</strong>。</p><br><h4 id="2-IoC是什么？"><a href="#2-IoC是什么？" class="headerlink" title="(2) IoC是什么？"></a>(2) IoC是什么？</h4><p>一种设计思想。IoC意味着<strong>将设计好的对象交给容器控制</strong>，而不是传统的在对象内部直接控制。</p><p>IoC/DI思想中，应用程序变成被动的，被动等待IoC容器来创建并注入它所需要的资源。即<strong>由IoC容器帮对象找到相应的依赖对象并注入，而不是对象主动去找</strong>。</p><br><h4 id="3-IoC和DI的关系？"><a href="#3-IoC和DI的关系？" class="headerlink" title="(3) IoC和DI的关系？"></a>(3) IoC和DI的关系？</h4><p> <strong>“ IoC是设计思想，DI是实现方式 ”</strong> 。</p><p> <strong>DI—Dependency Injection，即依赖注入：</strong></p><p>容器动态的将某个依赖关系注入到组件之中，依赖注入的目的并非为软件系统带来更多的功能，而是为了提升组件重用的频率，为系统搭建一个可扩展的平台。</p><p> 通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。 </p><p><font color=red>依赖：</font> 应用程序依赖IoC容器。需要IoC容器提供对象需要的外部资源。</p><p><font color=red>注入：</font> IoC容器注入应用程序中的某个对象所需要的外部资源(对象、资源、常量数据等)。</p><hr><h3 id="IoC-配置"><a href="#IoC-配置" class="headerlink" title="IoC 配置"></a>IoC 配置</h3><p>xml配置、Java配置、注解配置。【主流方式：<font color=red><strong>注解 + Java配置</strong></font>】</p><p><strong>(1) xml配置</strong></p><p>将bean的信息配置.xml文件中，通过Spring加载文件为我们创建bean。</p><br><p><strong>(2) Java配置</strong></p><p>将类的创建交给配置的JavcConfig类完成，Spring只负责维护和管理，使用纯Java的方式。</p><p>本质就是将XML上的配置声明转移到Java配置中去。</p><br><p><strong>(3) 注解配置</strong></p><p>通过在类上加注解的方式，声明一个类交给Spring管理。Spring会自动扫描带注解( @Component，@Controller，@Service，@Repository )的类，并创建和管理。</p><hr><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>主要有三种方式：<strong>构造方法注入(Construct注入)、setter注入、基于注解的注入(接口注入)</strong></p><hr><h3 id="AOP-面向切面"><a href="#AOP-面向切面" class="headerlink" title="AOP 面向切面"></a>AOP 面向切面</h3><p> <strong>给Service所有方法调用添加日志</strong>（调用方法时)， 本质上是<strong>解耦问题</strong>； </p><p> <strong>如果没有Spring框架，我们需要在每个service的方法中都添加记录日志的方法</strong> 。</p><p> <strong>有了Spring框架，通过@Aspect注解 定义了切面，这个切面中定义了拦截所有service中的方法，并记录日志；</strong> </p><p> 框架将日志记录和业务需求的代码解耦了，不再是侵入式的了。 </p><p>Spring 框架通过定义切面, 通过拦截切点实现了不同业务模块的解耦。这就是 <strong>面向切面编程(AOP)</strong> 。</p><p><font color=red><strong>AOP的理念：将分散在各个业务逻辑代码中相同的代码通过横向切割的方式抽取到一个独立的模块中。</strong></font>【<strong>横向</strong>】</p><img src="/2022/01/06/2_5_SpringMVC/1639969412092.png" class="" width="1639969412092"><p>相对应的是：<strong>OOP(面向对象编程)</strong> ，即针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰的逻辑单元划分。【<strong>纵向</strong>】</p>]]></content>
    
    
    <summary type="html">Java中Spring相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
</feed>
