<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Annoy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-05T13:37:23.600Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Annoy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【22/01/05】Mybatis笔记</title>
    <link href="http://example.com/2022/01/05/Mybatis%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/01/05/Mybatis%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-05T09:12:21.000Z</published>
    <updated>2022-01-05T13:37:23.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis？"><a href="#1-1、什么是Mybatis？" class="headerlink" title="1.1、什么是Mybatis？"></a>1.1、什么是Mybatis？</h3><img src="/2022/01/05/Mybatis%E7%AC%94%E8%AE%B0/1641374236573.png" class="" width="1641374236573"><ul><li>MyBatis是一款优秀的<strong>持久层框架</strong>。</li><li>支持定制化SQL、存储过程以及高级映射。</li><li>MyBatis避免了所有的JDBC代码和手动设置参数以及获取结果集。</li><li>MyBatis可以使用简单的XML或注解来配置和映射原生类型，接口和Java的POJO（Plain Old Java Objects,普通老式Java对象）为数据库中的记录。</li><li>MyBatis原名iBatis，是Apache的一个开源项目。</li></ul><p>如何获得MyBatis？</p><ul><li><p>Maven <a href="https://mvnrepository.com/search?q=Mybatis">https://mvnrepository.com/search?q=Mybatis</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Github <a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p></li><li><p>中文注释 </p></li></ul><hr><h3 id="1-2、持久层"><a href="#1-2、持久层" class="headerlink" title="1.2、持久层"></a>1.2、持久层</h3><p>数据持久化</p><ul><li>持久化就是将程序在持久状态和瞬时状态转化的过程。</li><li>内存：<strong>断电即失</strong></li><li>数据库(jdbc)、io文件持久化</li></ul><p><strong>为什么需要持久化？</strong></p><ul><li>有一些对象，不能让他丢掉。</li><li>内存成本高</li></ul><hr><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a>1.3 持久层</h3><p>Dao层，Service层，Controller层</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显</li></ul><hr><h3 id="1-4-为什么需要MyBatis"><a href="#1-4-为什么需要MyBatis" class="headerlink" title="1.4 为什么需要MyBatis?"></a>1.4 为什么需要MyBatis?</h3><ul><li>帮助程序员将数据存储到数据库中。</li><li>方便</li><li>传统的JDBC代码复杂。简化，框架，自动化。</li><li>优点：<ul><li>简单易学</li><li>灵活</li><li>sql和代码分离，提高可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射。</li><li>提供对象关系映射标签，支持对象关系组件维护。</li><li>提供xml标签，支持编写动态sql。</li></ul></li></ul><hr><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境 —》 导入Mybatis —》 编写代码 —》 测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(`id`,`name`,`pwd`) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;小王&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;小张&#x27;</span>,<span class="string">&#x27;123455&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;小赵&#x27;</span>,<span class="string">&#x27;123888&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Mybatis笔记。</summary>
    
    
    
    <category term="Mybatis" scheme="http://example.com/categories/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>【22/01/03】SpringMVC的执行流程</title>
    <link href="http://example.com/2022/01/03/SpringMVC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2022/01/03/SpringMVC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</id>
    <published>2022-01-03T03:19:40.000Z</published>
    <updated>2022-01-03T12:52:28.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h2><h3 id="1-SpringMVC常用组件"><a href="#1-SpringMVC常用组件" class="headerlink" title="1 SpringMVC常用组件"></a>1 SpringMVC常用组件</h3><p><strong>(1) DispatcherServlet</strong>【<strong>前端控制器</strong>】【<font color=blue>不需要工程师开发，由框架提供</font>】</p><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其他组件处理用户的请求。</p><p><strong>(2) HandlerMapping</strong>【<strong>处理器映射器</strong>】【<font color=blue>不需要工程师开发，由框架提供</font>】</p><p>作用：根据请求的url、method等信息查找Handler，即控制器方法。</p><p><strong>(3) Handler</strong>【<strong>处理器</strong>】【<font color=red>需要工程师开发</font>】</p><p>作用：在DispatcherServlet的控制下，Handler对具体的用户请求进行处理。</p><p><strong>(4) HandlerAdapter</strong>【<strong>处理器适配器</strong>】【<font color=blue>不需要工程师开发，由框架提供</font>】</p><p>作用：通过HandlerAdapter对处理器(控制器方法)进行执行。</p><p><strong>(5) ViewResolver</strong>【<strong>视图解析器</strong>】【<font color=blue>不需要工程师开发，由框架提供</font>】</p><p>作用：进行视图解析，得到响应的视图。如ThymeleafView、InternalResourceView、RedirectView</p><p><strong>(6) View</strong>【<strong>视图</strong>】</p><p>作用：将模型数据通过页面展示给用户。</p><hr><h3 id="2-DispatcherServlet初始化过程"><a href="#2-DispatcherServlet初始化过程" class="headerlink" title="2 DispatcherServlet初始化过程"></a>2 DispatcherServlet初始化过程</h3><p>DispatcherServlet本质上是一个Servlet，所以<strong>遵循Servlet的生命周期</strong>。宏观上是Servlet生命周期进行调度。</p><p><img src="/../../../../../Blog/source/_posts/SpringMVC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/img005.png" alt="images"></p><p><strong>① 初始化WebApplicationContext</strong></p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebApplicationContext rootContext =</span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    WebApplicationContext wac = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="keyword">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        String attrName = getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p><strong>② 创建WebApplicationContext</strong></p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    ConfigurableWebApplicationContext wac =</span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    String configLocation = getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><p><strong>③ DispatcherServlet初始化策略</strong></p><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用 <code>onRefresh(wac)</code>，此方法在DispatcherServlet中进行重写，调用了 <code>initStrategies(context)</code> 方法，初始化策略，即初始化DispatcherServlet的各个组件。</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-DispatcherServlet调用组件处理请求"><a href="#3-DispatcherServlet调用组件处理请求" class="headerlink" title="3 DispatcherServlet调用组件处理请求"></a>3 DispatcherServlet调用组件处理请求</h3><p><strong>① processRequest()</strong></p><p>FrameworkServlet重写HttpServlet中的servicr()和doXxx(),这些方法调用了processRequest(request,response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="-2"><a href="#-2" class="headerlink" title=""></a></h5><p><strong>② doService()</strong></p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            String attrName = (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.flashMapManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RequestPath requestPath = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="-3"><a href="#-3" class="headerlink" title=""></a></h5><p><strong>③ doDispatch()</strong></p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">        Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           <span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            String method = request.getMethod();</span><br><span class="line">            <span class="keyword">boolean</span> isGet = <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="-4"><a href="#-4" class="headerlink" title=""></a></h5><p><strong>④ processDispatchResult()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-SpringMVC的执行流程"><a href="#4-SpringMVC的执行流程" class="headerlink" title="4 SpringMVC的执行流程"></a>4 SpringMVC的执行流程</h3><p>(1) 用户向服务器发送请求，请求被SpringMVC前端控制器DispatcherServlet捕获。</p><p>(2) DispatcherServlet对请求URL进行解析，得到请求资源标识符(URI), 判断请求URI对应的映射：</p><p><strong>① 若不存在</strong></p><p>a) 判断是否配置了mvc:default-servlet-handler</p><p>b) 如果没有配置，则控制台报错：映射找不到，客户端展示404错误。</p><p><img src="/../../../../../Blog/source/_posts/SpringMVC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/img006.png" alt="image-20210709214911404"></p><p><img src="/../../../../../Blog/source/_posts/SpringMVC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/img007.png" alt="image-20210709214947432"></p><p>c) 如果有配置，则访问目标资源(一般为静态资源，如JS,CSS,HTML)，找不到客户端也会报404错误 </p><p><img src="/../../../../../Blog/source/_posts/SpringMVC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/img008.png" alt="image-20210709215255693"></p><p><img src="/../../../../../Blog/source/_posts/SpringMVC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/img009.png" alt="image-20210709215336097"></p><p><strong>② 若存在</strong></p><p>(3) 根据该URI，<strong>调用HandlerMapping获得该Handler配置的所有相关的对象</strong>，(包括Handler对象以及Handler对象对应的拦截器)，最后以<font color=red>HandlerExecutionChain执行链对象</font>的形式返回。</p><p>(4) DispatcherServlet根据获得的Handler，选择合适的HandlerAdapter。</p><p>(5) 如果成功获得HandlerAdapter，此时将开始执行<strong>拦截器的preHandler(…)方法</strong>。【正向】</p><p>(6) 提取Request中的模型，填充Handler入参，开始<strong>执行Handler(Controller)方法</strong>，处理请求。在填充Handler的入参过程中，根据配置，Spring会自动做以下工作：</p><p>a) <strong>HttpMessageConveter</strong>: 将请求信息(如Json、xml等数据)转换成一个对象，<strong>将对象转换成指定的响应信息</strong>。</p><p>b) <strong>数据转换</strong>：对请求信息进行数据转换。如String转换成Integer、Double等。</p><p>c) <strong>数据格式化</strong>：对请求消息进行数据格式化。将字符串转换成格式化数字或者格式化日期等。</p><p>d) <strong>数据验证</strong>：验证数据的有效性(长度、格式等)，验证结果存储到BindingResult或者Error中。</p><p>(7) Handler执行完成后，向DispatcherServlet返回一个<strong>ModelAndView对象</strong>。</p><p>(8) 此时将开始执行拦截器的 <strong>postHandle(…)方法</strong>【逆向】。</p><p>(9) 根据返回的ModelAndView(此时会判断是否存在异常：如存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个<strong>合适的ViewResolver进行视图解析</strong>，根据Model和View，渲染视图。</p><p>(10) 渲染视图完毕执行拦截器的 <strong>afterCompletion(…)方法</strong>【逆向】。</p><p>(11) 渲染结果返回给客户端。</p><hr>]]></content>
    
    
    <summary type="html">SpringMVC的执行流程梳理。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【22/01/01】注解配置SpringMVC</title>
    <link href="http://example.com/2022/01/01/%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AESpringMVC/"/>
    <id>http://example.com/2022/01/01/%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AESpringMVC/</id>
    <published>2022-01-01T11:15:09.000Z</published>
    <updated>2022-01-03T03:12:08.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注解配置SpringMVC"><a href="#注解配置SpringMVC" class="headerlink" title="注解配置SpringMVC"></a>注解配置SpringMVC</h2><p>使用 <strong>配置类和注解</strong> 代替web.xml和SpringMVC配置文件的功能。</p><h3 id="1-创建初始化类，代替web-xml"><a href="#1-创建初始化类，代替web-xml" class="headerlink" title="1 创建初始化类，代替web.xml"></a>1 创建初始化类，代替web.xml</h3><p>(1) 在Servlet3.0环境中，容器会在类路径中查找实现 <code>javax.servlet.ServletContainerInitializer</code> 接口的类，如果找到的话就用它来配置<strong>Servlet容器【Tomcat容器】</strong>。</p><p>(2) Spring提供了这个接口的实现，名为 <code>SpringServletContainerInitializer</code>，这个类反过来又会查找实现<code> WebApplicationInitializer</code> 的类并将配置的任务交给它们来完成。</p><p>(3) Spring3.2引入 <code>WebApplicationInitializer</code> 基础实现,名为<code>AbstractAnnotationConfigDispatcherServletInitializer</code> ,当我们的类扩展了<code>AbstractAnnotationConfigDispatcherServletInitializer</code> 并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><blockquote><p>WebInit.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebInit</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        CharacterEncodingFilter encodingFilter = <span class="keyword">new</span> CharacterEncodingFilter();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="keyword">true</span>);</span><br><span class="line">        HiddenHttpMethodFilter hiddenHttpMethodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Filter[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-创建SpringConfig配置类，代替Spring的配置文件"><a href="#2-创建SpringConfig配置类，代替Spring的配置文件" class="headerlink" title="2 创建SpringConfig配置类，代替Spring的配置文件"></a>2 创建SpringConfig配置类，代替Spring的配置文件</h3><blockquote><p>SpringConfig.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// SSM整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3-创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3 创建WebConfig配置类，代替SpringMVC的配置文件"></a>3 创建WebConfig配置类，代替SpringMVC的配置文件</h3><blockquote><p>WebConfig.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.fanpeng.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        FirstInterceptor firstInterceptor = <span class="keyword">new</span> FirstInterceptor();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ITemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        ServletContextTemplateResolver templateResolver = <span class="keyword">new</span> ServletContextTemplateResolver(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> </span>&#123;</span><br><span class="line">        SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> </span>&#123;</span><br><span class="line">        ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-测试功能"><a href="#4-测试功能" class="headerlink" title="4 测试功能"></a>4 测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">注解配置SpringMVC相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【22/01/01】SpringMVC异常处理器</title>
    <link href="http://example.com/2022/01/01/SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <id>http://example.com/2022/01/01/SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8/</id>
    <published>2022-01-01T07:03:13.000Z</published>
    <updated>2022-01-01T11:14:02.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC异常处理器"><a href="#SpringMVC异常处理器" class="headerlink" title="SpringMVC异常处理器"></a>SpringMVC异常处理器</h2><h3 id="1-基于配置的异常处理"><a href="#1-基于配置的异常处理" class="headerlink" title="1 基于配置的异常处理"></a>1 基于配置的异常处理</h3><p>SpringMVC提供一个处理控制器方法执行过程中出现的异常的接口： <code> HandlerExceptionResolver</code> </p><p><code> HandlerExceptionResolver</code> 接口实现的类：① <code>DefaultHandlerExceptionResolver</code> 和 ② <code>SimpleMappingExceptionResolver</code>。</p><p>SpringMVC提供了 <strong>自定义的异常处理器</strong> <code>SimpleMappingExceptionResolver</code>，使用方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.SpringMVC中配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置异常处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置将异常信息共享在请求域中的键--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.定义的测试异常的控制器方法</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testException&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.新建用于展示错误界面的html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>出错！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>出现异常<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    获取异常信息并显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;ex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-基于注解的异常处理"><a href="#2-基于注解的异常处理" class="headerlink" title="2 基于注解的异常处理"></a>2 基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.mvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fanpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/1/1 - 19:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;ArithmeticException.class, NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException_2</span><span class="params">(Exception ex, Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>,ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">SpringMVC异常处理器相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/30】SpringMVC拦截器</title>
    <link href="http://example.com/2021/12/31/SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://example.com/2021/12/31/SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2021-12-31T07:01:40.000Z</published>
    <updated>2022-01-01T06:58:13.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h2><h3 id="1-拦截器的设置"><a href="#1-拦截器的设置" class="headerlink" title="1 拦截器的设置"></a>1 拦截器的设置</h3><p>(1) SpringMVC中的拦截器<strong>用于拦截控制器方法的执行</strong>。</p><p>(2) SpringMVC中的拦截器<strong>需要实现HandlerInterceptor</strong>。</p><p>(3) SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-拦截器的三个抽象方法"><a href="#2-拦截器的三个抽象方法" class="headerlink" title="2 拦截器的三个抽象方法"></a>2 拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器中有<strong>三个抽象方法</strong>：</p><p>(1) preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>(2) postHandle：控制器方法执行之后执行postHandle()</p><p>(3) afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><hr><h3 id="3-多个拦截器的执行顺序"><a href="#3-多个拦截器的执行顺序" class="headerlink" title="3 多个拦截器的执行顺序"></a>3 多个拦截器的执行顺序</h3><p>(1) <strong>若每个拦截器的preHandle()都返回true</strong></p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的<font color=red><strong>配置文件的配置顺序</strong></font>有关:</p><p>preHandle()会按照配置的<strong>顺序</strong>执行，而postHandle()和afterComplation()会按照配置的<strong>反序</strong>执行。</p><p>(2) <strong>若某个拦截器的preHandle()返回了false</strong></p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行。</p><hr>]]></content>
    
    
    <summary type="html">SpringMVC拦截器相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/30】SpringMVC中文件上传与下载</title>
    <link href="http://example.com/2021/12/30/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
    <id>http://example.com/2021/12/30/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</id>
    <published>2021-12-30T09:15:39.000Z</published>
    <updated>2021-12-31T02:40:54.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC中文件上传与下载"><a href="#SpringMVC中文件上传与下载" class="headerlink" title="SpringMVC中文件上传与下载"></a>SpringMVC中文件上传与下载</h2><h3 id="1-文件下载"><a href="#1-文件下载" class="headerlink" title="1 文件下载"></a>1 文件下载</h3><p>使用 <code> ResponseEntity</code> 实现下载文件的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    String realPath = servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    HttpStatus statusCode = HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2 文件上传"></a>2 文件上传</h3><p>文件上传一定是一个post，并且添加属性 <code>enctype=&quot;multipart/form-data&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testUp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传文件步骤：</p><p>(1) 添加依赖(pom.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) SpringMVC.xml中添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置文件上传解析器，将上传的文件封装为MultipartFile--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 控制器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上传的文件的文件名</span></span><br><span class="line">        String fileName = photo.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 处理文件重名问题</span></span><br><span class="line">        String hzName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">        <span class="comment">// 获取服务器中photo目录的路径</span></span><br><span class="line">        ServletContext servletContext = session.getServletContext();</span><br><span class="line">        String photoPath = servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(photoPath);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// File.separator(文件名分隔符)</span></span><br><span class="line">        String finalPath = photoPath + File.separator + fileName;</span><br><span class="line">        <span class="comment">// 实现上传功能 transferTo封装的功能：先读再写</span></span><br><span class="line">        photo.transferTo(<span class="keyword">new</span> File(finalPath));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>(4) 上传成功结果</p><img src="/2021/12/30/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/1640916726005.png" class="" width="1640916726005"><hr>]]></content>
    
    
    <summary type="html">SpringMVC中文件上传与下载。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/30】HttpMessageConverter【Request和Response】</title>
    <link href="http://example.com/2021/12/30/HttpMessageConverter/"/>
    <id>http://example.com/2021/12/30/HttpMessageConverter/</id>
    <published>2021-12-30T02:09:05.000Z</published>
    <updated>2021-12-30T09:14:17.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h2><h3 id="1-RequestBody"><a href="#1-RequestBody" class="headerlink" title="1 @RequestBody"></a>1 @RequestBody</h3><p>@RequestBody可以获取请求体，需要<strong>在控制器方法中设置形参</strong>，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的<strong>形参赋值</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>requestBody:username=admin&amp;password=123456</p><hr><h3 id="2-RequestEntity"><a href="#2-RequestEntity" class="headerlink" title="2 RequestEntity"></a>2 RequestEntity</h3><p>封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过 <code>getHeaders()</code> 获取请求头信息，通过 <code>getBody()</code> 获取请求体信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-ResponseBody"><a href="#3-ResponseBody" class="headerlink" title="3 @ResponseBody"></a>3 @ResponseBody</h3><p>用于标识一个控制器方法，可以将 <strong>该方法的返回值直接作为响应报文的响应体</strong> 响应到浏览器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testResponseBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ResponseBody常用于微服务中，微服务之间进行交互就是用的Http+json。</p><hr><h3 id="4-SpringMVC处理json"><a href="#4-SpringMVC处理json" class="headerlink" title="4 SpringMVC处理json"></a>4 SpringMVC处理json</h3><p>@ResponseBody处理json的步骤</p><p>(1) 导入jackson依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) 在SpringMVC的核心配置文件中<strong>开启mvc的注解驱动</strong>。此时在HandlerAdaptor中会自动装配一个消息转换器:<strong>MappingJackson2HttpMessageConverter</strong>【可以将响应到浏览器的Java对象转换为Json格式的字符串】。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 处理器方法上使用@ResponseBody注解进行标识</p><p>(4) 将Java对象直接作为<strong>控制器方法的返回值返回</strong>，就会自动转换为Json格式的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testResponseUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器页面显示结果:</p><img src="/2021/12/30/HttpMessageConverter/1640832325792.png" class="" width="1640832325792"><hr><h3 id="5-SpringMVC处理ajax"><a href="#5-SpringMVC处理ajax" class="headerlink" title="5 SpringMVC处理ajax"></a>5 SpringMVC处理ajax</h3><p>ajax是在页面不跳转的情况下，与服务器进行交互。</p><p>(1) 请求超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) 通过vue和axios处理点击事件:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">testAjax</span>:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                axios(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>:event.target.href,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(response.data);</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">                event.preventDefault();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 控制器方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAjax</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器页面显示结果:</p><img src="/2021/12/30/HttpMessageConverter/1640843609011.png" class="" width="1640843609011"><hr><h3 id="6-ResController注解"><a href="#6-ResController注解" class="headerlink" title="6 @ResController注解"></a>6 @ResController注解</h3><p>是一个复合注解。标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解。</p><hr><h3 id="7-ResponseEntity"><a href="#7-ResponseEntity" class="headerlink" title="7 ResponseEntity"></a>7 ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><hr>]]></content>
    
    
    <summary type="html">Request和Response相关内容，SpringMVC处理json、ajax等。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/27】RESTful案例【实现用户增删改查】</title>
    <link href="http://example.com/2021/12/29/RESTful%E6%A1%88%E4%BE%8B/"/>
    <id>http://example.com/2021/12/29/RESTful%E6%A1%88%E4%BE%8B/</id>
    <published>2021-12-29T03:00:48.000Z</published>
    <updated>2021-12-29T14:29:40.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RESTful案例【实现用户增删改查】"><a href="#RESTful案例【实现用户增删改查】" class="headerlink" title="RESTful案例【实现用户增删改查】"></a>RESTful案例【实现用户增删改查】</h2><p>实现员工信息的增删改查。</p><br><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h3><ul><li><p>搭建环境</p></li><li><p>创建实体类Employee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.mvc.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fanpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/28 - 22:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//1 male, 0 female</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建DAO模拟数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fanpeng.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fanpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/28 - 22:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        employees = <span class="keyword">new</span> HashMap&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">        employees.put(<span class="number">1001</span>, <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1002</span>, <span class="keyword">new</span> Employee(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1003</span>, <span class="keyword">new</span> Employee(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1004</span>, <span class="keyword">new</span> Employee(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1005</span>, <span class="keyword">new</span> Employee(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer initId = <span class="number">1006</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Employee employee)</span></span>&#123; <span class="comment">// 添加和修改</span></span><br><span class="line">        <span class="keyword">if</span>(employee.getId() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line">        employees.put(employee.getId(), employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-功能清单"><a href="#2-功能清单" class="headerlink" title="2 功能清单"></a>2 功能清单</h3><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>/</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>/employee</td><td>GET</td></tr><tr><td>删除√</td><td>/employee/2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>/toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>/employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>/employee/2</td><td>GET</td></tr><tr><td>执行更新√</td><td>/employee</td><td>PUT</td></tr></tbody></table><hr><h3 id="3-功能1：访问首页"><a href="#3-功能1：访问首页" class="headerlink" title="3 功能1：访问首页"></a>3 功能1：访问首页</h3><ul><li><p>配置view-controller</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置视图控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建页面index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>查看员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-功能2：查询所有员工数据"><a href="#4-功能2：查询所有员工数据" class="headerlink" title="4 功能2：查询所有员工数据"></a>4 功能2：查询所有员工数据</h3><ul><li><p>控制器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllEmployee</span><span class="params">(Model model)</span></span>&#123; <span class="comment">// 1 获取所有得员工信息</span></span><br><span class="line">        Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建employee_list.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>options<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结果图：</p><img src="/2021/12/29/RESTful%E6%A1%88%E4%BE%8B/1640747666063.png" class="" width="1640747666063"></li></ul><hr><p>5 功能3</p>]]></content>
    
    
    <summary type="html">RESTful案例【实现用户增删改查】</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/27】Spring中RESTful相关内容</title>
    <link href="http://example.com/2021/12/27/Spring%E4%B8%ADRESTful%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/"/>
    <id>http://example.com/2021/12/27/Spring%E4%B8%ADRESTful%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/</id>
    <published>2021-12-27T08:24:32.000Z</published>
    <updated>2021-12-29T02:59:56.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><h3 id="1-RESTful简介"><a href="#1-RESTful简介" class="headerlink" title="1 RESTful简介"></a>1 RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述【请求路径】，来间接实现操作资源的目的。</p><hr><h3 id="2-RESTful实现"><a href="#2-RESTful实现" class="headerlink" title="2 RESTful实现"></a>2 RESTful实现</h3><p>四个操作方面的名词：<strong>GET[获取资源]、POST[新建资源]、PUT[更新资源]、DELETE[删除资源]。</strong></p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id=1</td><td>user/1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 创建控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   使用RESTful模拟用户资源的增删改查</span></span><br><span class="line"><span class="comment">    *   /user   GET 查询所有用户信息</span></span><br><span class="line"><span class="comment">    *   /user/1   GET 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment">    *   /user   POST 添加用户信息</span></span><br><span class="line"><span class="comment">    *   /user/1   DELETE 删除用户信息</span></span><br><span class="line"><span class="comment">    *   /user   PUT 修改用户信息</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询所有用户信息&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据ID查询用户信息&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加用户信息：&quot;</span> + username + <span class="string">&quot;,&quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户信息：&quot;</span>+username+<span class="string">&quot;,&quot;</span>+password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2 创建一个用于完成操作的页面 test_rest.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span>&gt;</span>查询所有用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/1&#125;&quot;</span>&gt;</span>根据id查询用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3 springMVC.xml中配置控制视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/test_view&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;test_view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/test_rest&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;test_rest&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    开启MVC注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-HiddenHttpMethodFilter"><a href="#3-HiddenHttpMethodFilter" class="headerlink" title="3 HiddenHttpMethodFilter"></a>3 HiddenHttpMethodFilter</h3><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p><font color=red>a&gt;当前请求的请求方式必须为post</font></p><p><font color=red>b&gt;当前请求必须传输请求参数_method</font></p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数<strong>_method的值才是最终的请求方式</strong>。</p><p>(1) web.xml中配置HiddenHttpMethodFilter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置HiddenHttpMethodFilter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) 控制器中声明控制器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;修改用户信息：&quot;</span>+username+<span class="string">&quot;,&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) html文件中设置form表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中RESTful的相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/26】SpringMVC的视图</title>
    <link href="http://example.com/2021/12/26/SpringMVC%E7%9A%84%E8%A7%86%E5%9B%BE/"/>
    <id>http://example.com/2021/12/26/SpringMVC%E7%9A%84%E8%A7%86%E5%9B%BE/</id>
    <published>2021-12-26T12:45:04.000Z</published>
    <updated>2021-12-27T02:01:54.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC的视图"><a href="#SpringMVC的视图" class="headerlink" title="SpringMVC的视图"></a>SpringMVC的视图</h2><p>SpringMVC中的视图是view接口，视图的作用是 <strong>渲染数据</strong> ，将模型Model中的数据展示给用户。</p><p>SpringMVC视图的种类比较多，默认有转发试图和重定向视图。</p><h3 id="1-ThymeleafView"><a href="#1-ThymeleafView" class="headerlink" title="1 ThymeleafView"></a>1 ThymeleafView</h3><p>控制器方法中设置的视图名称 <strong>没有任何前缀</strong> 时，此时视图名称就会被 <strong>SpringMVC配置文件中所配置的视图解析器</strong> 解析。</p><p>视图名称拼接 <strong>视图前缀和后缀</strong> 得到最终路径，通过转发的方式完成跳转。</p><hr><h3 id="2-转发视图"><a href="#2-转发视图" class="headerlink" title="2 转发视图"></a>2 转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>创建转发视图的情况：</p><p>(1) 控制器方法中设置的视图名称 <strong>以”forward:”为前缀</strong> 时，创建InternalResourceView视图。</p><p>(2) 此时的视图名称 <strong>不会被SpringMVC配置文件中所配置的视图解析器解析</strong>，而是将前缀”forward:”去掉，剩余部分作为最终路径通过转发实现跳转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testForward&quot;</span>; <span class="comment">// 两步走</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-重定向视图"><a href="#3-重定向视图" class="headerlink" title="3 重定向视图"></a>3 重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>(1) 当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图。</p><p>(2) 此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:/“，”redirect:/employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-视图控制器"><a href="#4-视图控制器" class="headerlink" title="4 视图控制器"></a>4 视图控制器</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><p>&lt;mvc:annotation-driven /&gt;</p></blockquote><hr>]]></content>
    
    
    <summary type="html">Java中SpringMVC的视图的相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/25】SpringMVC域对象共享参数</title>
    <link href="http://example.com/2021/12/25/SpringMVC%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2021/12/25/SpringMVC%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/</id>
    <published>2021-12-25T02:53:25.000Z</published>
    <updated>2021-12-26T09:31:52.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC域对象共享参数"><a href="#SpringMVC域对象共享参数" class="headerlink" title="SpringMVC域对象共享参数"></a>SpringMVC域对象共享参数</h2><p>将请求参数作为条件，调用service业务逻辑，service调用DAO访问数据库，将最终结果返回给service，再返回给</p><p>控制层。如果有数据需要往页面发送，则需要将这些数据在域中共享。</p><p>主要用：request和servlet</p><p><font color=red><strong>选择能实现功能，范围最小的域对象。</strong> </font></p><h3 id="1-通过servletAPI共享参数"><a href="#1-通过servletAPI共享参数" class="headerlink" title="1 通过servletAPI共享参数"></a>1 通过servletAPI共享参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestByServletAPI&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestByServletAPI</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,servletAPI&quot;</span>); <span class="comment">// 设置共享的数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;testRequestScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><img src="/2021/12/25/SpringMVC%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/1640417290106.png" class="" width="1640417290106"><hr><h3 id="2-通过ModelAndView向request域对象共享数据-【重点】"><a href="#2-通过ModelAndView向request域对象共享数据-【重点】" class="headerlink" title="2 通过ModelAndView向request域对象共享数据 【重点】"></a>2 通过<font color=red>ModelAndView</font>向request域对象共享数据 【重点】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   ModelAndView有Model和View的功能。</span></span><br><span class="line"><span class="comment">    *   (1)Model 主要用于向请求域共享数据。</span></span><br><span class="line"><span class="comment">    *   (2)View 主要用于设置视图，实现页面跳转。</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">// 处理模型数据，即向请求域request共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testModelAndView&#125;&quot;</span>&gt;</span>通过ModelAndView向request域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><img src="/2021/12/25/SpringMVC%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/1640418850139.png" class="" width="1640418850139"><hr><h3 id="3-使用Model共享数据"><a href="#3-使用Model共享数据" class="headerlink" title="3 使用Model共享数据"></a>3 使用Model共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModel</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testModel&#125;&quot;</span>&gt;</span>通过Model向request域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><img src="/2021/12/25/SpringMVC%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/1640419188516.png" class="" width="1640419188516"><hr><h3 id="4-使用Map共享数据"><a href="#4-使用Map共享数据" class="headerlink" title="4 使用Map共享数据"></a>4 使用Map共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testMap</span><span class="params">(Map&lt;String,Object&gt; map)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testMap&#125;&quot;</span>&gt;</span>通过Map向request域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><img src="/2021/12/25/SpringMVC%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/1640419609830.png" class="" width="1640419609830"><hr><h3 id="5-使用ModelMap共享数据"><a href="#5-使用ModelMap共享数据" class="headerlink" title="5 使用ModelMap共享数据"></a>5 使用ModelMap共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelMap</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>,<span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testModelMap&#125;&quot;</span>&gt;</span>通过ModelMap向request域对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果:</p><img src="/2021/12/25/SpringMVC%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/1640420053995.png" class="" width="1640420053995"><hr><h3 id="6-Model、ModelMap、Map的关系"><a href="#6-Model、ModelMap、Map的关系" class="headerlink" title="6 Model、ModelMap、Map的关系"></a>6 Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数本质上都是BindingAwareModelMap类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Model</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelMap</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendedModelMap</span> <span class="keyword">extends</span> <span class="title">ModelMap</span> <span class="keyword">implements</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingAwareModelMap</span> <span class="keyword">extends</span> <span class="title">ExtendedModelMap</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="7-通过Session向Request共享数据"><a href="#7-通过Session向Request共享数据" class="headerlink" title="7 通过Session向Request共享数据"></a>7 通过Session向Request共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSession</span><span class="params">(HttpSession session)</span> </span>&#123; <span class="comment">// 通过servletAPI访问</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;textSessionScope&quot;</span>,<span class="string">&quot;Hello,session!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testSession&#125;&quot;</span>&gt;</span>通过ServletAPI向Session对象共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.textSessionScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 获取结果</span><br></pre></td></tr></table></figure><img src="/2021/12/25/SpringMVC%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/1640508233903.png" class="" width="1640508233903"><hr><h3 id="8-向application域共享数据"><a href="#8-向application域共享数据" class="headerlink" title="8 向application域共享数据"></a>8 向application域共享数据</h3><p>获取ServletContext对象(代表整个页面的范围)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testApplication</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">    ServletContext application = session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>,<span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testApplication&#125;&quot;</span>&gt;</span>通过ServletAPI向application域共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;application.testApplicationScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2021/12/25/SpringMVC%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/1640511048683.png" class="" width="1640511048683"><hr>]]></content>
    
    
    <summary type="html">Java中SpringMVC域对象共享参数相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/24】SpringMVC获取请求参数</title>
    <link href="http://example.com/2021/12/24/SpringMVC%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    <id>http://example.com/2021/12/24/SpringMVC%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/</id>
    <published>2021-12-24T09:09:45.000Z</published>
    <updated>2021-12-25T02:54:12.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h2><h3 id="1-通过ServletAPI获取请求参数"><a href="#1-通过ServletAPI获取请求参数" class="headerlink" title="1 通过ServletAPI获取请求参数"></a>1 通过ServletAPI获取请求参数</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testServletAPI</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span> + username + <span class="string">&quot;,password:&quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-通过控制器方法的形参获取请求参数"><a href="#2-通过控制器方法的形参获取请求参数" class="headerlink" title="2 通过控制器方法的形参获取请求参数"></a>2 通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试使用控制器方法的形参获取请求参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testParam&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    兴趣：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span>b</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试使用控制器的形参获取请求参数&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(String username, String password,String[] hobby)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若请求参数中出现多个同名的请求参数，可以在控制器方法的形参位置设置字符串类型或是字符串数组接收此参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span> + username + <span class="string">&quot;,password:&quot;</span> + password + <span class="string">&quot;,hobby:&quot;</span> + Arrays.toString(hobby));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-RequestParam"><a href="#3-RequestParam" class="headerlink" title="3 @RequestParam"></a>3 @RequestParam</h3><p>@RequestParam 是将请求参数和控制器方法的形参创建映射关系。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testParam&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    兴趣：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span>b</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试使用控制器的形参获取请求参数&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value=&quot;user_name&quot;, required = false, defaultValue = &quot;hehe&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">            String password,</span></span></span><br><span class="line"><span class="params"><span class="function">            String[] hobby)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若请求参数中出现多个同名的请求参数，可以在控制器方法的形参位置设置字符串类型或是字符串数组接收此参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;user_name:&quot;</span> + username + <span class="string">&quot;,password:&quot;</span> + password + <span class="string">&quot;,hobby:&quot;</span> + Arrays.toString(hobby));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>其中的属性：</strong></p><p>(1) value: 指定为形参赋值的请求参数的参数名。</p><p>(2) required: 设置<strong>是否必须传输此请求参数</strong>，默认为true。</p><p>(3) defaultValue: 不管required属性是true还是false, value指定的请求参数没有传输时，<strong>使用默认值为形参赋值</strong>。</p><hr><h3 id="4-RequestHeader"><a href="#4-RequestHeader" class="headerlink" title="4 @RequestHeader"></a>4 @RequestHeader</h3><p>将请求头信息和控制器方法的形参建立映射关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value=&quot;user_name&quot;, required = false, defaultValue = &quot;hehe&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">            String password,</span></span></span><br><span class="line"><span class="params"><span class="function">            String[] hobby,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestHeader(&quot;Host&quot;)</span> String host)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若请求参数中出现多个同名的请求参数，可以在控制器方法的形参位置设置字符串类型或是字符串数组接收此参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;user_name:&quot;</span> + username + <span class="string">&quot;,password:&quot;</span> + password + <span class="string">&quot;,hobby:&quot;</span> + Arrays.toString(hobby));</span><br><span class="line">        System.out.println(<span class="string">&quot;Host:&quot;</span> + host);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_name:dada,password:<span class="number">123456</span>,hobby:[a, b]</span><br><span class="line">Host:localhost:<span class="number">8080</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-CookieValue"><a href="#5-CookieValue" class="headerlink" title="5 @CookieValue"></a>5 @CookieValue</h3><p>将cookie数据与控制器方法的形参创建映射关系。</p><hr><h3 id="6-使用POJO获取请求参数"><a href="#6-使用POJO获取请求参数" class="headerlink" title="6 使用POJO获取请求参数"></a>6 使用POJO获取请求参数</h3><p>在控制器方法的形参位置设置一个 <strong>实体类类型的形参</strong> ，此时若 <strong>浏览器传输的请求参数的参数名</strong> 和 <strong>实体类中的属性名</strong> 一致，那么请求参数就会为此属性赋值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testPOJO&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testPOJO&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPOJO</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>返回结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User&#123;id=null, username=&#x27;fan&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="7-获取请求参数的乱码问题"><a href="#7-获取请求参数的乱码问题" class="headerlink" title="7 获取请求参数的乱码问题"></a>7 获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的 <strong>编码过滤器CharacterEncodingFilter</strong> ，必须要在web.xml中进行注册。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringMVC中处理编码的过滤器一定要配置在其他过滤器之前，否则无效。</p><hr>]]></content>
    
    
    <summary type="html">Java中SpringMVC获取请求参数相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/24】SpringMVC_RequestMapping相关知识</title>
    <link href="http://example.com/2021/12/24/SpringMVC-RequestMapping%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2021/12/24/SpringMVC-RequestMapping%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2021-12-24T08:38:59.000Z</published>
    <updated>2021-12-24T09:14:07.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RequestMapping-相关知识"><a href="#RequestMapping-相关知识" class="headerlink" title="@RequestMapping 相关知识"></a>@RequestMapping 相关知识</h3><p><strong>@RequestMapping 注解</strong> ，该注解的作用是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p><strong>1 注解的位置：</strong></p><p>(1) 标识一个类: 设置映射请求请求路径的 <strong>初始信息</strong> 。</p><p>(2) 标识一个方法: 设置映射请求路径的 <strong>具体信息</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.mvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fanpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/23 - 20:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span> <span class="comment">// 标识一个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span>  <span class="comment">// 标识一个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通过这种方法，可以针对不同模块下的控制器，标识不同的模块。</strong></p><hr><p><strong>2 注解的value属性</strong></p><p>(1) 可以用<strong>数组</strong>，表示该请求能够映射匹配多个请求地址所对应的请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 注解的<strong>value属性必须要设置</strong>，至少通过请求地址匹配请求映射。</p><hr><p><strong>3 注解的method属性</strong></p><p>(1) RequestMapping注解的method属性通过请求的请求方式 <strong>(get或post)</strong> 匹配请求映射。</p><p>① <strong>get</strong>: 每次提出请求，请求参数就会附在请求地址后面，以?进行拼接。后面是请求参数名=请求参数值，表单元素的name = value。<font color=red>【不安全，速度快，传输数据量有限】</font></p><p>② <strong>post</strong>: 有请求体。<font color=red>【安全，速度慢，传输数据量可认为无限】</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">            value = &#123;&quot;/testRequestMapping&quot;,&quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">            method = &#123;RequestMethod.GET&#125;</span></span><br><span class="line"><span class="meta">    )</span>  <span class="comment">// 标识方法</span></span><br></pre></td></tr></table></figure><p>SpringMVC提供了@RequestMapping的 <strong>派生注解</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span> <span class="comment">// 处理get请求的映射</span></span><br><span class="line"><span class="meta">@PostMapping</span> <span class="comment">// 处理post请求的映射</span></span><br><span class="line"><span class="meta">@PutMapping</span> <span class="comment">// 处理put请求的映射</span></span><br><span class="line"><span class="meta">@DeleteMapping</span> <span class="comment">// 处理delete请求的映射</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用的请求方式 get post put delete</span></span><br><span class="line"><span class="comment">// 目前浏览器只支持get和post，若想在form表单中method设置为put或delete，按照默认的请求方式get处理。</span></span><br></pre></td></tr></table></figure><hr><p><strong>4 注解的Params属性</strong></p><p>Params中设置的条件必须同时满足。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>5 注解的headers属性</strong></p><p>@RequestMapping注解的header属性通过请求的请求头信息匹配请求映射。</p><hr><p><strong>6 @RequestMapping支持占位符表示</strong></p><p>原始方式：/deleteUser?id=1</p><p>rest方式：/deleteUser/1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在<strong>通过@PathVariable注解</strong>，将占位符所表示的数据赋值给控制器方法的形参。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中Spring相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="SpringMVC" scheme="http://example.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/21】Java_Maven项目搭建(IDEA版本)</title>
    <link href="http://example.com/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-12-21T13:54:25.716Z</published>
    <updated>2021-12-22T03:34:56.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Maven项目搭建-IDEA版本"><a href="#Java-Maven项目搭建-IDEA版本" class="headerlink" title="Java_Maven项目搭建(IDEA版本)"></a>Java_Maven项目搭建(IDEA版本)</h2><p>参考：</p><p>(1) <a href="https://www.cnblogs.com/zzvar/articles/14596785.html">Idea中创建maven项目</a></p><p>(2) <a href="https://blog.csdn.net/zzvar/article/details/114896761">Idea中配置Tomcat以及运行maven项目</a></p><hr><h3 id="一、安装Maven"><a href="#一、安装Maven" class="headerlink" title="一、安装Maven"></a>一、安装Maven</h3><p>(1) 第一步，<strong>去官网下载Maven</strong>。</p><p>官网地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>下载后解压，结果如下：</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095391653.png" class="" width="1640095391653"><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095405307.png" class="" width="1640095405307"><p><br>(2) 第二步，<strong>配置环境变量</strong>。</p><p>① 新建一个环境变量，命名为 <font color=red> <strong>MAVEN_HOME</strong> </font>。变量值为你 <strong>安装Maven的路径地址</strong>。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095620453.png" class="" width="1640095620453"><p>② 在Path中增加一个变量： <strong>%MAVEN_HOME%\bin</strong></p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095723521.png" class="" width="1640095723521"><p><br>(3) 第三步，<strong>验证Maven环境是否搭建成功</strong>。</p><p>在提示命令行中输入： <strong>mvn -v</strong></p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095864016.png" class="" width="1640095864016"><p><font color=green>出现以上结果，说明配置完成。</font></p><br><p>(4) 第四步，<strong>配置setting文件</strong>。</p><p>① 打开Maven安装目录下的 <strong>conf文件夹</strong> ，找到 <strong>settings.xml</strong> 文件，用记事本或是Notepad++打开。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095989501.png" class="" width="1640095989501"><p>② 找到<code>&lt;locakRepository&gt;</code>,中间值修改为你的仓库路径(可以直接新建一个 <strong>RepMaven文件夹</strong> )。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096119211.png" class="" width="1640096119211"><p>③ 保存，关闭。</p><hr><h3 id="二、在IDEA中配置Maven环境"><a href="#二、在IDEA中配置Maven环境" class="headerlink" title="二、在IDEA中配置Maven环境"></a>二、在IDEA中配置Maven环境</h3><p><strong>1.IDEA中Maven的设置</strong></p><p>(1) 打开IDEA，File —&gt; Settings</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096395564.png" class="" width="1640096395564"><p>(2) 修改配置如下：</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096511008.png" class="" width="1640096511008"><br><p><strong>2.新建一个Maven项目</strong></p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096652252.png" class="" width="1640096652252"><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096770516.png" class="" width="1640096770516"><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142250691.png" class="" width="1640142250691"><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142492777.png" class="" width="1640142492777"><p>添加配置 <code>DarchetypeCatalog=internal</code> ，添加原因：每次创建maven项目时， IDEA 要使用插件进行创建，这些插件当你创建新的项目时，它每次都会去中央仓库下载，这样使得创建比较慢。所以在创建maven项目时，应该让它找本地仓库中的插件进行项目的创建。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142533137.png" class="" width="1640142533137"><br><p><strong>3.完善maven-web项目模板</strong></p><p>(1) 第一次加载项目比较慢，等待加载即可。</p><p>(2) 在项目下按下图操作 <strong>创建文件夹</strong> 。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142970380.png" class="" width="1640142970380"><p>(3) 右键项目，点击选择 <strong>Open Module Settings</strong> 打开项目配置页面更改 。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143149194.png" class="" width="1640143149194"><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143241733.png" class="" width="1640143241733"><hr><h3 id="三、Idea中配置Tomcat以及运行maven项目"><a href="#三、Idea中配置Tomcat以及运行maven项目" class="headerlink" title="三、Idea中配置Tomcat以及运行maven项目"></a>三、Idea中配置Tomcat以及运行maven项目</h3><p>确保电脑中已经下好了tomcat，并配置完成。</p><p>(1) 打开Run —&gt; Edit Configurations</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143834321.png" class="" width="1640143834321"><p>(2) 按如下图，添加 <strong>Tomcat Server</strong> 。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143942030.png" class="" width="1640143942030"><p>(3) 添加完成。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143978016.png" class="" width="1640143978016"><p>(4) 启动Tomcat服务。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640144017454.png" class="" width="1640144017454"><p>(5) 运行成功。</p><img src="/2021/12/21/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640144057769.png" class="" width="1640144057769"><p><font color=red><strong>至此，整个流程结束。</strong></font></p><hr>]]></content>
    
    
    <summary type="html">Java中使用IDEA创建一个Maven项目。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/15】Java_SpringMVC</title>
    <link href="http://example.com/2021/12/19/2_5_SpringMVC/"/>
    <id>http://example.com/2021/12/19/2_5_SpringMVC/</id>
    <published>2021-12-19T06:46:42.204Z</published>
    <updated>2021-12-24T09:14:30.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring相关内容"><a href="#Spring相关内容" class="headerlink" title="Spring相关内容"></a>Spring相关内容</h2><hr><p>注明：本章跟随 <a href="https://www.iteye.com/category/231099">跟开涛学SpringMVC</a>进行学习，并记录。</p><hr><h3 id="1-Web开发中请求-响应模型："><a href="#1-Web开发中请求-响应模型：" class="headerlink" title="1. Web开发中请求-响应模型："></a>1. Web开发中请求-响应模型：</h3><p>Web客户端发起请求，Web服务器接收、处理并产生相应。</p><img src="/2021/12/19/2_5_SpringMVC/1639896707961.png" class="" width="1639896707961"><hr><h3 id="2-标准MVC-Model-View-Controller-模型"><a href="#2-标准MVC-Model-View-Controller-模型" class="headerlink" title="2. 标准MVC( Model-View-Controller )模型"></a>2. 标准MVC( Model-View-Controller )模型</h3><p>(1) <strong>Model( 模型 )</strong>: 数据模型，提供要展示的数据。为模型提供模型 <strong>数据查询</strong> 和 <strong>模型数据的状态更新</strong> 等功能，包括数据与业务。</p><p>JavaBean分为两类：</p><ul><li>实体类Bean: 专门存储业务数据的。如Student、User等。</li><li>业务处理Bean: 指Service或者Dao对象，专门用于处理业务逻辑和数据访问。</li></ul><p>(2) <strong>View( 视图 )</strong>: 负责对模型进行展示。<strong>工程中的html,jsp页面</strong>。【用户界面】</p><p>(3) <strong>Controller( 控制器 )</strong>: 接收用户请求，调度给模型进行处理，处理完毕将返回的模型数据传给视图，视图负责显示。<strong>工程中的Servlet</strong>。【调度员】</p><img src="/2021/12/19/2_5_SpringMVC/1639898453837.png" class="" width="1639898453837"><hr><h3 id="3-Web-MVC模型"><a href="#3-Web-MVC模型" class="headerlink" title="3. Web MVC模型"></a>3. Web MVC模型</h3><p>在Web MVC模型下，模型无法主动推数据给视图，如果用户想要视图更新，就要再发一次请求。(请求-相应模型)</p><img src="/2021/12/19/2_5_SpringMVC/1639899298840.png" class="" width="1639899298840"><h4 id="服务到工作者：Front-Controller-Application-Controller-Page-Controller-Context"><a href="#服务到工作者：Front-Controller-Application-Controller-Page-Controller-Context" class="headerlink" title=" 服务到工作者：Front Controller + Application Controller + Page Controller + Context "></a><font color=red> <strong>服务到工作者：Front Controller + Application Controller + Page Controller + Context</strong> </font></h4><p>即 <strong>前端控制器 + 应用控制器 + 页面控制器(也有称其为动作) + 上下文</strong></p><img src="/2021/12/19/2_5_SpringMVC/1639902599452.png" class="" width="1639902599452"><p><font color=red><strong>处理流程</strong></font>：</p><img src="/2021/12/19/2_5_SpringMVC/1639902666739.png" class="" width="1639902666739"><p><font color=red><strong>功能</strong></font>：</p><p><strong>(1) 前端控制器( Front Controller )</strong> </p><p>​    ① 负责为表现层提供统一访问点，避免出现重复的控制逻辑(由前端控制器统一回调相应的功能方法)。</p><p>​    ② 可以为多个请求提供共用的逻辑，将选择具体视图与具体的功能处理分离(如login中封装请求参数到模型)。</p><p><strong>(2) 应用控制器( Application Controller )</strong></p><p>​    ① 用来选择具体视图技术( 视图的管理 )。</p><p>​    ② 具体的功能处理( 页面控制器/命令对象/动作管理 )。</p><p><strong>(3) 页面控制器(  Page Controlle[Command]  )</strong></p><p>​    ① 功能处理代码。</p><p>​    ② 收集参数、封装参数到模型。</p><p>​    ③ 转调业务对象处理模型。</p><p>​    ④ 返回逻辑视图名交给前端控制器 。</p><p><strong>(4) 上下文(  Context  )</strong></p><p>有了上下文之后，可以将相关数据放置在上下文，从而与协议无关（如 Servlet API）的访问/设置模型数据，一般通过 ThreadLocal 模式实现。 </p><hr><h3 id="Spring-Web-MVC"><a href="#Spring-Web-MVC" class="headerlink" title="Spring Web MVC"></a>Spring Web MVC</h3><p>SpringMVC是Spring家族的原生产品，基于<strong>原生的Servlet</strong>，通过<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理。</p><p><strong>(1) 架构图</strong>：</p><img src="/2021/12/19/2_5_SpringMVC/1639913960343.png" class="" width="1639913960343"><p><strong>(2) 核心架构的具体执行流程</strong>：</p><ol><li><p>用户 <font color=green><strong>发送请求 —&gt; DispatcherServlet</strong> </font> : 前端控制器接收到请求后自己不处理，交给其他解析器进行处理，作为统一的访问点，进行<strong>全局流程控制</strong>。</p></li><li><p><font color=green><strong>DispatcherServlet —&gt;  HandlerMapping</strong>  </font>: HandlerMapping 将会把请求映射为<strong>HandlerExecutionChain</strong> 对象（包含一 个 Handler 处理器（页面控制器）对象、多个 HandlerInterceptor 拦截器）对象 。(<strong>用于添加新的映射策略</strong>)</p></li><li><p><font color=green><strong>DispatcherServlet —&gt;  HandlerAdapter</strong>  </font>: HandlerAdapter把处理器包装成适配器，从而支持多种类型处理器。</p></li><li><p><font color=green><strong>DispatcherServlet —&gt;  处理器功能处理方法的调用</strong>  </font>: 根据适配结果调用处理器的功能方法。返回一个<strong>ModelAndView</strong>对象。</p></li><li><p><font color=green><strong>ModelAndView的逻辑视图名 —&gt;  ViewResolver</strong>  </font>: ViewResolver把逻辑视图名解析成具体的<strong>View</strong>。(可用于更换其他视图技术)</p></li><li><p><font color=green><strong>View —&gt; 渲染</strong>  </font>: <strong>View</strong> 根据传来的 <strong>Model</strong> 模型数据进行渲染，此处的Model实际是一个 <strong>Map数据结构</strong>。</p></li><li><p><font color=green><strong>返回控制权给DispatcherServlet</strong>  </font>: 由DispatcherServlet <strong>返回响应</strong> 给用户。</p></li></ol><p><font color=red> <strong>(3) 具体的核心开发步骤：</strong> </font></p><ol start="0"><li><p>创建Maven工程。在 <code>pom.xml</code> 中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>DispatcherServlet 在 web.xml 中的部署描述，从而拦截请求到 Spring Web MVC。</p><ul><li><p>默认配置方式</p><p>此配置方式下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<code>&lt;servlet-name&gt;-servlet.xml</code> ,如以下配置所对应的SpringMVC的配置文件在WEB-INF下，文件名为<code>springMVC-servlet.xml</code> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       /所匹配的请求可以是/login或者.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">       但是不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>拓展配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ============================================================== --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- classpath对应的是类路径，.class或.java --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将前端控制器DispatcherServlet的初始化时间提前到服务器启动时 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ============================================================== --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>   <strong>对 main/resources/springMVC.xml 进行配置。</strong></p><ul><li><p>添加扫描组件</p></li><li><p>配置Thymeleaf视图解析器</p><p>springboot推荐的页面模板是Thymeleaf。<strong>前后端不分离</strong>的情况下，springboot推荐用html做页面，用Thymeleaf做模板渲染，做数据渲染。(相当于jsp)；<strong>前后端分离</strong>的情况下，前端用vue、react等做渲染页面，前后端采用restful json通信。[<a href="https://blog.csdn.net/velanjun/article/details/112475154">参考</a>]</p></li></ul>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.fanpeng.mvc.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置视图解析器的优先级 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   在 <code>HelloController.java</code> 中添加<strong>请求映射的注解</strong>。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.mvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fanpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/22 - 16:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过注解+组件的方式</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123; <span class="comment">// 控制器</span></span><br><span class="line">    <span class="comment">// “/”--&gt;WEB-INF/templates/index.html</span></span><br><span class="line">    <span class="comment">// 添加请求映射的注解</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   在 <code>main/webapp/WEB-INF</code>下创建 <code>templates</code> 文件夹，并创建HTML5文件，命名为 <code>index.html</code></p>   <img src="/2021/12/19/2_5_SpringMVC/1640183063610.png" class="" width="1640183063610"><p>   打开Tomcat服务器，验证是否搭建成功。</p>   <img src="/2021/12/19/2_5_SpringMVC/1640183085573.png" class="" width="1640183085573"><p>   <strong>小结：</strong></p><p>​        浏览器发送请求，如果请求地址符合前端控制器的url-pattern，该请求会被<strong>前端控制器DispatcherServlet</strong>处理。</p><p>​        前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中 <strong>@RequestMapping 注解的value属性值</strong>进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。</p><p>​        处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上<strong>前缀和后缀</strong>组成视图的路径，<strong>通过Thymeleaf对视图进行渲染</strong>，最终转发给视图所对应页面。</p><ol start="2"><li><p>HandlerMapping 的配置，从而将请求映射到处理器。</p></li><li><p>HandlerAdapter 的配置，从而支持多种类型的处理器。</p></li><li><p>ViewResolver 的配置，从而将逻辑视图名解析为具体视图技术。 </p></li><li><p>处理器（页面控制器）的配置，从而进行功能处理。</p></li></ol><hr><h3 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h3><p><strong>如果没有Spring框架，我们需要自己创建User/Dao/Service等。</strong> </p><p><strong>有了Spring框架，可以将原有Bean的创建工作转给框架, 需要用时从Bean的容器中获取即可，这样便简化了开发工作。</strong></p><p> 由用户管理Bean转变为框架管理Bean，这个就叫<strong>控制反转 - Inversion of Control (IoC)</strong> </p><p><font color=red><strong>引入的一些问题：</strong></font></p><ol><li>Spring框架托管创建的Bean放在<font color=red><strong>IoC Container</strong></font>中。</li><li>Spring引入不同方式(包括<font color=red> <strong>xml配置，Java配置，注解配置</strong> </font>)来配置Bean，为了能让用户更好配置Bean。</li><li>Spring框架负责Bean的生成，同时也负责管理整个Bean的生命周期。</li><li>应用程序从IoC Container中获取依赖的Bean, 注入到应用程序中, 这个过程叫<font color=red> <strong>依赖注入(Dependency Injection，DI)。</strong> </font> 控制反转是通过依赖注入实现的，其实它们是同一个概念的不同角度描述。 <strong>IoC是设计思想，DI是实现方式</strong> 。</li><li>依赖注入使用<font color=red><strong>构造器方式</strong></font>(包括 @Autowired, @Resource, @Qualifier… )。</li></ol><br><h3 id="理解IoC"><a href="#理解IoC" class="headerlink" title="理解IoC"></a>理解IoC</h3><h4 id="1-Spring-Bean是什么？"><a href="#1-Spring-Bean是什么？" class="headerlink" title="(1) Spring Bean是什么？"></a>(1) Spring Bean是什么？</h4><p>Spring Bean类似于定义的一个组件，这个组件的作用是实现某个功能。使用Bean是<strong>使用一种更为简便的方法来调用这个组件实现功能</strong>。</p><br><h4 id="2-IoC是什么？"><a href="#2-IoC是什么？" class="headerlink" title="(2) IoC是什么？"></a>(2) IoC是什么？</h4><p>一种设计思想。IoC意味着<strong>将设计好的对象交给容器控制</strong>，而不是传统的在对象内部直接控制。</p><p>IoC/DI思想中，应用程序变成被动的，被动等待IoC容器来创建并注入它所需要的资源。即<strong>由IoC容器帮对象找到相应的依赖对象并注入，而不是对象主动去找</strong>。</p><br><h4 id="3-IoC和DI的关系？"><a href="#3-IoC和DI的关系？" class="headerlink" title="(3) IoC和DI的关系？"></a>(3) IoC和DI的关系？</h4><p> <strong>“ IoC是设计思想，DI是实现方式 ”</strong> 。</p><p> <strong>DI—Dependency Injection，即依赖注入：</strong></p><p>容器动态的将某个依赖关系注入到组件之中，依赖注入的目的并非为软件系统带来更多的功能，而是为了提升组件重用的频率，为系统搭建一个可扩展的平台。</p><p> 通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。 </p><p><font color=red>依赖：</font> 应用程序依赖IoC容器。需要IoC容器提供对象需要的外部资源。</p><p><font color=red>注入：</font> IoC容器注入应用程序中的某个对象所需要的外部资源(对象、资源、常量数据等)。</p><hr><h3 id="IoC-配置"><a href="#IoC-配置" class="headerlink" title="IoC 配置"></a>IoC 配置</h3><p>xml配置、Java配置、注解配置。【主流方式：<font color=red><strong>注解 + Java配置</strong></font>】</p><p><strong>(1) xml配置</strong></p><p>将bean的信息配置.xml文件中，通过Spring加载文件为我们创建bean。</p><br><p><strong>(2) Java配置</strong></p><p>将类的创建交给配置的JavcConfig类完成，Spring只负责维护和管理，使用纯Java的方式。</p><p>本质就是将XML上的配置声明转移到Java配置中去。</p><br><p><strong>(3) 注解配置</strong></p><p>通过在类上加注解的方式，声明一个类交给Spring管理。Spring会自动扫描带注解( @Component，@Controller，@Service，@Repository )的类，并创建和管理。</p><hr><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>主要有三种方式：<strong>构造方法注入(Construct注入)、setter注入、基于注解的注入(接口注入)</strong></p><hr><h3 id="AOP-面向切面"><a href="#AOP-面向切面" class="headerlink" title="AOP 面向切面"></a>AOP 面向切面</h3><p> <strong>给Service所有方法调用添加日志</strong>（调用方法时)， 本质上是<strong>解耦问题</strong>； </p><p> <strong>如果没有Spring框架，我们需要在每个service的方法中都添加记录日志的方法</strong> 。</p><p> <strong>有了Spring框架，通过@Aspect注解 定义了切面，这个切面中定义了拦截所有service中的方法，并记录日志；</strong> </p><p> 框架将日志记录和业务需求的代码解耦了，不再是侵入式的了。 </p><p>Spring 框架通过定义切面, 通过拦截切点实现了不同业务模块的解耦。这就是 <strong>面向切面编程(AOP)</strong> 。</p><p><font color=red><strong>AOP的理念：将分散在各个业务逻辑代码中相同的代码通过横向切割的方式抽取到一个独立的模块中。</strong></font>【<strong>横向</strong>】</p><img src="/2021/12/19/2_5_SpringMVC/1639969412092.png" class="" width="1639969412092"><p>相对应的是：<strong>OOP(面向对象编程)</strong> ，即针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰的逻辑单元划分。【<strong>纵向</strong>】</p>]]></content>
    
    
    <summary type="html">Java中Spring相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/15】Java_基础知识点(二)</title>
    <link href="http://example.com/2021/12/18/2_4_%E5%9F%BA%E7%A1%80%E5%BC%BA%E5%8C%96/"/>
    <id>http://example.com/2021/12/18/2_4_%E5%9F%BA%E7%A1%80%E5%BC%BA%E5%8C%96/</id>
    <published>2021-12-18T14:16:01.090Z</published>
    <updated>2021-12-18T14:19:38.926Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="基础强化"><a href="#基础强化" class="headerlink" title="基础强化"></a>基础强化</h2><h3 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a><code>Junit</code>单元测试</h3><p>测试分类：黑盒测试[不需要写代码]、白盒测试[需要写代码测试]</p><p>黑盒测试：给输入值，看程序是否能输出期望的值。</p><p>白盒测试：需要写代码。关注程序具体的执行流程。</p><ul><li><p>步骤</p><ol><li>定义一个测试类(测试用例)<ul><li>测试类名：<code>被测试的类名Test</code></li><li>包名：<code>xxx.xxx.xxx.test</code></li></ul></li><li>定义测试的方法：可以独立运行<ul><li>方法名：test测试的方法名        <code>testAdd()</code></li><li>返回值：<code>void</code></li><li>参数列表：空参</li></ul></li><li>给方法加<code>@Test</code></li><li>导入<code>junit</code>依赖环境</li></ol></li><li><p>判定结果：</p><p>​    绿色：成功</p><p>​    红色：失败</p><p>​    一般使用断言操作<code>Assert</code>来处理结果</p></li></ul><p>两个注解：<code>@Before</code> [执行测试方法之前执行] 和 <code>@After</code> [执行测试方法之后执行]。</p><hr><h3 id="反射：框架的设计灵魂"><a href="#反射：框架的设计灵魂" class="headerlink" title="反射：框架的设计灵魂"></a>反射：框架的设计灵魂</h3><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码。</p><p><strong>反射机制</strong>：将类的各个组成部分封装成其他对象，这就是反射机制。</p><ul><li>好处：<ul><li>在程序的运行过程中操作这些对象。</li><li>可以解耦，提供程序的可扩展性。</li></ul></li></ul><p>获取<code>Class</code>对象的方式：</p><ol><li><code>Class.forName(&quot;全类名&quot;)</code>:将字节码文件加载进内存，返回Class对象。<ul><li>多用于配置文件中，将类名定义在配置文件中，读取文件，加载类。</li></ul></li><li><code>类名.class</code>：通过类名的属性class获取。<ul><li>多用于参数的传递。</li></ul></li><li><code>对象.getClass()</code>:<code>getClass()</code>方法在Object类中定义。<ul><li>多用于对象的获取字节码的方式。</li></ul></li></ol><p>注：同一字节码文件<code>*.class</code> 在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的class对象都是同一个。</p><p><code>Class</code>对象功能：</p><ol><li><p>获取成员变量们</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo23_Reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   Class获取功能：</span></span><br><span class="line"><span class="comment">*       获取成员变量们：</span></span><br><span class="line"><span class="comment">*           1.Field[] getFields() 获取所有的public修饰的成员变量。</span></span><br><span class="line"><span class="comment">*           2.Field getField(String name) 获取指定名称的public修饰的成员变量</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           3.Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符。</span></span><br><span class="line"><span class="comment">*           4.Field getDeclaredField(String name)</span></span><br><span class="line"><span class="comment">*       操作：</span></span><br><span class="line"><span class="comment">*           1.设置值</span></span><br><span class="line"><span class="comment">*           2.获取值</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Filed</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 0.获取Person的Class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        Field[] fields = personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field a = personClass.getField(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取成员变量a的值</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Object value = a.get(p);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">// 设置a的值</span></span><br><span class="line">        a.set(p,<span class="string">&quot;菲利普&quot;</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符。</span></span><br><span class="line">        Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(declaredField);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.Field getDeclaredField(String name)</span></span><br><span class="line">        Field d = personClass.getDeclaredField(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="comment">// 忽略权限修饰符的安全检查</span></span><br><span class="line">        d.setAccessible(<span class="keyword">true</span>); <span class="comment">// 暴力反射</span></span><br><span class="line">        Object value2 = d.get(p);</span><br><span class="line">        System.out.println(value2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获取构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo23_Reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   获取构造的方法</span></span><br><span class="line"><span class="comment">*       Constructor&lt;?&gt;[] getConstructors()</span></span><br><span class="line"><span class="comment">*       Constructor&lt;T&gt; getConstructors(类&lt;?&gt;... parameter Types)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*       Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameter Types)</span></span><br><span class="line"><span class="comment">*       Constructor&lt;?&gt;[] getDeclaredConstructors()</span></span><br><span class="line"><span class="comment">*   创建对象：</span></span><br><span class="line"><span class="comment">*       T newInstance(Object... initargs);</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_Constructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Person的class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Constructor&lt;T&gt; getConstructors(类&lt;?&gt;... parameter Types)</span></span><br><span class="line">        Constructor constructor = personClass.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        Object person = constructor.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 空参构造方法</span></span><br><span class="line">        Constructor constructor1 = personClass.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        Object person1 = constructor1.newInstance();</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化空参构造方法</span></span><br><span class="line">        Object o = personClass.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获取成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo23_Reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   获取成员方法：</span></span><br><span class="line"><span class="comment">*       Method[] getMethod()</span></span><br><span class="line"><span class="comment">*       Method getMethod(String name, 类&lt;T&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*       Method[] getDeclaredMethod()</span></span><br><span class="line"><span class="comment">*       Method getDeclaredMethod(String name, 类&lt;T&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03_Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 0.创建一个class对象</span></span><br><span class="line">        Class peronClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定的方法</span></span><br><span class="line">        Method eat_method = peronClass.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        eat_method.invoke(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        Method eat_food_method = peronClass.getMethod(<span class="string">&quot;eat_food&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        eat_food_method.invoke(p,<span class="string">&quot;饭&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类名</span></span><br><span class="line">        String className = peronClass.getName();</span><br><span class="line">        System.out.println(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>反射案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo23_Reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   案例：</span></span><br><span class="line"><span class="comment">*       需求：写一个框架，在不改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中的任意方法。</span></span><br><span class="line"><span class="comment">*       实现：</span></span><br><span class="line"><span class="comment">*           1.配置文件</span></span><br><span class="line"><span class="comment">*           2.反射</span></span><br><span class="line"><span class="comment">*       步骤：</span></span><br><span class="line"><span class="comment">*           1.将需要创建的对象的全类名和需要执行的方法定义在配置文件中。</span></span><br><span class="line"><span class="comment">*           2.在程序中加载读取配置文件。</span></span><br><span class="line"><span class="comment">*           3.使用反射技术来加载类文件进内存。</span></span><br><span class="line"><span class="comment">*           4.创建对象。</span></span><br><span class="line"><span class="comment">*           5.执行方法。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04_ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载配置文件</span></span><br><span class="line">        <span class="comment">// 1.1创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 1.2加载配置文件，转化成一个集合</span></span><br><span class="line">        <span class="comment">// 1.2.1获取class目录下的配置文件</span></span><br><span class="line">        ClassLoader classLoader = Demo04_ReflectTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取配置文件中定义的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        <span class="comment">// 4.创建对象</span></span><br><span class="line">        Object o = cls.newInstance();</span><br><span class="line">        <span class="comment">// 5.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">// 6.执行方法</span></span><br><span class="line">        method.invoke(o);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="注解-【不太明白】"><a href="#注解-【不太明白】" class="headerlink" title="注解 【不太明白】"></a>注解 【不太明白】</h3><p>注解：说明程序的，给计算机看的。</p><p>注释：用文字描述程序。给开发人员看的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IDEA中添加注解的方式: /**... + Enter</span></span><br><span class="line">    <span class="comment">/**..</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>作用分类：</p><ol><li>编写文档：通过代码里标识的注解生成文档【生成文档doc文档】</li><li>代码分析：通过代码里标识的注解对代码进行分析【使用反射】</li><li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ol><p><code>JDK</code> 中预定义的一些注解：</p><ol><li><code>@Override</code> : 检测被该注解标注的方法是否继承自父类(接口)的。</li><li><code>Deprecated</code> : 该注解标注的内容，表示已过时。</li><li><code>SuppressWarning</code> : 压制警告。</li></ol><p>自定义注解：</p><ol><li><p>元注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span> <span class="comment">// 描述注解能作用的位置</span></span><br><span class="line"><span class="meta">@Retention</span> <span class="comment">// 描述注解被保留的阶段</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">// 描述注解是否被抽取到api文档中</span></span><br><span class="line"><span class="meta">@Inherited</span> <span class="comment">// 描述注解是否被子类继承</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">    <span class="comment">// 属性列表;(本质就是成员方法)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本质：注解的本质就是一个接口，该接口默认继承Annotation接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAnno</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性：接口中可以定义的成员方法。接口中的抽象方法。</p><p>​    要求：（1）属性的返回值是(基本数据类型、String、枚举、注解、以上类型的数组)。</p><p>​                （2）定义了属性，在使用时需要给属性赋值。</p><p>​                        ① 如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</p><p>​                        ② 如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略。</p><p>​                        ③ 数组赋值时，使用{}包裹。</p></li></ol><p><code>Demo01_Anno.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo24_Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.tree.analysis.Value;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="comment">// 8888888888888888888888888888888888888888888888888888888</span></span><br><span class="line"><span class="meta">@MyAnno(value = 1,per = Person.P1,anno2 = @MyAnno2,strs = &#123;&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;&#125;)</span> <span class="comment">// 添加注解的方式</span></span><br><span class="line"><span class="comment">// 8888888888888888888888888888888888888888888888888888888</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Anno</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 有缺陷</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 替代show1方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MyAnno.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo24_Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    <span class="comment">//int age();</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    String[] strs();</span><br><span class="line">    <span class="function">Person <span class="title">per</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">MyAnno2 <span class="title">anno2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Person.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo24_Annotation;</span><br><span class="line"><span class="comment">// 枚举类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">    P1,P2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MyAnno2.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo24_Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno2 &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>以后大多数时间，仅仅是使用注解而不是自定义注解。</li><li>注解给谁用？<ol><li>编译器</li><li>解析程序</li></ol></li><li>注解不是程序的一部分。</li></ol><hr>]]></content>
    
    
    <summary type="html">Java中基础知识点总结(二)。【单元测试、框架、注解】</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/14】Java_Stream流</title>
    <link href="http://example.com/2021/12/18/2_3_Stream%E6%B5%81/"/>
    <id>http://example.com/2021/12/18/2_3_Stream%E6%B5%81/</id>
    <published>2021-12-18T14:13:43.623Z</published>
    <updated>2021-12-18T14:15:35.846Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><p>对集合和数组进行优化操作。</p><p><code>Stream流</code> 是一个集合元素的函数模型，调用指定的方法可以从一个流模型转换成另一个流模型。其本身**并不存储任何元素(或地址值)**。</p><p><code>Stream流</code>的基础特征：</p><ol><li>Pipelining：中间操作的对象都会返回流本身。多个操作可以串联成一个管道，如同流式风格(fluent style)。这样可以对操作进行优化，比如延迟执行(laziness)和短路(short-circuiting).    <code>Stream流</code>属于管道流，只能被消费一次。</li><li>内部迭代：之前的遍历操作通过Iterator或者增强for循环进行操作，显式的在集合外部进行迭代。Stream提供了内部迭代的方式，流可以直接调用遍历方法。</li></ol><p>流模型常用<code>API</code>，方法可以被分为两种：</p><ol><li><strong>延迟方法</strong>：返回值类型仍是 <code>Stream</code> 接口自身类型的方法，支持<strong>链式调用</strong>。（除了终结方法，其余方法都是延迟方法）</li><li><strong>终结方法</strong>：返回值类型不再是 <code>Stream</code> 接口自身类型的方法，因此不再支持类似 <code>StringBuilder</code> 那样的链式调用。终结方法包括 <code>count</code> 和 <code>forEach</code> 方法。</li></ol><hr><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><p><code>Demo01List.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo21_Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   使用传统方式遍历集合，对集合中的数据进行过滤。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01List</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个List集合，存储姓名。</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;杨过&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张强&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周杰伦&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对list集合中的元素进行过滤，只要以张开头的元素，存储到一个新的集合中去</span></span><br><span class="line">        List&lt;String&gt; listA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;张&quot;</span>)) &#123;</span><br><span class="line">                listA.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对集合listA中的元素进行过滤，只要长度为3的元素，存储到新的集合中去</span></span><br><span class="line">        List&lt;String&gt; listB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : listA) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length()==<span class="number">3</span>) &#123;</span><br><span class="line">                listB.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印listB</span></span><br><span class="line">        <span class="keyword">for</span> (String s : listB) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Demo02Stream.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo21_Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   Stream流关注的是做什么而不是怎么做。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Stream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个List集合，存储姓名。</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;杨过&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张强&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周杰伦&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对list集合中的元素进行过滤，只要以张开头的元素，存储到一个新的集合中去</span></span><br><span class="line">        <span class="comment">// 对集合listA中的元素进行过滤，只要长度为3的元素，存储到新的集合中去</span></span><br><span class="line">        <span class="comment">// 打印listB</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(name-&gt;name.startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">                .filter(name-&gt;name.length()==<span class="number">3</span>)</span><br><span class="line">                .forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><p><code>Demo03StreamUse.java</code>：Stream流的一些方法的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo21_Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.util.stream.Stream&lt;T&gt;是java8新加入的常用的流接口(并不是一个函数式接口)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   获取一个流有以下几种方式</span></span><br><span class="line"><span class="comment">*       1. 所有的Collection集合都可以通过stream默认方法获取流。</span></span><br><span class="line"><span class="comment">*           default Stream&lt;E&gt; stream()</span></span><br><span class="line"><span class="comment">*       2. Stream接口的静态方法of可以获取数组对应的流。</span></span><br><span class="line"><span class="comment">*           static &lt;T&gt; Stream&lt;T&gt; of (T... value)</span></span><br><span class="line"><span class="comment">*           参数是一个可变参数，我们可以传递一个数组。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StreamUse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 把集合转换为Stream流</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream2 = set.stream();</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取map集合中的键</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        Stream&lt;String&gt; stream3 = keySet.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取map集合中的值</span></span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        Stream&lt;String&gt; stream4 = values.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取键值对</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">        Stream&lt;Map.Entry&lt;String, String&gt;&gt; stream5 = entries.stream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把数组转换成Stream流</span></span><br><span class="line">        Stream&lt;Integer&gt; stream6 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 可变参数传递数组</span></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Stream&lt;Integer&gt; stream7 = Stream.of(arr);</span><br><span class="line">        String[] arr2 = &#123;<span class="string">&quot;123&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;dd&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream8 = Stream.of(arr2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   如果需要将流中的元素映射到另一个流中，可以使用map方法。</span></span><br><span class="line"><span class="comment">        *   &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</span></span><br><span class="line"><span class="comment">        *   该接口需要一个Function函数式接口参数，可以将当前流中的T类型数据转换成另一种R类型的流。</span></span><br><span class="line"><span class="comment">        *   Function中的抽象方法：</span></span><br><span class="line"><span class="comment">        *       R apply(T t);</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">// 获取一个String类型的Stream流</span></span><br><span class="line">        Stream&lt;String&gt; mapStream = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用map方法把字符串类型的整数，转换(映射)为Integer类型的整数</span></span><br><span class="line">        Stream&lt;Integer&gt; int_stream = mapStream.map((String s)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        int_stream.forEach(i-&gt; System.out.print(i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   Stream流中常用的方法 count:用于统计Stream流中元素的个数。</span></span><br><span class="line"><span class="comment">        *   long count();</span></span><br><span class="line"><span class="comment">        *   count方法是一个终结方法，返回值是一个long类型的整数。</span></span><br><span class="line"><span class="comment">        *   所以不能再调用Stream流中的方法了。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list_count = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list_count.add(<span class="number">1</span>);</span><br><span class="line">        list_count.add(<span class="number">2</span>);</span><br><span class="line">        list_count.add(<span class="number">3</span>);</span><br><span class="line">        list_count.add(<span class="number">4</span>);</span><br><span class="line">        list_count.add(<span class="number">5</span>);</span><br><span class="line">        list_count.add(<span class="number">6</span>);</span><br><span class="line">        Stream&lt;Integer&gt; stream_count = list_count.stream();</span><br><span class="line">        <span class="keyword">long</span> count = stream_count.count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   Stream流中常用的方法 limit:用于截取流中的元素。</span></span><br><span class="line"><span class="comment">        *   limit方法可以对流进行截取，只取用前n个。</span></span><br><span class="line"><span class="comment">        *   Stream&lt;T&gt; limit(long maxSize);</span></span><br><span class="line"><span class="comment">        *       参数是一个long型，如果集合当前长度大于参数则进行截取；否则不操作。</span></span><br><span class="line"><span class="comment">        *   limit是一个延迟方法，只是对流中的元素进行截取，返回的是一个新的流，所以可以继续调用Stream流中的其他方法。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        String[] arr3 = &#123;<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ddd&quot;</span>,<span class="string">&quot;eee&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream_limit = Stream.of(arr3);</span><br><span class="line">        Stream&lt;String&gt; limit = stream_limit.limit(<span class="number">3</span>);</span><br><span class="line">        limit.forEach(name-&gt; System.out.println(name));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   希望跳过前面几个元素，可以使用skip方法获取一个截取之后的新流：</span></span><br><span class="line"><span class="comment">        *   Stream&lt;T&gt; skip(long n);</span></span><br><span class="line"><span class="comment">        *   如果流的当前长度大于n，则跳过前n个；否则将得到一个长度为0的空流。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; skip = original.skip(<span class="number">2</span>);</span><br><span class="line">        System.out.println(skip.count());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   如果两个流，希望合并成一个流，可以使用Stream接口的静态方法concat.</span></span><br><span class="line"><span class="comment">        *   static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt;a, Stream&lt;? extends T&gt;b)</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Stream&lt;String&gt; aaa = Stream.of(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; bbb = Stream.of(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; result = Stream.concat(aaa, bbb);</span><br><span class="line">        result.forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><p><code>Demo04_StreamTest.java</code> :集合元素的处理(使用Stream和不使用Stream)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo21_Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   练习：集合元素的处理(传统方式)</span></span><br><span class="line"><span class="comment">*       现有两个ArrayList集合中有多个成员，按照以下要求对成员进行筛选。</span></span><br><span class="line"><span class="comment">*       1.第一个集合中只要名字为3个字的成员姓名，存储到一个新的集合中。</span></span><br><span class="line"><span class="comment">*       2.第一个队伍筛选完后只要前3个人，存储到一个新的集合中。</span></span><br><span class="line"><span class="comment">*       3.第二个队伍中只要姓名为”张“的成员，存储到一个集合中。</span></span><br><span class="line"><span class="comment">*       4.第二个队伍筛选完后不要前两个人，存储到一个新的集合中。</span></span><br><span class="line"><span class="comment">*       5.将两个队伍筛选完后的结果合并成一个新的队伍，存储到一个集合中。</span></span><br><span class="line"><span class="comment">*       6.根据姓名创建Person对象，存储到一个新的集合中。</span></span><br><span class="line"><span class="comment">*       7.打印整个Person对象信息。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04_StreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一个队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="string">&quot;盖伦&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;金克丝&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;拉克丝&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;易&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;伊泽瑞尔&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;崔斯特&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;薇古丝&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.第一个集合中只要名字为3个字的成员姓名，存储到一个新的集合中。</span></span><br><span class="line">        ArrayList&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : list1) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.length()==<span class="number">3</span>) &#123;</span><br><span class="line">                one.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.第一个队伍筛选完后只要前3个人，存储到一个新的集合中。</span></span><br><span class="line">        ArrayList&lt;String&gt; one1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            one1.add(one.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Stream进行优化</span></span><br><span class="line">        Stream&lt;String&gt; oneStream = one.stream().filter(name-&gt;name.length()==<span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list2.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;张起灵&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;迪丽热巴&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;古力娜扎&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;马儿扎哈&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;张天爱&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;张杰&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.第二个队伍中只要姓名为”张“的成员，存储到一个集合中。</span></span><br><span class="line">        ArrayList&lt;String&gt;  two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : list2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.startsWith(<span class="string">&quot;张&quot;</span>)) &#123;</span><br><span class="line">                two.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.第二个队伍筛选完后只要前两个人，存储到一个新的集合中。</span></span><br><span class="line">        ArrayList&lt;String&gt; two1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; two.size(); i++) &#123;</span><br><span class="line">            two1.add(two.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Stream进行优化</span></span><br><span class="line">        Stream&lt;String&gt; twoStream = two.stream().filter(name-&gt;name.startsWith(<span class="string">&quot;张&quot;</span>)).skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.将两个队合并成一个集合</span></span><br><span class="line">        ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        result.addAll(one1);</span><br><span class="line">        result.addAll(two1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.根据姓名创建Person对象，存储到一个新集合中。</span></span><br><span class="line">        ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : result) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Person(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.打印输出</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : list) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 优化Stream进行合并</span></span><br><span class="line">        Stream.concat(oneStream,twoStream).map(name-&gt;<span class="keyword">new</span> Person(name)).forEach(p-&gt; System.out.println(p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中Stream流相关内容。【三个案例】</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/13】Java_函数式接口</title>
    <link href="http://example.com/2021/12/18/2_2_%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2021/12/18/2_2_%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-12-18T14:11:31.841Z</published>
    <updated>2021-12-18T14:13:37.085Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口：<strong>有且仅有一个抽象方法的接口</strong>。</p><p>适用于函数式编程[Lambda]。</p><p><code>Demo01_MyFunctionalInterface.java</code> : 定义一个函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo19_FunctionalInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   函数式接口：有且仅有一个抽象方法的接口，称之为函数式接口。</span></span><br><span class="line"><span class="comment">*   接口中还可以有别的方法(默认，静态，私有)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   @FunctionalInterface注解</span></span><br><span class="line"><span class="comment">*   作用：可以检测接口是否是一个函数式接口</span></span><br><span class="line"><span class="comment">*       是：编译成功</span></span><br><span class="line"><span class="comment">*       否：编译失败(接口中没有抽象方法或是抽象方法的个数多于1个)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Demo01_MyFunctionalInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MyFunctionalInterfaceImpl</code> : 定义接口的实现类对象，重写其抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo19_FunctionalInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFunctionalInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">Demo01_MyFunctionalInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Demo.java</code> : 测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo19_FunctionalInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*       函数式接口的使用：一般可以作为方法的参数和返回值类型。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Demo01_MyFunctionalInterface inter)</span> </span>&#123;</span><br><span class="line">        inter.method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用show方法，方法的参数是一个接口，所以可以传递接口的实现类对象。</span></span><br><span class="line">        show(<span class="keyword">new</span> MyFunctionalInterfaceImpl());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用show方法，方法的参数是一个接口，所以我们可以传递接口的匿名内部类</span></span><br><span class="line">        show(<span class="keyword">new</span> Demo01_MyFunctionalInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写接口中的抽象方法！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用show方法，方法的参数是一个函数式接口，所以我们可以Lambda表达式</span></span><br><span class="line">        show(()-&gt; System.out.println(<span class="string">&quot;使用Lambda表达式重写接口中的抽象方法！&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p><code>Lambda表达式</code> ：延迟加载。</p><h3 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo20_Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个方法startThread,方法的参数使用函数式接口Runnable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">(Runnable run)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 开启多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用startThread方法，方法的参数是一个接口，可以考虑使用这个接口的匿名内部类</span></span><br><span class="line">        startThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&quot;</span>+<span class="string">&quot;线程启动！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用startThread方法，方法的参数是一个函数式接口，可以传递Lambda表达式</span></span><br><span class="line">        startThread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&quot;</span>+<span class="string">&quot;线程启动！&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数式接口作为方法的返回值类型"><a href="#函数式接口作为方法的返回值类型" class="headerlink" title="函数式接口作为方法的返回值类型"></a>函数式接口作为方法的返回值类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo20_Lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*          一个方法的返回值是一个函数式接口，那么就可以直接返回一个Lambda表达式。</span></span><br><span class="line"><span class="comment">*           当需要一个方法来获取一个java.util.Comparator接口类型的对象作为排序器时，就可以调用该方法获取。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_Comparator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个方法，方法的返回值类型使用函数式接口Comparator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title">getComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String o1,String o2) &#123;</span></span><br><span class="line"><span class="comment">//                // 字符串的降序排序</span></span><br><span class="line"><span class="comment">//                return o2.length()-o1.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法的返回值类型是一个函数式接口，所以我们可以返回一个Lambda表达式</span></span><br><span class="line">        <span class="keyword">return</span> (String o1,String o2)-&gt;&#123;</span><br><span class="line">            <span class="comment">// 字符串的降序排序</span></span><br><span class="line">            <span class="keyword">return</span> o2.length()-o1.length();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继续优化Lambda表达式</span></span><br><span class="line">        <span class="comment">//return ((o1, o2) -&gt; o2.length()-o1.length());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个字符串数组</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;aaaa&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;dd&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">// 输出字符串</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">// 调用Arrays中的sort方法，对字符串数组进行排序</span></span><br><span class="line">        Arrays.sort(arr,getComparator());</span><br><span class="line">        <span class="comment">// 输出排序后的结果</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中函数式接口相关内容。【Lambda】</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/13】Java_网络编程</title>
    <link href="http://example.com/2021/12/18/2_1_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2021/12/18/2_1_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-12-18T14:06:36.201Z</published>
    <updated>2021-12-18T14:10:50.491Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="1-软件结构"><a href="#1-软件结构" class="headerlink" title="(1) 软件结构"></a>(1) 软件结构</h3><p><code>C/S结构</code> :客户端/服务器。</p><p><code>B/S结构</code> :浏览器/服务器。</p><p><code>TCP</code> :传输控制协议。面两连接的通信协议。提供可靠的无差错的数据传输。每次传输需要经过<strong>三次握手</strong>。</p><p><code>UDP</code> :用户数据报协议。面向无连接性。不保证数据的完整性。但是传输速度快。</p><hr><h3 id="2-网络编程三要素"><a href="#2-网络编程三要素" class="headerlink" title="(2)网络编程三要素"></a>(2)网络编程三要素</h3><p><code>协议</code> [计算机通信需要遵守的规则]、<code>IP地址</code> [互联网协议地址]、<code>端口号</code> [两个字节组成，取值范围0-65535之间]</p><p>查看本地IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ipconfig</span><br></pre></td></tr></table></figure><p>检查网络是否连通：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping ip地址</span><br></pre></td></tr></table></figure><p>通信必须保证数据准确无误的发送到对象计算机的软件上。[使用<strong>IP地址+端口号</strong>]</p><p>一些常见的<code>端口号</code> :</p><ol><li>80端口，网络端口。</li><li>数据库  mysql: 3306 oracle: 1521</li><li>Tomcat服务器：8080</li></ol><hr><h3 id="3-TCP通信程序"><a href="#3-TCP通信程序" class="headerlink" title="(3) TCP通信程序"></a>(3) TCP通信程序</h3><p>TCP通信实现两台计算机之间的数据交互，通信的两端严格区分**客户端(Client)和服务端(Server)**。</p><p>通信的步骤：</p><p>服务器端先启动，服务器端不会主动的请求客户端，必须使用客户端请求服务器端。</p><p>客户端和服务器端建立一个逻辑链接，这个连接中包含一个对象，这个对象就是<strong>IO对象</strong>。</p><p>客户端与服务器端就可以使用IO对象进行通信。</p><p>通信的不止是字符，所以IO对象是<strong>字节流对象</strong>。</p><p>服务器端需要明确的事情：</p><ol><li>多个客户端同时与服务器进行交互，服务器必须明确和哪个客户端进行交互。在服务器端有一个方法，叫accept客户端获取到请求的客户端对象。</li><li>多个客户端同时和服务器进行交互，就需要使用多个IO流对象。</li><li><font color=red>服务器端使用客户端的流和客户端交互。</font></li></ol><h4 id="实验1：测试服务器端与客户端进行通信"><a href="#实验1：测试服务器端与客户端进行通信" class="headerlink" title="实验1：测试服务器端与客户端进行通信"></a>实验1：测试服务器端与客户端进行通信</h4><p><code>Demo01_TCPClient.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   TCP通信的客户端：向服务器发送请求，给服务器发送数据，读取服务器返回的数据。</span></span><br><span class="line"><span class="comment">*   表示客户端的类：</span></span><br><span class="line"><span class="comment">*       java.net.Socket:此类实现客户端套接字(&quot;套接字&quot;)，套接字是两台机器间通信的端点。</span></span><br><span class="line"><span class="comment">*       套接字：包含了IP地址和端口号的网络单位。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       Socket(String host, int port) 创建一个流套接字并将其连接到指定主机的指定端口号。</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           String host： 服务器主机的名称/服务器的IP地址</span></span><br><span class="line"><span class="comment">*           int port: 服务器的端口号。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   成员方法：</span></span><br><span class="line"><span class="comment">*       OutputStream getOutputStream() 返回此套接字的输出流。</span></span><br><span class="line"><span class="comment">*       InputStream getInputStream() 返回此套接字的输入流。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建一个客户端对象Socket，构建方法绑定服务器的IP地址和端口号。</span></span><br><span class="line"><span class="comment">*       2. 使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       3. 使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据。</span></span><br><span class="line"><span class="comment">*       4. 使用Socket对象中的方法getInputStream获取网络字节输入流InputStream对象。</span></span><br><span class="line"><span class="comment">*       5. 使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据。</span></span><br><span class="line"><span class="comment">*       6. 释放资源。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   注意：</span></span><br><span class="line"><span class="comment">*       1. 客户端和服务器进行交互，必须使用Socket中提供的网络流，不能自己创建流对象。</span></span><br><span class="line"><span class="comment">*       2. 当我们创建客户端对象Socket的时候，就会去请求服务器和服务器经过三次握手建立连接通路。</span></span><br><span class="line"><span class="comment">*               这时如果服务器没有启动，那么就会抛出异常</span></span><br><span class="line"><span class="comment">*               如果服务器已经启动，就可以进行交互了。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_TCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个客户端对象Socket，构建方法绑定服务器的IP地址和端口号。</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">// 2. 使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 3. 使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据。</span></span><br><span class="line">        os.write(<span class="string">&quot;你好服务器&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 4. 使用Socket对象中的方法getInputStream获取网络字节输入流InputStream对象。</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 5. 使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">// 6. 释放资源。</span></span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Demo02_Server.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   TCP通信的服务器端：接收客户端的请求，读取客户端发送的数据，给客户端返回数据。</span></span><br><span class="line"><span class="comment">*   表示服务器的类：</span></span><br><span class="line"><span class="comment">*       java.net.ServerSocket:此类实现服务器套接字。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       ServerSocket(int port) 创建绑定到指定端口的服务器套接字</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   服务器端必须明确一件事情，必须要知道是哪个客户端请求的服务器。</span></span><br><span class="line"><span class="comment">*   所以使用accept方法获取到请求的客户端对象Socket</span></span><br><span class="line"><span class="comment">*   成员方法：</span></span><br><span class="line"><span class="comment">*       Socket accept() 侦听并接收此套接字的连接。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   服务器端的实现步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建服务器ServerSocket对象和系统指定得端口号。</span></span><br><span class="line"><span class="comment">*       2. 使用ServerSocket对象中的方法accept，获取道请求的客户端对象Socket。</span></span><br><span class="line"><span class="comment">*       3. 使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象。</span></span><br><span class="line"><span class="comment">*       4. 使用InputStream对象中的方法read，读取客户端发送的请求数据。</span></span><br><span class="line"><span class="comment">*       5. 使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       6. 使用OutputStream对象中的方法write，给客户端回写数据。</span></span><br><span class="line"><span class="comment">*       7. 释放资源(Socket,ServerSocket)。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建服务器ServerSocket对象和系统指定得端口号。</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">// 2. 使用ServerSocket对象中的方法accept，获取道请求的客户端对象Socket。</span></span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 3. 使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象。</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 4. 使用InputStream对象中的方法read，读取客户端发送的请求数据。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">// 5. 使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 6. 使用OutputStream对象中的方法write，给客户端回写数据。</span></span><br><span class="line">        os.write(<span class="string">&quot;收到&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 7. 释放资源(Socket,ServerSocket)。</span></span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="实验2-TCP通信实现文件的上传"><a href="#实验2-TCP通信实现文件的上传" class="headerlink" title="实验2: TCP通信实现文件的上传"></a>实验2: TCP通信实现文件的上传</h4><p><strong>原理:</strong> 客户端读取本地的文件，上传至服务器，服务器将上传的文件保存到服务器硬盘上。</p><img src="/2021/12/18/2_1_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1639366205848.png" class=""><p><strong>流程:</strong> </p><ol><li>客户端使用<font color=blue>本地字节输入流</font>，读取要上传的文件。</li><li>客户端使用<font color=green>网络字节输出流</font>，把读取到的文件上传至服务器。</li><li>服务器使用<font color=green>网络字节输入流</font>，读取客户端上传的文件。</li><li>服务器使用<font color=blue>本地字节输出流</font>，把读取到的文件，保存到服务器的硬盘上。</li><li>服务器使用<font color=green>网络字节输出流</font>，给客户端回写“上传成功”。</li><li>客户端使用<font color=green>网络字节输入流</font>，读取服务器回写的数据。</li><li>释放资源。</li></ol><p><strong>注意:</strong> </p><ol><li>客户端和服务器的本地硬盘进行读写，需要使用自己创建的字节流对象(本地流)。</li><li>客户端和服务器进行读写，必须使用Socket中提供的字节流对象(网络流)。</li><li>文件上传的原理，就是文件的复制。明确数据源、数据目的地。</li></ol><p><code>FileUploadClient.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   文件上传案例的客户端：读取本地文件，上传至服务器，读取服务器回写的数据。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   明确：</span></span><br><span class="line"><span class="comment">*       数据源：</span></span><br><span class="line"><span class="comment">*       目的地：服务器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1.创建一个本地字节输入流FileInputStream对象，构造方法中绑定要读取的数据源。</span></span><br><span class="line"><span class="comment">*       2.创建一个客户端Socket对象，构造方法中绑定服务器的IP地址和端口号。</span></span><br><span class="line"><span class="comment">*       3.使用Socket中的方法getOutputStream,获取网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       4.使用本地字节输入流FileInputStream对象中的方法read，读取本地文件。</span></span><br><span class="line"><span class="comment">*       5.使用网络字节输出流OutputStream对象中的方法write，将读取的本地文件的数据上传至服务器。</span></span><br><span class="line"><span class="comment">*       6.使用Socket中的方法getInputStream,获取网络字节输入流InputStream对象.</span></span><br><span class="line"><span class="comment">*       7.使用网络字节输入流InputStream对象中的方法read读取服务回写的数据。</span></span><br><span class="line"><span class="comment">*       8.释放资源（FileInputStream,Socket）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03_FileUploadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建一个本地字节输入流FileInputStream对象，构造方法中绑定要读取的数据源。</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\client_upload\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.创建一个客户端Socket对象，构造方法中绑定服务器的IP地址和端口号。</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 3.使用Socket中的方法getOutputStream,获取网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 4.使用本地字节输入流FileInputStream对象中的方法read，读取本地文件。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 5.使用网络字节输出流OutputStream对象中的方法write，将读取的本地文件的数据上传至服务器。</span></span><br><span class="line">            os.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上传完文件，给服务器写一个结束标记。</span></span><br><span class="line">        <span class="comment">// void shutdownOutput() 禁用此套接字的输出流</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.使用Socket中的方法getInputStream,获取网络字节输入流InputStream对象.</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 7.使用网络字节输入流InputStream对象中的方法read读取服务回写的数据。</span></span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8.释放资源（FileInputStream,Socket）</span></span><br><span class="line">        fis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>FileUploadServer.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   文件上传案例的服务器端：读取本地文件，上传至服务器，读取服务器回写的数据。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   明确：</span></span><br><span class="line"><span class="comment">*       数据源：</span></span><br><span class="line"><span class="comment">*       目的地：服务器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1.创建一个服务器ServerSocket对象，和系统要指定的端口号。</span></span><br><span class="line"><span class="comment">*       2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line"><span class="comment">*       3.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象。</span></span><br><span class="line"><span class="comment">*       4.判断是否存在文件夹(d:\\upload)，不存在则创建。</span></span><br><span class="line"><span class="comment">*       5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"><span class="comment">*       6.使用网络字节输入流InputStream对象中的方法read,读取客户端上传的文件。</span></span><br><span class="line"><span class="comment">*       7.使用本地字节输出流FileOutputStream对象中的方法write,把读取到的文件保存到服务器的硬盘上。</span></span><br><span class="line"><span class="comment">*       8.使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写“上传成功”</span></span><br><span class="line"><span class="comment">*       10.释放资源(FileOutputStream,Socket,ServerSocket)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04_FileUploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建一个服务器ServerSocket对象，和系统要指定的端口号。</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 3.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象。</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 4.判断是否存在文件夹(d:\\upload)，不存在则创建。</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\upload&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(file.exists())) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file+<span class="string">&quot;\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 6.使用网络字节输入流InputStream对象中的方法read,读取客户端上传的文件。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 7.使用本地字节输出流FileOutputStream对象中的方法write,把读取到的文件保存到服务器的硬盘上。</span></span><br><span class="line">            fos.write(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8.使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写“上传成功”</span></span><br><span class="line">        os.write(<span class="string">&quot;上传成功&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 10.释放资源(FileOutputStream,Socket,ServerSocket)</span></span><br><span class="line">        fos.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化<code>FileUploadServer.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   文件上传案例的服务器端：读取本地文件，上传至服务器，读取服务器回写的数据。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   明确：</span></span><br><span class="line"><span class="comment">*       数据源：</span></span><br><span class="line"><span class="comment">*       目的地：服务器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1.创建一个服务器ServerSocket对象，和系统要指定的端口号。</span></span><br><span class="line"><span class="comment">*       2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line"><span class="comment">*       3.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象。</span></span><br><span class="line"><span class="comment">*       4.判断是否存在文件夹(d:\\upload)，不存在则创建。</span></span><br><span class="line"><span class="comment">*       5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"><span class="comment">*       6.使用网络字节输入流InputStream对象中的方法read,读取客户端上传的文件。</span></span><br><span class="line"><span class="comment">*       7.使用本地字节输出流FileOutputStream对象中的方法write,把读取到的文件保存到服务器的硬盘上。</span></span><br><span class="line"><span class="comment">*       8.使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写“上传成功”</span></span><br><span class="line"><span class="comment">*       10.释放资源(FileOutputStream,Socket,ServerSocket)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04_FileUploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建一个服务器ServerSocket对象，和系统要指定的端口号。</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   优化2 让服务器一直处于监听状态</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *   优化3 多线程技术，提升上传效率</span></span><br><span class="line"><span class="comment">            *   有一个文件，开一个线程，完成文件的上传。</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="comment">// 完成文件的上传</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="comment">// 3.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象。</span></span><br><span class="line">                        InputStream is = socket.getInputStream();</span><br><span class="line">                        <span class="comment">// 4.判断是否存在文件夹(d:\\upload)，不存在则创建。</span></span><br><span class="line">                        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\upload&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(!(file.exists())) &#123;</span><br><span class="line">                            file.mkdir();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         *   优化1 文件名问题</span></span><br><span class="line"><span class="comment">                         *   自定义文件命名规则，防止同名的文件被覆盖。</span></span><br><span class="line"><span class="comment">                         *   规则：域名+毫秒值+随机数</span></span><br><span class="line"><span class="comment">                         * */</span></span><br><span class="line">                        String FileName = <span class="string">&quot;fan&quot;</span> + System.currentTimeMillis() + <span class="keyword">new</span> Random().nextInt(<span class="number">999999</span>) + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">                        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file + <span class="string">&quot;\\&quot;</span> + FileName);</span><br><span class="line">                        <span class="comment">// 6.使用网络字节输入流InputStream对象中的方法read,读取客户端上传的文件。</span></span><br><span class="line">                        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">while</span> ((len = is.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="comment">// 7.使用本地字节输出流FileOutputStream对象中的方法write,把读取到的文件保存到服务器的硬盘上。</span></span><br><span class="line">                            fos.write(bytes);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 8.使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象。</span></span><br><span class="line">                        OutputStream os = socket.getOutputStream();</span><br><span class="line">                        <span class="comment">// 9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写“上传成功”</span></span><br><span class="line">                        os.write(<span class="string">&quot;上传成功&quot;</span>.getBytes());</span><br><span class="line">                        <span class="comment">// 10.释放资源(FileOutputStream,Socket,ServerSocket)</span></span><br><span class="line">                        fos.close();</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        System.out.println(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中网络编程相关内容。【服务器端与客户端】</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/12】23_Java_序列化流</title>
    <link href="http://example.com/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/"/>
    <id>http://example.com/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/</id>
    <published>2021-12-18T13:55:04.606Z</published>
    <updated>2021-12-18T13:58:08.776Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h2><img src="/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/1639295964257.png" class="" width="1639295964257"><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a><code>ObjectOutputStream</code></h3><p>对象的<code>序列化流</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo17_ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.ObjectOutputStream extends OutputStream</span></span><br><span class="line"><span class="comment">*   ObjectOutputStream:对象的序列化流</span></span><br><span class="line"><span class="comment">*   作用: 把对象以流的方式写入到文件中保存。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       ObjectOutputStream(OutputStream out) 创建指定写入OutputStream的ObjectOutputStream</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           OutputStream out: 字节输出流</span></span><br><span class="line"><span class="comment">*       特有的成员方法：</span></span><br><span class="line"><span class="comment">*           void writeObject(Object obj) 将指定的对象写入ObjectOutputStream</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建一个ObjectOutputStream对象，构造方法中传递字节输出流。</span></span><br><span class="line"><span class="comment">*       2. 使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中。</span></span><br><span class="line"><span class="comment">*       3. 释放资源</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_ObjectOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        write_person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_person</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个ObjectOutputStream对象，构造方法中传递字节输出流。</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo17_ObjectStream\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 2. 使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中。</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;小美女&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo17_ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   序列化和反序列化的时候，会抛出NotSerializableException没有序列化异常。</span></span><br><span class="line"><span class="comment">*   类通过实现java.io.Serializable接口启用序列化功能。</span></span><br><span class="line"><span class="comment">*   未实现该接口的类将无法使其任何状态序列化或反序列化。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   Serializable接口称为标记接口</span></span><br><span class="line"><span class="comment">*       要实现序列化和反序列化的时候，就会检测类上是否有这个标记。</span></span><br><span class="line"><span class="comment">*       有：进行序列化和反序列化。</span></span><br><span class="line"><span class="comment">*       没有：抛出NotSerializableException没有序列化异常。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>序列化结果：</p><img src="/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/1639299515522.png" class="" width="1639299515522"><hr><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a><code>ObjectInputStream</code></h3><p>对象的<code>反序列化流</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo17_ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.ObjectInputStream extends InputStream</span></span><br><span class="line"><span class="comment">*   ObjectInputStream:对象的反序列化流</span></span><br><span class="line"><span class="comment">*   作用：把文件中保存的对象，以流的方式读取出来并使用。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       ObjectInputStream(InputStream in) 创建从指定InputStream读取的ObjectInputStream.</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           InputStream in 字节输入流</span></span><br><span class="line"><span class="comment">*   特有的成员方法:</span></span><br><span class="line"><span class="comment">*       Object readObject() 从ObjectInputStream读取对象。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建ObjectInputStream对象，构造方法中传递字节输入流。</span></span><br><span class="line"><span class="comment">*       2. 使用ObjectInputStream对象方法中的readObject读取保存对象的文件。</span></span><br><span class="line"><span class="comment">*       3. 释放资源</span></span><br><span class="line"><span class="comment">*       4. 使用读取出的对象（打印）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_ObjectInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        person_read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">person_read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建ObjectInputStream对象，构造方法中传递字节输入流。</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo17_ObjectStream\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 2. 使用ObjectInputStream对象方法中的readObject读取保存对象的文件。</span></span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   readObject方法声明抛出异常，ClassNotFoundException(class文件找不到异常)</span></span><br><span class="line"><span class="comment">        *   当不存在对象的class文件时，抛出异常。</span></span><br><span class="line"><span class="comment">        *   反序列化的前提：</span></span><br><span class="line"><span class="comment">        *       1. 类必须实现Serializable.</span></span><br><span class="line"><span class="comment">        *       2. 必须存在类对应的class文件。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="comment">// 4. 使用读取出的对象（打印）</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反序列化结果：</p><img src="/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/1639299599991.png" class="" width="1639299599991"><p><strong>transient关键字：瞬态关键字</strong></p><p>被序列化的都是对象。被transient修饰成员变量，不能被序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure><hr><p><code>InvalidClassException</code><strong>异常</strong></p><p><code>.java</code>文件编译成<code>.class</code>文件后，如果类进行序列化，则会生成一个序列化编号。</p><p>如果<code>.java</code>文件在编译后进行修改，则其再编译时，序列号会发生变化。再对该类进行反序列化时，会出现<code>InvalidClassException</code> 异常。（两次序列号判断不一致）</p><p><strong>解决方案：</strong></p><p>手动给类添加一个序列号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可序列化类可以通过声明名为&quot;serialVersionUID&quot;的字段，(该字段必须是静态的(static)、最终的(final)的long型字段)显式声明其自己的serialVersionUID</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> seriaVersionUID = <span class="number">42L</span>;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中IO流操作相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
