<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Annoy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-17T13:35:07.972Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Annoy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【21/11/27】Java开发基础知识点(二)</title>
    <link href="http://example.com/2021/12/17/2_%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2021/12/17/2_%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-12-17T13:18:50.160Z</published>
    <updated>2021-12-17T13:35:07.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java知识点（二）"><a href="#Java知识点（二）" class="headerlink" title="Java知识点（二）"></a>Java知识点（二）</h1><p><strong>1 包装类型</strong></p><p> 基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。</p><hr><p><strong>2 缓存池：</strong></p><p>（1）new Integer(123)</p><p>每次都会<strong>新建一个对象</strong>。</p><p>（2）Integer.valueOf(123)</p><p>会<strong>使用缓存池中的对象</strong>，多次调用会取得同一个对象的引用。  </p><p>先<strong>判断值是否在缓存池中</strong>，如果在的话就直接返回缓存池的内容。</p><p> Java 8 中，Integer <strong>缓存池的大小</strong>默认为 -128~127 。</p><hr><p><strong>3  String：</strong></p><p>String被声明成<strong>final</strong>，因此它<strong>不可被继承</strong>。</p><p>内部<strong>使用char数组存储数据</strong>，该数组被声明成final，意味着value数组初始化之后就不能引用其他数组。并且String内部没有改变value数组的方法，可以保证String不可变。</p><p><strong>好处：</strong></p><p>​    (1) 可以用来缓存hash值</p><p>​        例如用String用作HashMap的key.</p><p>​    (2) String Pool</p><p>​        如果一个String对象已经被创建过了，就会从String Pool中取得引用。</p><p>​    (3)安全性</p><p>​        String经常作为参数，可以保证参数不变。</p><p>​    (4)线程安全</p><p>​        String的不变性可以在多个线程中安全地使用。</p><hr><p><strong>4 String【不可变】, StringBuffer and StringBuilder【可变】：</strong></p><p>(1)线程安全问题</p><p>String不可变【线程安全】</p><p>StringBuilder【不是线程安全的】</p><p>StringBuffer【线程安全，内部使用 <strong>synchronized</strong> 进行同步 】</p><hr><p><strong>5 String.intern()</strong></p><p> 使用 String.intern() 可以<strong>保证相同内容的字符串变量引用同一的内存对象</strong>。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用。</span></span><br><span class="line"><span class="comment">// intern() 首先把 s1 引用的对象放到 String Pool(字符串常量池)中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);           <span class="comment">// false</span></span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">System.out.println(s1.intern() == s3);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是采用 &quot;bbb&quot; 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Pool 中。</span></span><br><span class="line">String s4 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">String s5 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">System.out.println(s4 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><p><strong>6 参数传递</strong></p><p> Java 的参数是以值传递的形式传入方法中，而不是引用传递。 </p>]]></content>
    
    
    <summary type="html">包装、缓存池、Sting...</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/27】Java面向对象知识碎片</title>
    <link href="http://example.com/2021/12/17/1_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2021/12/17/1_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-12-17T13:02:40.239Z</published>
    <updated>2021-12-17T13:18:10.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>(1) 面向过程：实现功能的时候，要详细处理每一个细节。</p><p>(2) 面向对象：实现功能的时候，不关心具体的步骤，而是找一个具有该功能的人来帮我做事。</p><img src="/2021/12/17/1_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1637415427333.png" class="" title="img"><hr><h3 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>将细节信息隐藏起来，对于外界不可见。</p><p>利用抽象数据类型将<strong>数据和基于数据的操作封装</strong>在一起，使其构成一个不可分割的独立实体。 </p><p>保留一些<strong>对外接口</strong>使之与外部发生联系。 可以通过对象对外提供的接口来访问该对象。 </p><p><strong>优点：</strong></p><ol><li>减小耦合</li><li>减轻维护的负担</li><li>有效地调节性能</li><li>提高软件可重用性</li><li>降低构建大型系统的风险</li></ol><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承是多态的前提，没有继承就没有多态。</p><p>解决的主要问题：<strong>共性抽取</strong>。</p><img src="/2021/12/17/1_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1637979780869.png" class="" title="img"><p>继承的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类的格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 父类名称 </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子类的格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类名称 <span class="keyword">extends</span> 父类名称 </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在父子类的继承关系中，创建子类对象，访问成员方法的规则：</p><p><strong>创建的对象是谁，就优先用谁，如果没有则向上找。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">        <span class="comment">// num: 局部变量，30</span></span><br><span class="line">        <span class="comment">// this.num: 成员变量，20</span></span><br><span class="line">        <span class="comment">// super.num: 父类的成员变量，10</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承应该遵循<strong>里氏替换原则</strong>，子类对象必须能够替换掉所有父类对象。</p><p><strong>重写(override)</strong></p><p>概念：在继承关系中，方法的名称一样，参数列表也一样。</p><p>重写(Override): 方法的名称一样，参数列表【也一样】。覆盖、覆写。</p><p>重载(Overload)：方法的名称一样，参数列表【不一样】。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测重写是否正确,一种检测手段。</span></span><br><span class="line"><span class="meta">@Override</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><p>保证父与子之间的方法名称相同，参数列表也相同。</p></li><li><p>子类方法的返回值必须【小于等于】父类方法的返回值范围。</p><p>java.lang.Object类是所有类的公共最高父类，java.lang.String是Object的子类。</p></li><li><p>子类方法的权限必须【大于等于】父类方法的权限修饰符。</p><p>public &gt; protected &gt; (default) &gt; private</p><p>(default)是留空不写。</p></li></ol><p><strong>设计原则</strong>：</p><p>对于已经使用的类，尽量不要进行修改。推荐定义一个新的类，来重复利用其中的共性内容，并且添加改动的新内容。</p><p><strong>构造方法：</strong></p><ol><li>子类构造方法中有一个默认隐含的super()调用，一定是先调用的父类构造，后执行的子类构造。</li><li>子类构造可以通过super关键字来调用父类重载构造。</li><li>super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。</li></ol><p><font color='red'>Java继承的特点</font></p><ol><li><p>Java语言是<strong>单继承</strong>的。</p><p>一个类的直接父类只能有唯一一个。</p></li><li><p>Java语言可以<strong>多级继承</strong>。</p><p>一个子类的父类，也可以有父类。</p></li><li><p>一个子类的直接父类是唯一的，但是一个父类可以拥有多个子类。</p></li></ol><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p> 多态分为<strong>编译时多态</strong>【 方法的重载 】和<strong>运行时多态</strong>【 程序中定义的对象引用所指向的具体类型在运行期间才确定 。包括<strong>继承、重写、向上转型</strong>】。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><ul><li><strong>泛化关系（Generalization）</strong>：用来描述<strong>继承关系</strong>。</li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png" alt="img"> </p><ul><li><strong>实现关系（Realization）</strong>：用来实现一个<strong>接口</strong>。</li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILK8IatCoQn.png" alt="img"> </p><ul><li><strong>聚合关系（Aggregation）</strong>： 表示<strong>整体由部分组成</strong>，但是整体和部分<strong>不是强依赖</strong>的，整体不存在了部分还是会存在。 </li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILLmJ4ylIar.png" alt="img"> </p><ul><li><strong>组合关系（Composition）</strong>： 组合中整体和部分是<strong>强依赖</strong>的，整体不存在了部分也不存在了。 </li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILLmpiyjo2_.png" alt="img"> </p><ul><li><strong>关联关系（Association）</strong>：表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILLmB2xEJyv.png" alt="img"> （1对多的关系）</p><ul><li><strong>依赖关系（Dependency）</strong></li></ul><p> 依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式: </p><ul><li>A 类是 B 类中的(某中方法的)局部变量；</li><li>A 类是 B 类方法当中的一个参数；</li><li>A 类向 B 类发送消息，从而影响 B 类发生变化；</li></ul><p> <img src="https://pdai.tech/_images/pics/LOun2W9134NxVugmbJPp15d4LalxC4O.png" alt="img"> </p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>成员变量【属性】: 直接定义在类当中，在方法外面。</p><p>成员方法【行为】: 成员方法不要写static关键字。</p><p><strong>通常情况下，一个类不能直接使用，需要根据类创建一个对象，才能使用。</strong></p><ol><li>导包：指出需要使用的类，在什么位置。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名称.类名称;</span><br><span class="line"><span class="comment">// 对于和当前类同属一个包的情况，可以省略导包语句不写。</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建，格式:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名 = <span class="keyword">new</span> 类名称();</span><br><span class="line"><span class="comment">// Student stu = new Student();</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用，分两种情况：</p><p>(1) 使用成员变量:  对象名.成员变量名</p><p>(2) 使用成员方法: 对象名.成员方法名(参数)</p><p>(想用谁就用“对象名.谁”。)</p></li></ol><p>当一个对象作为参数，传递到方法当中时，实际上传递进去的是<strong>对象的地址值</strong>。</p><h4 id="局部变量与成员变量"><a href="#局部变量与成员变量" class="headerlink" title="局部变量与成员变量"></a>局部变量与成员变量</h4><ol><li><p>定义的位置不同【重点】</p><p>(1) 局部变量: 在方法的内部。</p><p>(2) 成员变量: 在方法的外部，直接写在类当中。</p></li><li><p>作用范围不同【重点】</p><p>(1) 局部变量: 在方法中才能使用，在方法外不能使用。</p><p>(2) 成员变量: 整个类都能使用。</p></li><li><p>默认值不一样【重点】</p><p>(1) 局部变量: 没有默认值，使用时必须手动赋值。</p><p>(2) 成员变量: 如果没有赋值，就会有默认值，规则与数组一样。</p></li><li><p>内存的位置不同</p><p>(1) 局部变量: 位于栈内存。</p><p>(2) 成员变量: 位于堆内存。</p></li><li><p>生命周期不同</p><p>(1) 局部变量: 随着方法进栈而诞生，随着方法出栈而消失。</p><p>(2) 成员变量: 随着对象创建而诞生，随着对象被垃圾回收而消失。</p></li></ol><h4 id="private关键字使用"><a href="#private关键字使用" class="headerlink" title="private关键字使用"></a>private关键字使用</h4><p>间接访问private成员变量，就是定义一对<strong>Getter/Setter方法</strong>。</p><p>必须叫setXxx和getXxx命名规则：</p><p>(1) 对于Getter: 不能有参数，返回值类型和成员变量对应。</p><p>(2) 对于Setter: 不能有返回值，参数类型和成员变量对应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Persion</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">// Setter    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        age = num;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Getter    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>对于基本数据类型boolean值，Getter方法一定要写成isXxx的形式，而setXxx规则不变。</li></ol><h4 id="this关键字使用"><a href="#this关键字使用" class="headerlink" title="this关键字使用"></a>this关键字使用</h4><p>当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量。</p><p>如果需要访问本类中的成员变量，需要使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.成员变量</span><br></pre></td></tr></table></figure><p>通过谁调用的方法，谁就是this。</p><hr><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>专门用来创建对象的方法，通过关键字new创建对象时，就是在调用构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">public</span> 类名(参数类型 参数名称) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li><p>构造方法名称必须和所在类的名称一致，大小写都要一致。</p></li><li><p>构造方法不要写返回值类型，void都不写。</p></li><li><p>构造方法没有return。</p></li></ol><hr><h3 id="一个标准的类"><a href="#一个标准的类" class="headerlink" title="一个标准的类"></a>一个标准的类</h3><p>包括四个组成部分：</p><ol><li>所有的成员变量都要使用private关键字修饰。</li><li>为每一个成员变量编写一对Getter/Setter方法。</li><li>编写一个无参数的构造方法。</li><li>编写一个全参数的构造方法。</li></ol><hr><h3 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h3><p>抽象方法：加上abstract关键字，然后去掉大括号直接分号结束。</p><p>抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 定义一个普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如何使用抽象类和抽象方法：</strong></p><ol><li><p>不能直接创建new抽象类对象。</p></li><li><p>必须用一个子类来继承抽象父类。</p></li><li><p>子类必须覆盖重写抽象父类中的<strong>所有的抽象方法</strong>。</p><p>覆盖重写(实现)：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</p></li><li><p>创建子类对象进行使用。</p></li></ol>]]></content>
    
    
    <summary type="html">Java面向对象的相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/20】Java开发基础知识点(一)</title>
    <link href="http://example.com/2021/12/17/0_%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/12/17/0_%E5%9F%BA%E7%A1%80/</id>
    <published>2021-12-17T12:28:46.315Z</published>
    <updated>2021-12-17T12:42:16.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><strong>基本数据类型</strong></p><p>​    “四类八种”</p><p>​    整数型: byte short int long </p><p>​    浮点型: float double</p><p>​    字符型: char</p><p>​    布尔型: boolean</p><p><strong>引用数据类型</strong></p><p>​    字符串、数组、类、接口、Lambda</p><p><strong>注意事项：</strong></p><ol><li><p>字符串不是基本类型，而是引用类型。</p></li><li><p>浮点数是一个近似值，不是精确的值。</p></li><li><p>数据范围与字节数不一定相关。float是4字节，long是8字节。</p></li><li><p>浮点数默认是double类型，若想使用float类型，需要在后面加上F。</p><p>整数默认是int类型，若想使用long类型，需要在后面加上L。</p></li></ol><hr><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>程序运行期间可以改变的量。</p><p><strong>创建变量</strong>的格式：数据类型 变量名称 = 数据值；</p><p><strong>注意事项：</strong></p><ol><li>创建多个变量时，变量之间的名称不可以重复。</li><li>对于float和long类型来说，字幕后缀的F和L不能去掉。</li><li>使用byte和short类型的变量，赋值不能超出左侧类型的范围。</li><li>没有进行赋值的变量，不能直接使用。</li><li>变量要在作用域的范围内使用。</li><li>可以通过一个语句定义多个变量，但不推荐使用。</li></ol><hr><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>数据类型不同时，会发生数据类型转换。</p><p><strong>自动类型转换(隐式)</strong></p><ol><li>代码不需要特殊处理，自动完成。</li><li>规则：数据范围从小到大。</li></ol><p><strong>强制类型转换(显式)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 强制类型转换</span></span><br><span class="line"><span class="comment">// 范围小的类型 范围小的变量名 = （范围小的类型） 原本范围大的数据</span></span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>) <span class="number">100L</span>;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li>强制类型转换容易造成数据<strong>精度损失、数据溢出</strong>。 </li><li>byte/short/char这三种类型都可以进行数学运算。</li><li>byte/short/char这三种类型进行数学运算时，首先将数据类型<strong>转换成int</strong>，再进行计算。</li><li>boolean类型不能进行数据类型转换。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> zifu1 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println(zifu1 + <span class="number">1</span>); <span class="comment">// 66</span></span><br><span class="line"><span class="comment">// 计算机底层会用数字(二进制)来代表字符A(65)</span></span><br><span class="line"><span class="comment">// char类型进行数据运算，字符就会按照规则翻译成一个数字。</span></span><br></pre></td></tr></table></figure><p>ASCII表:美国信息交换标准代码</p><p>Unicode表:万国表</p><p>48-‘0’;65-‘A’;98-‘a’</p><hr><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>运算符：进行特定操作的符号，如’+’。</p><p>表达式：用运算符连接起来的式子叫表达式，如‘20+5’</p><p>四则运算、取模(%)</p><p>四则运算中的“+”有常见的三种用法：</p><ol><li>对于数值来说，就是加法。</li><li>对于字符char类型来说，在计算之前，先将char类型转变成int类型(依据ASCII表)，再进行计算。</li><li>对于字符串String来说，加号代表字符串连接操作。</li></ol><p>自增运算符：++ 自减运算符：–</p><p>使用格式：写在变量之前或是变量之后。</p><p>使用方式：</p><ol><li>单独使用：不和其他操作混合，自己独立成为一个步骤。</li><li>混合使用：和其他操作混合使用，如赋值或者打印。</li></ol><p>使用区别：</p><ol><li>单独使用时，前++和后++没有区别。</li><li>在混合的时候，有【区别】<ol><li>前++：变量立即加1，拿着结果使用。</li><li>后++：先使用变量原先的值，后再让变量+1。</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单独使用,二者没有区别。</span></span><br><span class="line">num++;</span><br><span class="line">++num;</span><br><span class="line"><span class="comment">// 混合使用</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">System.out.println(++num);<span class="comment">//先加后用</span></span><br><span class="line">System.out.println(num++);<span class="comment">//先用后加</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>运算过程中有不同的数据类型，结果是数据类型范围大的那种。</li></ol><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>(1)基本赋值运算符</p><p>就是一个“=”，代表将右侧数据传给左侧的变量。</p><p>(2)复合赋值运算符</p><p>+=、-=、*=、/=、%=</p><p><strong>注意事项</strong>：</p><ol><li>只有变量才能使用赋值运算符，常量不能进行赋值。</li><li>复合赋值运算符其中隐含有强制类型转换。</li></ol><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>==、&lt;、&gt;、&lt;=、&gt;=、!=</p><p><strong>注意事项</strong>：</p><ol><li>比较运算符的结果是boolean类型的，成立为true,不成立为false。</li><li>比较运算符不能连用。</li></ol><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>与(&amp;&amp;)：全都是true，才是true；否则是false。</p><p>或(||)：至少有一个是true，就是true；全都是false，才是false。</p><p>非(!)：取反。</p><p><strong>短路效果</strong>：“&amp;&amp;”和“||”,根据左边已经可以判断得到最终结果，那么右边的代码将不再执行，可以节省一定的性能。</p><p><strong>注意事项</strong>：</p><ol><li><p>逻辑运算符只能作用于boolean值。</p></li><li><p>与、或需要左右各自有一个boolean值，但是取反(非)只有一个唯一的boolean值即可。</p></li><li><p>与、或如果有多个条件，可以连续写。</p><p>两个条件：条件1 &amp;&amp; 条件2</p><p>三个条件：条件1 &amp;&amp; 条件2 &amp;&amp;  条件3</p></li></ol><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>一元运算符：只需要一个数据就可以进行操作的运算符。如取反！、自增++、自减–</p><p>二元运算符：需要两个数据才可以进行操作的运算符。例如：加法+、赋值=</p><p>三元运算符：需要三个数据才能进行操作的运算符。</p><p><strong>格式</strong>：</p><p>数据类型 变量名称 = 条件判断 ？ 表达式A ： 表达式B</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> max = a &gt; b ? a : b;</span><br></pre></td></tr></table></figure><p>首先判断条件是否成立：</p><p>如果成立为true，那么表达式A的值赋值给左侧的变量；</p><p>如果不成立为false，那么将表达式B的值赋值给左侧的变量；</p><p><strong>注意事项</strong>：</p><ol><li>必须同时保证表达式A和表达式B都符合左侧的数据类型的要求。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误形式：</span></span><br><span class="line"><span class="keyword">int</span> result = <span class="number">3</span> &gt; <span class="number">4</span> ? <span class="number">2.5</span> : <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>三元运算符的结果必须被使用。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(a &gt; b ? a : b);<span class="comment">//正确写法</span></span><br><span class="line"><span class="comment">// a &gt; b ? a : b;//错误写法！</span></span><br></pre></td></tr></table></figure><hr><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p> 定义方法的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名称()&#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法的完整形式：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名称(参数类型 参数名称， ...) &#123;</span></span><br><span class="line"><span class="comment">方法体</span></span><br><span class="line"><span class="comment">return 返回值;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(1)修饰符:现阶段的固定写法,public static</span></span><br><span class="line"><span class="comment">(2)返回值类型:方法最终产生的数据结果是什么类型的。</span></span><br><span class="line"><span class="comment">(3)方法名称:方法的名字，规则同变量一样。小驼峰式命名。</span></span><br><span class="line"><span class="comment">(4)参数类型:进入方法的数据是什么类型。</span></span><br><span class="line"><span class="comment">(5)参数名称:进入方法的数据对应的变量名称。多个参数，用逗号隔开。</span></span><br><span class="line"><span class="comment">(6)方法体:方法的功能。</span></span><br><span class="line"><span class="comment">(7)return:两个作用。①停止当前的方法。②将后面的结果数据返回值还给调用处。</span></span><br><span class="line"><span class="comment">(8)返回值:方法执行后的最终产生的数据结果。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：return后面的“返回值”，必须和方法名称前面的“返回值类型”保持对应。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>方法名称的命名规则和变量一样，使用小驼峰。</p><p>方法体:大括号内可以包含任意条语句。</p><p><strong>注意事项</strong>：</p><ol><li>方法定义的先后顺序无所谓。</li><li>方法不能嵌套定义。</li><li>方法定义完成后不会执行。需要进行方法的调用。</li><li>如果方法有返回值，那么必须写上“return 返回值;”，不能没有。</li><li>return后面的返回值数据，必须和方法的返回值类型对应起来。</li><li>对于void没有返回值的方法，布恩那个写return后面的返回值，只能写return自己。</li><li>void方法中的return可以不写。</li><li>一个方法中可以具有多个return语句，但是只能保证一个会被执行到。</li></ol><p><strong>方法调用</strong>：</p><ol><li>单独调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名称();</span><br></pre></td></tr></table></figure><ol start="2"><li>打印调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(方法名称(参数)</span><br></pre></td></tr></table></figure><ol start="3"><li>赋值调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名称 = 方法名称(参数)</span><br></pre></td></tr></table></figure><p><strong>方法的重载(overload)</strong></p><p>多个方法的名称一样，但是<strong>参数列表不一样</strong>。</p><p>只需要记住一个方法名称，就可以实现类似的多个功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法重载与下列因素<strong>相关</strong>:</p><ol><li>参数的个数不同。</li><li>参数的类型不同。</li><li>参数的多类型顺序不同。</li></ol><p>与下列因素<strong>无关</strong>:</p><ol><li>与参数名称无关。</li><li>与方法的返回值类型无关。</li></ol><hr><h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><p><strong>“编译器的常量优化”</strong></p><p>在给变量进行赋值的时候，如果右侧表达式当中都是常量，没有任何变量，编译器的javac会将若干个常量表达式计算得到结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> result = <span class="number">5</span> + <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>一旦表达式中存在变量，不能进行这种优化。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">short</span> result = <span class="number">5</span> + a + <span class="number">8</span>;<span class="comment">// 报错！</span></span><br></pre></td></tr></table></figure><hr><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><p>按照代码的顺序进行执行。</p><h4 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h4><p>(1) if语句</p><p>(2) if…else语句:二者选其一。</p><p>(3) if…else if…else:n者选其一。</p><h4 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h4><p>switch语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line"> <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line"> 语句体;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line"> 语句体;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> 语句体n+<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li><p>多个case后面的数据值不能重复。</p></li><li><p>switch后面的小括号当中只能是下列数据类型：</p><p>基本数据类型: byte/short/int/char</p><p>引用数据类型: String字符串、enum枚举</p></li><li><p>switch语句的顺序可以灵活调整。</p></li></ol><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>(1) for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始表达式;布尔表达式;步进表达式) &#123;</span><br><span class="line">循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环结构基本组成部分：</p><ol><li>初始化语句：循环开始最初执行，只执行一次。</li><li>条件判断：如果成立，继续执行循环；不成立，退出循环。</li><li>循环体：重复要做的事情内容，若干行语句。</li><li>步进语句：每次循环需要进行的扫尾工作。</li></ol><p>(2) while循环</p><p>标准格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件判断) &#123;</span><br><span class="line">循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span> (条件判断) &#123;</span><br><span class="line">循环体;</span><br><span class="line">步进表达式;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) do…while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体; <span class="comment">// 第一次无条件执行</span></span><br><span class="line">    步进语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (条件判断);<span class="comment">// 末尾有一个&quot;;&quot;</span></span><br></pre></td></tr></table></figure><img src="/2021/12/17/0_%E5%9F%BA%E7%A1%80/1637218570540.png" class="" title="label"><p><strong>三种循环区别</strong>：</p><ol><li>如果条件判断没有满足过，那么for循环和while循环将执行0次，do-while循环会至少执行一次。</li><li>for循环的变量在小括号内定义，只能在循环内部使用。while和do-while初始化语句在外面定义，所以出循环后还可以继续使用。</li></ol><h4 id="break语句和continue语句"><a href="#break语句和continue语句" class="headerlink" title="break语句和continue语句"></a>break语句和continue语句</h4><p>(1) break语句的使用</p><ol><li>在switch语句中使用，一旦执行，整个switch语句立即结束。</li><li>在循环语句中使用，一旦执行，整个循环语句立刻结束。打断循环。</li></ol><p>(2) continue语句的使用</p><p>一旦执行，<strong>立即跳过当前循环剩余内容</strong>，马上开始下一次循环。</p><hr><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><p>快捷键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alt + enter <span class="comment">// 导入包，自动修正代码</span></span><br><span class="line">ctrl + y <span class="comment">// 删除行</span></span><br><span class="line">ctrl + d <span class="comment">// 复制行</span></span><br><span class="line">ctrl + alt + l <span class="comment">// 自动对齐，格式化代码</span></span><br><span class="line">ctrl + / <span class="comment">// 单行注释</span></span><br><span class="line">ctrl + shift + / <span class="comment">// 多行注释</span></span><br><span class="line">alt + ins <span class="comment">// 自动生成代码，toString,get,set方法</span></span><br><span class="line">alt + shift + 上下箭头 <span class="comment">// 移动当前代码行</span></span><br><span class="line">shift + F6 <span class="comment">// 替换所有的选中</span></span><br></pre></td></tr></table></figure><p>快捷循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> fori</span><br></pre></td></tr></table></figure><hr><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是一种容器，可以同时存储多个数据值。</p><p>数组的特点:</p><ol><li>数组是一种引用数据类型。</li><li>数组当中的多个数据，类型必须统一。</li><li>数组的长度在程序运行期间不能被改变。</li></ol><p>数组的初始化:</p><ol><li>动态初始化(指定长度)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名称 = <span class="keyword">new</span> 数据类型[数组长度]</span><br></pre></td></tr></table></figure><p>​    使用动态初始化数组的时候，其中元素将自动拥有一个默认值。规则如下</p><p>​        (1) 整型(int): 0</p><p>​        (2) 浮点型(float): 0.0</p><p>​        (3) 字符类型(char): ‘\u0000’</p><p>​        (4) 布尔类型(boolean): false</p><p>​        (5) 引用类型: null</p><ol start="2"><li>静态初始化(指定内容)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名称 = <span class="keyword">new</span> 数据类型[] &#123;元素<span class="number">1</span>, 元素<span class="number">2</span>, ...&#125;</span><br><span class="line"><span class="keyword">int</span>[] arrayA = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">5</span>, <span class="number">15</span>, <span class="number">20</span>&#125;;</span><br></pre></td></tr></table></figure><p>访问数组的值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名称[索引值] <span class="comment">// 索引值从0开始，一直到数组长度-1</span></span><br></pre></td></tr></table></figure><p>获取数组的长度:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组名称.length <span class="comment">// 将得到数组的长度(int)</span></span><br><span class="line"><span class="comment">// 长度定义后，在运行期间没法改变。</span></span><br></pre></td></tr></table></figure><p>数组作为方法参数：</p><p>当调用方法的时候，向方法的小括号进行传参数，传递进去的其实是<strong>数组的地址值</strong>。</p><p>注意:</p><ol><li><p>初始化都可以拆成两个部分。</p></li><li><p>如果不确定数组中的具体内容，使用动态初始化；已经确定了具体的内容，使用静态初始化。</p></li><li><p>直接打印数组名称，得到的是数组对应的<strong>内存地址哈希值</strong>。</p></li><li><p>数组必须进行new初始化才能使用其中的元素。如果只是赋值了null,没有new创建，将会发生<strong>空指针异常</strong>。</p></li></ol><hr><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存划分为5个部分：</p><ol><li><p>栈(stack): 存放的都是方法中的局部变量。<strong>方法的运行一定在栈之中。</strong></p><p>​    局部变量：方法的参数，或者是方法{}内部的变量。</p><p>​    作用域：一旦超出作用域，立即从栈内存当中消失。</p></li><li><p><strong>堆(Heap): 凡是new出来的东西，都在堆之中。</strong></p><p>​    堆内存里面的东西都有一个地址值：16进制</p><p>​    堆内存里面的数据，都有默认值。[同初始化的默认值]</p></li><li><p>方法区(Method Area)：存储.class相关信息，包含方法的信息。</p></li></ol><ol start="4"><li>本地方法栈(Native Method Stack)：与操作系统有关。</li><li>寄存器(pc Register)：与CPU有关。</li></ol><img src="/2021/12/17/0_%E5%9F%BA%E7%A1%80/1637378335521.png" class="" title="label">]]></content>
    
    
    <summary type="html">包括常量、变量、运算符、方法等一些基础知识点</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/17】Git配置个人网站时一些操作记录</title>
    <link href="http://example.com/2021/12/17/1_git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/12/17/1_git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</id>
    <published>2021-12-17T03:41:59.980Z</published>
    <updated>2021-12-17T12:44:44.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git相关操作"><a href="#Git相关操作" class="headerlink" title="Git相关操作"></a>Git相关操作</h2><p>1.<code>clone</code> 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:Annoy0514/test.git // ssh的地址</span><br></pre></td></tr></table></figure><p>2.<strong>查看仓库状态</strong>,检查远程仓库跟本地仓库内容是否一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p>3.本地仓库<strong>添加新内容</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add 添加的文件名 // 将文件添加到【临时缓冲区】</span><br><span class="line">$ git commit -m <span class="string">&quot;提交的信息&quot;</span>// 提交信息到本地仓库</span><br></pre></td></tr></table></figure><p>4.查看仓库的<strong>提交日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> // 查看仓库提交日志</span><br></pre></td></tr></table></figure><p>5.再输入<code>git status</code> 查看<strong>仓库状态</strong></p><p>6.输入<code>git push origin master</code> 将<strong>本地仓库提交到远程仓库</strong>,<code>origin</code> 是远程主机的名字。</p><p><strong>7.<code>Hexo</code> 主题更换语言</strong></p><p>打开站点配置文件： 站点根目录/_config.yml</p><img src="/2021/12/17/1_git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/1639736037457.png" class="" title="label"><img src="/2021/12/17/1_git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/1639736116629.png" class="" title="label"><p>搜索到language属性，将属性值进行修改。【en/zh-CN】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><p>然后重新打包部署。</p><p><strong>8.更换顶部背景</strong></p><p>找到butterfly配置文件_config.yml中的：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">&#x27;linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="hexo-三部曲"><a href="#hexo-三部曲" class="headerlink" title="hexo 三部曲"></a><code>hexo </code>三部曲</h2><p>设置主题后需要写的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用git配置个人网站的一些操作总结</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/12/16/hello-world/"/>
    <id>http://example.com/2021/12/16/hello-world/</id>
    <published>2021-12-16T11:21:12.138Z</published>
    <updated>2021-12-17T12:43:23.399Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
