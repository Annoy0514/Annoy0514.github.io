<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Annoy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-24T06:40:39.634Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Annoy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【22/01/22】SpringBoot学习笔记(三)</title>
    <link href="http://example.com/2022/02/20/SpringBoot%E7%AC%94%E8%AE%B0-3/"/>
    <id>http://example.com/2022/02/20/SpringBoot%E7%AC%94%E8%AE%B0-3/</id>
    <published>2022-02-20T03:26:39.000Z</published>
    <updated>2022-02-24T06:40:39.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot学习笔记-三"><a href="#SpringBoot学习笔记-三" class="headerlink" title="SpringBoot学习笔记(三)"></a>SpringBoot学习笔记(三)</h2><h3 id="1-简单功能分析"><a href="#1-简单功能分析" class="headerlink" title="1 简单功能分析"></a>1 简单功能分析</h3><h4 id="1-1-静态资源访问"><a href="#1-1-静态资源访问" class="headerlink" title="1.1 静态资源访问"></a>1.1 静态资源访问</h4><p><strong>(1) 静态资源目录</strong></p><p>​    静态资源放在类路径下：<code>/static</code>、<code>/public</code>、<code>/resource</code> 或者 <code>/META-INF/resources</code>。</p><p>​    <strong>访问规则</strong>：当前项目根路径/ + 静态资源名</p><p>​    <strong>访问原理</strong>： 静态映射/**。</p><p>​    <strong>处理流程</strong>： 请求进入，①首先查找Controller中是否可以处理。②不能处理的所有请求又都交给静态资源处理器。③静态资源找不到，则返回404。</p><p>​    <strong>修改静态资源路径</strong>：</p><p>​    默认无前缀，修改访问前缀：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure><p>​    该路径为：当前项目 + static-path-pattern + 静态资源名 ==&gt; 静态资源文件夹下查找</p><p>​    <strong>测试结果</strong>：</p><p>​    <img src="/2022/02/20/SpringBoot%E7%AC%94%E8%AE%B0-3/image-20220220113938578.png" class="" title="image-20220220113938578"></p><hr><h4 id="1-2-欢迎页支持"><a href="#1-2-欢迎页支持" class="headerlink" title="1.2 欢迎页支持"></a>1.2 欢迎页支持</h4><p>静态资源路径下index.html</p><ul><li>可以配置静态资源路径。</li><li>不可以配置静态资源访问前缀(会导致资源无法访问到)。</li><li>controller可以处理/index.</li></ul><hr><h4 id="1-3-静态资源配置原理"><a href="#1-3-静态资源配置原理" class="headerlink" title="1.3 静态资源配置原理"></a>1.3 静态资源配置原理</h4><ul><li>SpringBoot 启动默认加载 <code>xxxAutoConfiguration</code> 类(自动配置类)</li><li>SpringMVC 功能自动配置类为<code>WebMvcAutoConfiguration</code></li></ul><hr><h4 id="1-4-请求处理-Rest映射"><a href="#1-4-请求处理-Rest映射" class="headerlink" title="1.4 请求处理(Rest映射)"></a>1.4 请求处理(Rest映射)</h4><p>使用HTTP请求方式动词对资源进行操作。</p><ul><li><p>以前： <em>/getUser</em>  <em>获取用户</em>    <em>/deleteUser</em> <em>删除用户</em>   <em>/editUser</em>  <em>修改用户</em>      <em>/saveUser</em> <em>保存用户</em></p></li><li><p><strong>Rest风格</strong>： /user <em>GET-获取用户</em>    <em>DELETE-删除用户</em>     <em>PUT-修改用户</em>      <em>POST-保存用户</em> </p></li><li><p>核心Filter: <strong>HiddenHttpMethodFilter</strong></p></li><li><p><strong>使用注解</strong>：</p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li></ul></li><li><p>使用方法：</p><ul><li><p>开启表单Rest功能</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure></li><li><p>表单属性method=post， 隐藏域 <strong>_method</strong> = put或者delete。【get和post无需隐藏】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT提交&quot;</span><span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Rest原理解析</strong></p><p>表单提交，需要使用REST的时候</p><ul><li>表单提交会带上 <code>_method=PUT</code></li><li>请求会被<strong>HiddenHttpMethodFilter</strong>拦截<ul><li>请求是否正常?并且是POST<ul><li>获取到 <code>_method</code> 的值</li><li>兼容以下请求: <strong>PUT DELETE PATCH</strong></li><li>原生<strong>request(post)<strong>，包装模式</strong>requesWrapper</strong>重写<strong>getMethod</strong>方法，返回的是传入的值。</li><li>过滤器链放行时用wrapper，以后的方法调用getMethod是调用requesWrapper的。</li></ul></li></ul></li></ul></li></ul><hr><h4 id="1-5-请求处理-常用参数注解使用"><a href="#1-5-请求处理-常用参数注解使用" class="headerlink" title="1.5 请求处理(常用参数注解使用)"></a>1.5 请求处理(常用参数注解使用)</h4><p>常用注解：</p><p><code>@PathVariable </code>: 路径变量，<code>@RequestHeader</code>: 请求头，<code>@RequestParam</code>: 获取请求参数，<code>@RequestBody</code>: 获取请求体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 测试@PathVariable @RequestParam --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/car/3/owner/zhangsan?age=18&amp;inters=basketball&amp;inters=football&quot;</span>&gt;</span>/car/&#123;id&#125;/owner/&#123;username&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/car/3/owner/zhangsan:路径变量</span></span><br><span class="line"><span class="comment">?age=18&amp;inters=basketball&amp;inters=football:请求参数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- =========================================================================== --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 测试@RequestBody --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/save&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 测试@PathVariable @RequestParam</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String UserAgent,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam</span> MultiValueMap&lt;String,String&gt; params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//        MultiValueMap&lt;String, Object&gt; map = new LinkedMultiValueMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;UserAgent&quot;,UserAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;header&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 测试@RequestBody</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-6-视图解析与模板引擎"><a href="#1-6-视图解析与模板引擎" class="headerlink" title="1.6 视图解析与模板引擎"></a>1.6 视图解析与模板引擎</h4><p><code>Thymeleaf</code> 的使用</p><ul><li><p>引入starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入starter之后，<code>thymeleaf</code>的配置都在 <code>ThymeleafProperties</code> 中配置好了(包括<code>SpringTemplateEngine</code>,<code>ThymeleafViewResolver</code>)。</p></li><li><p>编写控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;百度一下你就知道&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;link&quot;</span>,<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写页面(success.html)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>success<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span> 成功 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- $&#123;...&#125;用于变量取值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;$&#123;link&#125;&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.google.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/link&#125;&quot;</span>&gt;</span>百度一下2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- @&#123;...&#125;用于设置链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-后台管理系统"><a href="#2-后台管理系统" class="headerlink" title="2 后台管理系统"></a>2 后台管理系统</h3><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">indexController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 访问首页</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/&quot;,&quot;/login&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">(User user, HttpSession session, Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasLength(user.getUsername()) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(user.getPassword())) &#123;</span><br><span class="line">            <span class="comment">// 登录成功的用户存储一下</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             *   使用重定向</span></span><br><span class="line"><span class="comment">             *   登陆成功重定向到main.html，防止表单重复提交</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;账号密码错误！&quot;</span>);</span><br><span class="line">            <span class="comment">// 重新返回登录页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  去main页面</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/main.html&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mainPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- method设置为post, th:action设置为@&#123;/login&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- name设置为username和password, 接受输入框的数据与User建立关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录检查</span></span><br><span class="line"><span class="comment"> * 1、配置好拦截器要拦截哪些请求</span></span><br><span class="line"><span class="comment"> * 2、把这些配置放在容器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行前</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String requestUrl = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 登陆前检查</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截住</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行完成以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染完成后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置类WebConfig"><a href="#配置类WebConfig" class="headerlink" title="配置类WebConfig"></a>配置类WebConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、编写一个拦截器实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment"> * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）</span></span><br><span class="line"><span class="comment"> * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p><code>FormController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/form_layouts&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">form_layouts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;form/form_layouts&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;,username=&#123;&#125;,headerImg=&#123;&#125;&quot;</span>,</span><br><span class="line">                email,username,headerImg.getSize());</span><br><span class="line">        <span class="keyword">if</span>(!headerImg.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 保存文件到磁盘中</span></span><br><span class="line">            String originalFilename = headerImg.getOriginalFilename();</span><br><span class="line">            headerImg.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;E:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>form_layouts.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;headerImg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li>默认情况下，SpringBoot提供一个处理所有错误的映射<code>/error</code>，响应一个”<code>whitelabel</code>“错误视图。</li></ul><ul><li><p><strong>添加自定义</strong>，将View解析为error。</p><ul><li><p><code>error/</code>下的<code>404、5xx</code>页面会自动解析。</p><img src="/2022/02/20/SpringBoot%E7%AC%94%E8%AE%B0-3/image-20220224101424354.png" class="" title="image-20220224101424354"></li><li><p>也可自定义**控制器(Controller)**。</p></li></ul></li></ul><h4 id="Web原生组件注入-Servlet、Filter、Listener"><a href="#Web原生组件注入-Servlet、Filter、Listener" class="headerlink" title="Web原生组件注入(Servlet、Filter、Listener)"></a>Web原生组件注入(Servlet、Filter、Listener)</h4><ul><li><p> <strong><font color=red>使用Servlet API</font></strong></p></li><li><p><code>@ServletComponentScan(&quot;com.fanpeng&quot;)</code>:指定原生<code>servlet</code>都放在哪里。</p></li><li><p><code>@WebServlet(urlPatterns = &quot;/my&quot;)</code>:注册<code>servlet</code>组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@WebFilter(urlPatterns = &#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</code>:设置<code>Filter</code>进行拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</span></span><br><span class="line"><span class="comment">// ”/css/*“:servlet写法；“/css/**”：spring写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 销毁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Filter工作&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@WebListener</code>:设置监听器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyServletContextListener初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyServletContextListener销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color=red>使用RegistrationBean</font></strong></p><ul><li><p><code>MyServletConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(myServlet,<span class="string">&quot;/my&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/css/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyServletContextListener myServletContextListener = <span class="keyword">new</span> MyServletContextListener();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean(myServletContextListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr>]]></content>
    
    
    <summary type="html">SpringBoot：Web开发。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/01/22】SpringBoot学习笔记(二)</title>
    <link href="http://example.com/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/"/>
    <id>http://example.com/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/</id>
    <published>2022-01-22T09:16:55.000Z</published>
    <updated>2022-02-20T02:39:36.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot学习笔记-二"><a href="#SpringBoot学习笔记-二" class="headerlink" title="SpringBoot学习笔记(二)"></a>SpringBoot学习笔记(二)</h2><h3 id="1-组件功能"><a href="#1-组件功能" class="headerlink" title="1 组件功能"></a>1 组件功能</h3><h4 id="1-1-Configuration"><a href="#1-1-Configuration" class="headerlink" title="1.1 @Configuration"></a>1.1 @Configuration</h4><ul><li>Full模式: 配置类组件之间<strong>有依赖关系</strong>，方法会被调用得到之前单实例组件，用Full模式。</li><li>Lite模式: 配置类组件之间<strong>无依赖关系</strong>用Lite模式加速容器启动过程，减少判断。</li></ul><h4 id="1-2-Bean-Component-Controller-Service-Repository"><a href="#1-2-Bean-Component-Controller-Service-Repository" class="headerlink" title="1.2 @Bean @Component @Controller @Service @Repository"></a>1.2 @Bean @Component @Controller @Service @Repository</h4><h4 id="1-3-ComponentScan-Import"><a href="#1-3-ComponentScan-Import" class="headerlink" title="1.3 @ComponentScan @Import"></a>1.3 @ComponentScan @Import</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="comment">// 给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span></span><br></pre></td></tr></table></figure><h4 id="1-4-Conditional"><a href="#1-4-Conditional" class="headerlink" title="1.4 @Conditional"></a>1.4 @Conditional</h4><ul><li><p><strong>条件装配：</strong> 满足Conditional指定的条件，则进行组件注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span></span><br></pre></td></tr></table></figure></li></ul><br><h3 id="2-原生配置文件引入"><a href="#2-原生配置文件引入" class="headerlink" title="2 原生配置文件引入"></a>2 原生配置文件引入</h3><h4 id="2-1-ImportResource"><a href="#2-1-ImportResource" class="headerlink" title="2.1 @ImportResource"></a>2.1 @ImportResource</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">======================beans.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">======================测试=================</span><br><span class="line">        <span class="keyword">boolean</span> haha = run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> hehe = run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;haha：&quot;</span>+haha);<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hehe：&quot;</span>+hehe);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><br><h3 id="3-配置绑定"><a href="#3-配置绑定" class="headerlink" title="3 配置绑定"></a>3 配置绑定</h3><p>读取properties文件中的内容，并将其封装到JavaBean中。</p><h4 id="3-1-ConfigurationProperties"><a href="#3-1-ConfigurationProperties" class="headerlink" title="3.1 @ConfigurationProperties"></a>3.1 @ConfigurationProperties</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-EnableConfigurationProperties-ConfigurationProperties"><a href="#3-2-EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="3.2 @EnableConfigurationProperties + @ConfigurationProperties"></a>3.2 @EnableConfigurationProperties + @ConfigurationProperties</h4><h4 id="3-3-Component-ConfigurationProperties"><a href="#3-3-Component-ConfigurationProperties" class="headerlink" title="3.3 @Component + @ConfigurationProperties"></a>3.3 @Component + @ConfigurationProperties</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="comment">//1、开启Car配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="4-开发技巧"><a href="#4-开发技巧" class="headerlink" title="4 开发技巧"></a>4 开发技巧</h3><h4 id="4-1-Lombok"><a href="#4-1-Lombok" class="headerlink" title="4.1 Lombok"></a>4.1 Lombok</h4><p>简化JavaBean开发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">idea中搜索安装lombok插件</span><br></pre></td></tr></table></figure><h4 id="4-2-Spring-Initailizr-项目初始化向导"><a href="#4-2-Spring-Initailizr-项目初始化向导" class="headerlink" title="4.2 Spring Initailizr(项目初始化向导)"></a>4.2 Spring Initailizr(项目初始化向导)</h4><img src="/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/image-20220219143638487.png" class="" title="image-20220219143638487"><p>创建项目时选择开发场景。</p><img src="/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/image-20220219143702772.png" class="" title="image-20220219143702772"><p>会自动引入依赖。</p><img src="/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/image-20220219143755096.png" class="" title="image-20220219143755096"><p>项目结构</p><img src="/2022/01/22/SpringBoot%E7%AC%94%E8%AE%B0-2/image-20220219143906462.png" class="" title="image-20220219143906462"><hr>]]></content>
    
    
    <summary type="html">SpringBoot：组件功能、配置绑定与开发小技巧。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/01/15】SpringBoot学习笔记(一)</title>
    <link href="http://example.com/2022/01/17/SpringBoot%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://example.com/2022/01/17/SpringBoot%E7%AC%94%E8%AE%B0-1/</id>
    <published>2022-01-17T08:43:57.000Z</published>
    <updated>2022-02-20T02:39:00.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot学习笔记-一"><a href="#SpringBoot学习笔记-一" class="headerlink" title="SpringBoot学习笔记(一)"></a>SpringBoot学习笔记(一)</h2><h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1 搭建环境"></a>1 搭建环境</h3><p><strong>(1) 系统要求</strong></p><p>Java8，Maven3.3+</p><p><strong>(2) maven设置</strong></p><p>修改maven中的配置文件内容：①设置镜像 ②设置maven中Java编译版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 创建工程</p><p>(4) 工程中引入依赖(pom.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(5) 创建主程序，设置为程序运行入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(6) 创建控制器方法(controller.HelloController.java)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.boot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,SpringBoot 2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(7) 运行程序，显示结果</p><img src="/2022/01/17/SpringBoot%E7%AC%94%E8%AE%B0-1/image-20220117193650666.png" class="" title="image-20220117193650666"><p>#配置端口号</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure><p>#配置部署(打包成jar包)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-SpringBoot自动配置原理"><a href="#2-SpringBoot自动配置原理" class="headerlink" title="2 SpringBoot自动配置原理"></a>2 SpringBoot自动配置原理</h3><h4 id="2-1-依赖管理"><a href="#2-1-依赖管理" class="headerlink" title="2.1 依赖管理"></a>2.1 依赖管理</h4><p>父项目做依赖管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖管理--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--他的父项目--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>spring-boot-starter-*: 只要引入starter，这个场景的所有常规需要的依赖就会自动导入。</p></li><li><p>*-spring-boot-starter: 常用于引入第三方提供的场景启动器。</p></li><li><p>不用关心版本号，自动版本仲裁</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--若需要修改版本号，可在pom.xml中添加配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-自动配置"><a href="#2-2-自动配置" class="headerlink" title="2.2 自动配置"></a>2.2 自动配置</h4><ul><li><p>自动配置Tomcat</p></li><li><p>自动配置SpringMVC</p></li><li><p>自动配置Web常见功能</p></li><li><p>默认包结构</p><ul><li>主程序所在包及其下面子包的所有组件，都会被默认扫描进来。</li><li>也可以自定义扫描路径 @SpringBootApplication(scanBasePackages=<strong>“com.xxxx”</strong>)</li></ul></li><li><p>各种配置都有默认值</p><ul><li>默认配置最终都会映射到某个类上。</li><li>配置文件的值都会绑定到某个类上，<strong>这个类会在容器中创建对象</strong>。</li></ul></li><li><p>按需加载所有自动配置项。</p><ul><li>引入某种场景，某种场景的自动配置才会开启。</li><li>SpringBoot所有的自动配置功能都在 <strong>spring-boot-autoconfigure</strong> 包里面</li></ul></li></ul>]]></content>
    
    
    <summary type="html">SpringBoot：搭建环境、自动配置原理。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/21】Java_Maven项目搭建(IDEA版本)</title>
    <link href="http://example.com/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-01-06T05:30:16.985Z</published>
    <updated>2021-12-22T03:34:56.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Maven项目搭建-IDEA版本"><a href="#Java-Maven项目搭建-IDEA版本" class="headerlink" title="Java_Maven项目搭建(IDEA版本)"></a>Java_Maven项目搭建(IDEA版本)</h2><p>参考：</p><p>(1) <a href="https://www.cnblogs.com/zzvar/articles/14596785.html">Idea中创建maven项目</a></p><p>(2) <a href="https://blog.csdn.net/zzvar/article/details/114896761">Idea中配置Tomcat以及运行maven项目</a></p><hr><h3 id="一、安装Maven"><a href="#一、安装Maven" class="headerlink" title="一、安装Maven"></a>一、安装Maven</h3><p>(1) 第一步，<strong>去官网下载Maven</strong>。</p><p>官网地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>下载后解压，结果如下：</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095391653.png" class="" width="1640095391653"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095405307.png" class="" width="1640095405307"><p><br>(2) 第二步，<strong>配置环境变量</strong>。</p><p>① 新建一个环境变量，命名为 <font color=red> <strong>MAVEN_HOME</strong> </font>。变量值为你 <strong>安装Maven的路径地址</strong>。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095620453.png" class="" width="1640095620453"><p>② 在Path中增加一个变量： <strong>%MAVEN_HOME%\bin</strong></p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095723521.png" class="" width="1640095723521"><p><br>(3) 第三步，<strong>验证Maven环境是否搭建成功</strong>。</p><p>在提示命令行中输入： <strong>mvn -v</strong></p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095864016.png" class="" width="1640095864016"><p><font color=green>出现以上结果，说明配置完成。</font></p><br><p>(4) 第四步，<strong>配置setting文件</strong>。</p><p>① 打开Maven安装目录下的 <strong>conf文件夹</strong> ，找到 <strong>settings.xml</strong> 文件，用记事本或是Notepad++打开。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640095989501.png" class="" width="1640095989501"><p>② 找到<code>&lt;locakRepository&gt;</code>,中间值修改为你的仓库路径(可以直接新建一个 <strong>RepMaven文件夹</strong> )。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096119211.png" class="" width="1640096119211"><p>③ 保存，关闭。</p><hr><h3 id="二、在IDEA中配置Maven环境"><a href="#二、在IDEA中配置Maven环境" class="headerlink" title="二、在IDEA中配置Maven环境"></a>二、在IDEA中配置Maven环境</h3><p><strong>1.IDEA中Maven的设置</strong></p><p>(1) 打开IDEA，File —&gt; Settings</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096395564.png" class="" width="1640096395564"><p>(2) 修改配置如下：</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096511008.png" class="" width="1640096511008"><br><p><strong>2.新建一个Maven项目</strong></p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096652252.png" class="" width="1640096652252"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640096770516.png" class="" width="1640096770516"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142250691.png" class="" width="1640142250691"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142492777.png" class="" width="1640142492777"><p>添加配置 <code>DarchetypeCatalog=internal</code> ，添加原因：每次创建maven项目时， IDEA 要使用插件进行创建，这些插件当你创建新的项目时，它每次都会去中央仓库下载，这样使得创建比较慢。所以在创建maven项目时，应该让它找本地仓库中的插件进行项目的创建。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142533137.png" class="" width="1640142533137"><br><p><strong>3.完善maven-web项目模板</strong></p><p>(1) 第一次加载项目比较慢，等待加载即可。</p><p>(2) 在项目下按下图操作 <strong>创建文件夹</strong> 。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640142970380.png" class="" width="1640142970380"><p>(3) 右键项目，点击选择 <strong>Open Module Settings</strong> 打开项目配置页面更改 。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143149194.png" class="" width="1640143149194"><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143241733.png" class="" width="1640143241733"><hr><h3 id="三、Idea中配置Tomcat以及运行maven项目"><a href="#三、Idea中配置Tomcat以及运行maven项目" class="headerlink" title="三、Idea中配置Tomcat以及运行maven项目"></a>三、Idea中配置Tomcat以及运行maven项目</h3><p>确保电脑中已经下好了tomcat，并配置完成。</p><p>(1) 打开Run —&gt; Edit Configurations</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143834321.png" class="" width="1640143834321"><p>(2) 按如下图，添加 <strong>Tomcat Server</strong> 。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143942030.png" class="" width="1640143942030"><p>(3) 添加完成。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640143978016.png" class="" width="1640143978016"><p>(4) 启动Tomcat服务。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640144017454.png" class="" width="1640144017454"><p>(5) 运行成功。</p><img src="/2022/01/06/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE/1640144057769.png" class="" width="1640144057769"><p><font color=red><strong>至此，整个流程结束。</strong></font></p><hr>]]></content>
    
    
    <summary type="html">Java中使用IDEA创建一个Maven项目。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】9_Java_包装类</title>
    <link href="http://example.com/2022/01/06/9_%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://example.com/2022/01/06/9_%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2022-01-06T05:30:16.790Z</published>
    <updated>2021-12-17T14:05:40.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>基本数据类型,使用起来非常方便,但是没有对应的方法来操作这些基本类型的数据。</p><p>可以使用一个类,把基本类型的数据装起来,在类中定义一些方法,这个类叫做包装类。</p><p>我们可以使用类中的方法来操作这些基本类型的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 装箱：把基本类型的数据，包装到包装类中（基本数据类型-&gt;包装类）</span></span><br><span class="line"><span class="comment">* 构造方法：</span></span><br><span class="line"><span class="comment">*   Integer(int value) 构造一个新的Integer对象，代表指定的int值。</span></span><br><span class="line"><span class="comment">*   Integer(String s) 构造一个新分配的Integer对象，表示String参数所指示的int值。</span></span><br><span class="line"><span class="comment">*   传递的字符串必须是基本类型的字符串，否则会抛出异常。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">Integer in1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(in1);</span><br><span class="line"></span><br><span class="line">Integer in2 = <span class="keyword">new</span> Integer(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(in2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 拆箱：在包装类中取出基本类型的数据。（包装类-&gt;基本类型的数据）</span></span><br><span class="line"><span class="comment">* 成员方法：</span></span><br><span class="line"><span class="comment">*   int intValue()以int类型返回该Integer的值。</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h4 id="基本类型与字符串类型的相互转换"><a href="#基本类型与字符串类型的相互转换" class="headerlink" title="基本类型与字符串类型的相互转换"></a>基本类型与字符串类型的相互转换</h4><p><strong>(1) 基本类型到字符串类型</strong></p><ol><li>基本类型的值+“ ” 【最简单的方法】。</li><li>包装类的静态方法toString(参数)，不是Object中的toString()重载。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 返回一个表示指定整数的String对象。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>String类的静态方法valueOf(参数)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 返回int参数的字符串表示形式。</span></span><br></pre></td></tr></table></figure><p><strong>(2) 字符串到基本类型</strong></p><p>使用包装类的静态方法parseXXX(“字符串”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Integer类</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s)</span></span>;</span><br><span class="line"><span class="comment">// Double类</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">parseDouble</span><span class="params">(String s)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中包装类的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】8_Java_StringBuilder类</title>
    <link href="http://example.com/2022/01/06/8_StringBuilder/"/>
    <id>http://example.com/2022/01/06/8_StringBuilder/</id>
    <published>2022-01-06T05:30:16.786Z</published>
    <updated>2021-12-17T14:03:28.800Z</updated>
    
    <content type="html"><![CDATA[<h3 id="StringBuilder类【字符串缓冲区】"><a href="#StringBuilder类【字符串缓冲区】" class="headerlink" title="StringBuilder类【字符串缓冲区】"></a>StringBuilder类【字符串缓冲区】</h3><p>可以解决字符串拼接问题。</p><h4 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h4><ol><li>字符串是常量，被定义后不能被改变。</li><li>字符串的底层是一个被final修饰的数组，不能改变，是一个常量。</li></ol><p>使用String进行字符串的相加，内存会有多个字符串，占用空间较多，效率低下。</p><h4 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h4><ol><li><p>是一个字符串缓冲区，提高字符串操作的效率。</p></li><li><p>底层是一个数组，但是<font color=red>没有被final修饰</font>，可以改变。</p></li><li><p>在内存中始终是一个数组，占用空间少，效率高。超出了StringBuilder的容量，会自动扩容。</p></li></ol><p><strong>1 构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 构造一个不带字符的字符串生成器，其容量为16个字符。</span></span><br><span class="line">StringBuilder bu1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">// 2 构造一个字符串生成器，并初始化为指定的字符串内容。</span></span><br><span class="line">StringBuilder(String str);</span><br></pre></td></tr></table></figure><p><strong>2 成员方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 添加任意类型数据的字符串形式，并返回当前对象自身。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(...)</span></span>;</span><br><span class="line"><span class="comment">// 2 将当前的StringBuilder对象转换为String对象。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中StringBuilder的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】7_Java_System类</title>
    <link href="http://example.com/2022/01/06/7_System%E7%B1%BB/"/>
    <id>http://example.com/2022/01/06/7_System%E7%B1%BB/</id>
    <published>2022-01-06T05:30:16.771Z</published>
    <updated>2021-12-17T14:01:36.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.System;</span><br></pre></td></tr></table></figure><p>提供了大量得静态方法，可以获取与系统相关的信息或者系统级操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 将数组中指定的数据拷贝到另外一个数组中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">src-源数组</span></span><br><span class="line"><span class="comment"> srcPos - 源数组中的起始位置（索引）</span></span><br><span class="line"><span class="comment"> dest - 目标数组</span></span><br><span class="line"><span class="comment"> destPos - 目标数组的起始位置</span></span><br><span class="line"><span class="comment"> length - 复制的数据元素的数量</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中System类的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】6_Java_日期与时间的类</title>
    <link href="http://example.com/2022/01/06/6_%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E7%B1%BB/"/>
    <id>http://example.com/2022/01/06/6_%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E7%B1%BB/</id>
    <published>2022-01-06T05:30:16.753Z</published>
    <updated>2021-12-17T13:59:01.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="日期和时间类"><a href="#日期和时间类" class="headerlink" title="日期和时间类"></a>日期和时间类</h3><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date; <span class="comment">// 表示日期和时间的类</span></span><br><span class="line"><span class="comment">// 精确到毫秒，可以对时间和日期进行计算。</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date(); <span class="comment">// 获取当前系统的时间</span></span><br></pre></td></tr></table></figure><h4 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h4><p>格式化：日期-&gt;文本；解析：文本-》日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">format</span><span class="params">(Date date)</span></span>;  <span class="comment">// 日期转文本</span></span><br><span class="line"><span class="function">Date <span class="title">parse</span><span class="params">(String source)</span></span>; <span class="comment">// 文本解析成日期</span></span><br></pre></td></tr></table></figure><p>使用DateFormat类中的方法format，把日期格式转化为文本。</p><p>使用步骤:</p><ol><li>创建SimpleDateFormat对象，构造方法中传递指定的模式。</li><li>调用SimpleDateFormat对象中的format，按照构造方法中指定的模式，把Date日期格式化为符合模式的字符串（文本）。</li></ol><h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="comment">// 是一个抽象类，提供了一些操作日历字段的方法。</span></span><br><span class="line"><span class="comment">// Calendar类无法直接创建对象使用，里面有一个静态的方法getInstance()获取Calendar对象。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中与日期时间相关的操作类。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/28】5_Java_接口与多态</title>
    <link href="http://example.com/2022/01/06/5_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <id>http://example.com/2022/01/06/5_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81/</id>
    <published>2022-01-06T05:30:16.740Z</published>
    <updated>2021-12-17T14:02:12.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h3><p>一种公共的规范标准。</p><p>一种引用数据类型。最重要的内容就是：抽象方法。</p><h4 id="定义一个接口："><a href="#定义一个接口：" class="headerlink" title="定义一个接口："></a>定义一个接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// 接口内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译生成的字节码文件 .java-&gt;.class</span></span><br></pre></td></tr></table></figure><h4 id="接口中定义抽象方法："><a href="#接口中定义抽象方法：" class="headerlink" title="接口中定义抽象方法："></a>接口中定义抽象方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名称(参数列表);</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceAbstract</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>接口中的抽象方法，修饰符是两个固定的关键字:public abstract</li><li>两个关键字修饰符可以省略。</li><li>方法的三要素可以随意定义。</li></ol><h4 id="接口的使用："><a href="#接口的使用：" class="headerlink" title="接口的使用："></a>接口的使用：</h4><ol><li>接口不能直接使用，需要有一个”实现类“来”实现”该接口。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类名称 <span class="keyword">implements</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>接口的实现必须覆盖重写(实现)接口中的<strong>所有的抽象方法</strong>。</li></ol><p>实现：去掉abstract关键字，加上方法体大括号。</p><ol start="3"><li>创建实现类的对象，进行使用。</li></ol><p><strong>注意事项</strong>：</p><p>如果实现类没有覆盖重写接口中的所有抽象方法，那么这个实现类自己就必须是抽象类。</p><h4 id="接口的默认方法："><a href="#接口的默认方法：" class="headerlink" title="接口的默认方法："></a>接口的默认方法：</h4><p>接口的默认方法，用来解决接口升级的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>接口的默认方法，可以通过接口实现类对象，直接调用。</li><li>接口的默认方法，也可以被接口实现类进行覆盖重写。</li></ol><h4 id="接口的静态方法"><a href="#接口的静态方法" class="headerlink" title="接口的静态方法"></a>接口的静态方法</h4><p>从Java 8开始，接口当中允许定义静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line"><span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：不能通过接口实现类的对象来调用接口当中的静态方法。</p><p><strong>正确用法</strong>：通过接口名称，直接调用其中的静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        MyInterfaceStaticImpl impl = <span class="keyword">new</span> MyInterfaceStaticImpl();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 错误写法</span></span><br><span class="line">        impl.methodStatic();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 正确写法</span></span><br><span class="line">        MyInterfaceStatic.methodStatic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的成员变量"><a href="#接口的成员变量" class="headerlink" title="接口的成员变量"></a>接口的成员变量</h4><p>接口中也是可以定义”成员变量“，但是必须使用public static final 三个关键字进行修饰。</p><p>从效果上来看，就是接口的【常量】。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 数据类型 常量名称 = 数据值；</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>一旦使用final关键词进行修饰，说明不可改变。</li><li>接口中的常量，可以省略public static final.</li><li>接口中的常量，必须赋值，不能不赋值。</li><li>接口中常量的名称，使用完全大写的字母，并且用下划线进行分隔。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceConst</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一旦赋值，不可改变</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_OF_MY_CLASS = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用接口的注意事项"><a href="#使用接口的注意事项" class="headerlink" title="使用接口的注意事项"></a>使用接口的注意事项</h4><ol><li><p>接口没有静态代码块和构造方法。</p></li><li><p>一个类的直接父类是唯一的，一个类可以同时实现多个接口。</p></li><li><p>如果实现类所实现的多个接口当中，存在<strong>重复的抽象方法</strong>，那么只需要覆盖重写一次即可。</p></li><li><p>如果实现类没有覆盖重写接口中的所有抽象方法，那么这个实现类自己就必须是抽象类。</p></li><li><p>如果实现类实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</p></li><li><p>一个类如果直接父类中的方法和接口中的默认方法产生了冲突，优先用父类中的方法。【继承优先级高于接口】</p></li></ol><h4 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h4><ol><li>类与类之间是单继承的，直接父类只有一个。</li><li>类与接口之间是多实现的，一个类可以实现多个接口。</li><li>接口与接口之间是多继承的。</li></ol><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>extends继承或者implements实现，是多态性的前提。</p><p>代码中体现多态性：<strong>父类引用指向子类对象。</strong></p><h4 id="访问成员变量的方法："><a href="#访问成员变量的方法：" class="headerlink" title="访问成员变量的方法："></a>访问成员变量的方法：</h4><ol><li>直接通过对象名称访问成员变量：等号左边是谁，优先用谁，没有则向上找。</li><li>间接通过成员方法访问成员变量：方法属于谁，优先用谁，没有则向上找。</li></ol><h4 id="多态中成员方法的使用："><a href="#多态中成员方法的使用：" class="headerlink" title="多态中成员方法的使用："></a>多态中成员方法的使用：</h4><ol><li>看new的是谁，优先用谁，没有就向上找。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MultiMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu obj = <span class="keyword">new</span> Zi(); <span class="comment">// 多态</span></span><br><span class="line">        </span><br><span class="line">        obj.method(); <span class="comment">// 父子都有，优先用子</span></span><br><span class="line">        obj.method(); <span class="comment">// 子类没有，父类有，向上找到父类</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// *编译看左边，运行看右边。*</span></span><br><span class="line">        <span class="comment">// 编译看左边，左边是父类，没有methondZi方法，所以编译报错。</span></span><br><span class="line">        obj.methodZi(); <span class="comment">// 错误！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>成员变量：编译看左边，运行也看左边。</p><p>成员方法：编译看左边，运行看右边。</p><hr><h3 id="对象的转型"><a href="#对象的转型" class="headerlink" title="对象的转型"></a>对象的转型</h3><ol><li>对象的向上转型，就是 <strong>多态</strong> 写法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类名称 对象名 = <span class="keyword">new</span> 子类名称();</span><br></pre></td></tr></table></figure><p>含义：右侧创建一个子类对象，把它当作父类看待。</p><p>注意事项： 向上转型一定是安全的。从小范围转到大范围。</p><ol start="2"><li>对象的向下转型，是一个 <strong>还原</strong> 动作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类名称 对象名 = (子类名称) 父类对象;</span><br></pre></td></tr></table></figure><p>含义：将父类对象还原成原来的子类对象。</p><p>注意事项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Cat(); <span class="comment">// 本来就是猫，向上转型成动物。</span></span><br><span class="line">Cat cat = (Cat) animal; <span class="comment">// 本来就是猫，被当作动物了，现在进行还原。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// 1. 必须保证对象本来创建的时候就是猫，才能向下转型成猫。</span></span><br><span class="line"><span class="comment">// 2. 如果对象创建的时候不是猫，现在非要向下转型成为猫，就会报错。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>判断父类引用对象，本来是什么子类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">对象 <span class="keyword">instanceof</span> 类名称;</span><br><span class="line"><span class="comment">// 得到的结果是一个boolean值</span></span><br><span class="line"><span class="comment">// 判断前面的对象能不能当作后面的实例。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断这个对象是否是Dog</span></span><br><span class="line"><span class="keyword">if</span> ( animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">    Dog dog = (Dog) animal;</span><br><span class="line">    <span class="comment">// 调用dog方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>代表不可改变的。</p><p>常见用法：</p><ol><li><p>修饰类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代表这个类不能有任何的子类。</span></span><br></pre></td></tr></table></figure><p>注意：如果一个类是final的，其中所有的成员方法都无法进行覆盖重写。</p></li><li><p>修饰方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// final关键字修饰一个方法的时候，这个方法就是最终的方法，不能被覆盖重写。</span></span><br></pre></td></tr></table></figure><p>注意：对于类、方法来说，abstract关键字和final关键字不能同时使用，因为矛盾。</p></li><li><p>修饰局部变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一旦使用final用来修饰局部变量，那么这个变量就不能进行更改。</span></span><br><span class="line"><span class="comment">// “一次赋值，终生不变。”</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>对于基本类型，不可变代表变量当中的 <strong>数据</strong> 不可变。</li><li>对于引用类型，不可变代表变量中的 <strong>地址值</strong> 不可变。</li></ol></li><li><p>修饰成员变量。</p><p>如果使用final关键字修饰，那么这个变量也照样是不可变的。</p><ol><li><p>对于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值了。</p></li><li><p>对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一。</p></li><li><p>必须保证类当中所有重载的构造方法，都最终对final的成员变量进行赋值。</p></li></ol></li></ol><hr><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>一个类内部包含另一个类。</p><p><strong>分类</strong></p><ol><li><p>成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 内部类名称 </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：内用外，随意访问；外用内，需要<strong>内部类对象</strong>。</p><p><strong>使用成员内部类</strong>：</p><ol><li><p>间接使用: 在外部类的方法中，使用内部类；然后main只是调用外部类的方法。</p></li><li><p>直接使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名 = <span class="keyword">new</span> 类名称();</span><br><span class="line">外部类名称.内部类名称 对象名 = <span class="keyword">new</span> 外部类名称().new 内部类名称();</span><br></pre></td></tr></table></figure></li><li><p>内部类重名访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类名称.<span class="keyword">this</span>.外部类成员变量名</span><br></pre></td></tr></table></figure></li></ol></li><li><p>局部内部类</p><p>如果一个类定义在一个方法内部，那么就是一个局部内部类。</p><p>局部：是由当前所属的方法可以使用它，出了这个方法就不能用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称(参数列表) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>定义一个类时的权限修饰符<ol><li>外部类：public default</li><li>成员内部类：public/protected/(default)/private</li><li>局部内部类：什么都不写</li></ol></li></ol><hr><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>如果接口的实现类只需要使用唯一的一次，那么这种情况下就可以省略该类的定义，而改为使用【匿名内部类】。</p><p><strong>匿名内部类的定义格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">接口名称 对象名 = <span class="keyword">new</span> 接口名称() &#123;</span><br><span class="line">    <span class="comment">// 覆盖重写所有的抽象方法</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1.new代表创建对象的动作</span></span><br><span class="line"><span class="comment">// 2.接口名称就是匿名内部类需要实现哪个接口</span></span><br><span class="line"><span class="comment">// &#123;...&#125;才是匿名内部类的内容</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><p>匿名内部类，在【创建对象】的时候，只能使用唯一一次。如果希望多次创建对象，而且类的内容一样，就需要使用单独定义的实现类。</p></li><li><p>匿名对象，在【调用方法】的时候，只能调用唯一一次。如果希望同一个对象，调用多次方法，那么必须给对象起个名字。</p></li><li><p>匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】。</p></li></ol>]]></content>
    
    
    <summary type="html">Java接口与多态相关知识点总结。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/26】Java_API知识点</title>
    <link href="http://example.com/2022/01/06/3_API/"/>
    <id>http://example.com/2022/01/06/3_API/</id>
    <published>2022-01-06T05:30:16.719Z</published>
    <updated>2021-12-17T13:45:46.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA中常用的API"><a href="#JAVA中常用的API" class="headerlink" title="JAVA中常用的API"></a>JAVA中常用的API</h2><p>API:应用程序编程接口</p><h3 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h3><p>功能：可以实现 <strong>键盘输入</strong> 数据到程序之中。</p><ol><li><p>导包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包路径.类名称;</span><br></pre></td></tr></table></figure><p>如果需要使用的目标类，和当前类位于同一个包下，则可以省略导包语句不写。</p><p>只有java.lang包下的内容不需要导包，其他的包都需要import语句。</p></li><li><p>创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名 = <span class="keyword">new</span> 类名称();</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.成员方法名()</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><p>用来生成随机数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 创建</span></span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 使用</span></span><br><span class="line"><span class="keyword">int</span> num = r.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限定范围，左闭右开</span></span><br><span class="line">Random r2 = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> num2 = r2.nextInt(<span class="number">10</span>);  <span class="comment">// [0,10)范围内的随机数</span></span><br></pre></td></tr></table></figure><hr><h3 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h3><p>数组的长度不能发生改变。ArrayList的长度可以发生改变。</p><p>ArrayList<E> :这个E代表泛型。</p><p><strong>泛型：</strong>装在集合中的所有的元素，统一都为什么类型。</p><p>注意事项：</p><ol><li><p>泛型只能是引用类型，不能是基本类型。</p></li><li><p>ArrayList直接打印得到的是内容。如果内容为空，则得到空的中括号[]。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 向集合中添加数据，要用到add方法。</span></span><br><span class="line">list.add(<span class="string">&quot;Jack&quot;</span>);</span><br></pre></td></tr></table></figure><p>常用的方法：</p><table><thead><tr><th>方法名</th><th>效果</th></tr></thead><tbody><tr><td>add</td><td>向集合中添加元素，参数的类型同泛型一致。返回值代表是否添加成功。</td></tr><tr><td>get</td><td>从集合中获取元素，参数是索引编号，返回值是对应位置的元素。</td></tr><tr><td>remove</td><td>从集合中删除元素，参数是索引编号，返回值是被删除的元素。</td></tr><tr><td>size</td><td>获取集合的尺寸长度，返回值是集合中包含的元素个数。</td></tr></tbody></table><p> 如果想要向集合ArrayList中<strong>存储基本类型数据</strong>，必须使用基本类型对应的<strong>包装类</strong>。</p><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer【特殊】</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character【特殊】</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><hr><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><p>字符串类。程序中的所有的双引号字符串，都是String类的对象。</p><p>特点：</p><ol><li>字符串是常量，字符串的内容永不可变。【重点】</li><li>字符串可以共享使用。</li><li>字符串底层原理是byte[]字节数组。效果上相当于char[]字符数组。</li></ol><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 使用空参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 根据字符数组创建字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] array)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 根据字节数组创建字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] array)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 直接创建</span></span><br><span class="line">String str = <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><p>直接写上双引号，就是字符串。</p><p><strong>字符串常量池</strong></p><p>程序当中直接写上的双引号字符串，就在字符串常量池之中。</p><ol><li><p>对于基本类型，==是【数值】的比较。</p></li><li><p>对于引用类型，==是【地址值】的比较。</p></li></ol><p>对于new出的是字符串对象，不在字符串常量池中。 </p><p><strong>字符串比较</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// public boolean equals(Object obj)</span></span><br><span class="line"><span class="comment">// 参数可以是任何对象，只有参数是一个字符串并且内容相同才会给true，否则都是false.</span></span><br><span class="line"><span class="comment">// 注意：如果比较双方一个常量一个变量，推荐把常量字符串写在前面。</span></span><br><span class="line">str1.equals(str2);</span><br></pre></td></tr></table></figure><p><strong>字符串获取</strong></p><p><strong>字符串截取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 截取从参数位置一直到字符串末尾，返回新字符串。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 截取从begin开始，一直到end结束，中间的字符串。[begin,end)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>字符串转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 public char[] toCharArray():将当前字符串拆分成字符数组作为返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 public byte[] getBytes():获得当前字符串底层的字节数组。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 public String replace(CharSequence oldString, CharSequence newString):将所有出现的老字符串替换成新的字符串，返回替换之后的结果新字符串。</span></span><br></pre></td></tr></table></figure><p><strong>字符串切割</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照参数的规则，将字符串切成若干部分。</span></span><br><span class="line"><span class="keyword">public</span> String[] split(String regex)</span><br></pre></td></tr></table></figure><hr><h3 id="static关键词"><a href="#static关键词" class="headerlink" title="static关键词"></a>static关键词</h3><p>使用static关键词，<strong>内容不再属于对象自己，而是属于类的</strong>。</p><p>凡是本类的对象，都共享同一份。 </p><p>如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。</p><p>如果有了static关键字，那么不需要创建对象，直接通过类名称使用它。</p><p>无论是成员变量，还是成员方法。如果有了static，都推荐使用类名称进行调用。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">静态变量：类名称.静态变量</span><br><span class="line">静态方法：类名称.静态方法<span class="comment">()</span></span><br></pre></td></tr></table></figure><img src="/2022/01/06/3_API/1637810518113.png" class="" title="img"><p>根据类名称访问静态成员变量的时候，全程和对象没有关系，只和类有关系。</p><p><strong>注意事项：</strong></p><ol><li>静态不能直接访问非静态。</li><li>静态方法当中不能用this。</li></ol><hr><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><p>与数组相关的工具类，提供大量的静态方法，用来实现数组常见的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将参数数组变成字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(数组)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照默认升序对数组元素进行排序</span></span><br><span class="line"><span class="comment">// (1)如果是数字，按照从小到大。(2)如果是字符串，按照字母升序。(3)如果是自定义类型，需要有Comparable或者Comparator接口的支持。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(数组)</span></span>;</span><br></pre></td></tr></table></figure><hr><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><p>数学相关的工具类，完成与数学运算相关的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> num)</span></span>;<span class="comment">// 获取绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> num)</span></span>; <span class="comment">// 向上取整</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> num)</span></span>; <span class="comment">// 向下取整</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> num)</span></span>; <span class="comment">// 四舍五入</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录一些常用的API.</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/27】Java开发基础知识点(二)</title>
    <link href="http://example.com/2022/01/06/2_%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2022/01/06/2_%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2022-01-06T05:30:16.714Z</published>
    <updated>2021-12-17T13:35:07.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java知识点（二）"><a href="#Java知识点（二）" class="headerlink" title="Java知识点（二）"></a>Java知识点（二）</h1><p><strong>1 包装类型</strong></p><p> 基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。</p><hr><p><strong>2 缓存池：</strong></p><p>（1）new Integer(123)</p><p>每次都会<strong>新建一个对象</strong>。</p><p>（2）Integer.valueOf(123)</p><p>会<strong>使用缓存池中的对象</strong>，多次调用会取得同一个对象的引用。  </p><p>先<strong>判断值是否在缓存池中</strong>，如果在的话就直接返回缓存池的内容。</p><p> Java 8 中，Integer <strong>缓存池的大小</strong>默认为 -128~127 。</p><hr><p><strong>3  String：</strong></p><p>String被声明成<strong>final</strong>，因此它<strong>不可被继承</strong>。</p><p>内部<strong>使用char数组存储数据</strong>，该数组被声明成final，意味着value数组初始化之后就不能引用其他数组。并且String内部没有改变value数组的方法，可以保证String不可变。</p><p><strong>好处：</strong></p><p>​    (1) 可以用来缓存hash值</p><p>​        例如用String用作HashMap的key.</p><p>​    (2) String Pool</p><p>​        如果一个String对象已经被创建过了，就会从String Pool中取得引用。</p><p>​    (3)安全性</p><p>​        String经常作为参数，可以保证参数不变。</p><p>​    (4)线程安全</p><p>​        String的不变性可以在多个线程中安全地使用。</p><hr><p><strong>4 String【不可变】, StringBuffer and StringBuilder【可变】：</strong></p><p>(1)线程安全问题</p><p>String不可变【线程安全】</p><p>StringBuilder【不是线程安全的】</p><p>StringBuffer【线程安全，内部使用 <strong>synchronized</strong> 进行同步 】</p><hr><p><strong>5 String.intern()</strong></p><p> 使用 String.intern() 可以<strong>保证相同内容的字符串变量引用同一的内存对象</strong>。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用。</span></span><br><span class="line"><span class="comment">// intern() 首先把 s1 引用的对象放到 String Pool(字符串常量池)中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);           <span class="comment">// false</span></span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">System.out.println(s1.intern() == s3);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是采用 &quot;bbb&quot; 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Pool 中。</span></span><br><span class="line">String s4 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">String s5 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">System.out.println(s4 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><p><strong>6 参数传递</strong></p><p> Java 的参数是以值传递的形式传入方法中，而不是引用传递。 </p>]]></content>
    
    
    <summary type="html">包装、缓存池、Sting...</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/15】Java_SpringMVC</title>
    <link href="http://example.com/2022/01/06/2_5_SpringMVC/"/>
    <id>http://example.com/2022/01/06/2_5_SpringMVC/</id>
    <published>2022-01-06T05:30:16.702Z</published>
    <updated>2021-12-24T09:14:30.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring相关内容"><a href="#Spring相关内容" class="headerlink" title="Spring相关内容"></a>Spring相关内容</h2><hr><p>注明：本章跟随 <a href="https://www.iteye.com/category/231099">跟开涛学SpringMVC</a>进行学习，并记录。</p><hr><h3 id="1-Web开发中请求-响应模型："><a href="#1-Web开发中请求-响应模型：" class="headerlink" title="1. Web开发中请求-响应模型："></a>1. Web开发中请求-响应模型：</h3><p>Web客户端发起请求，Web服务器接收、处理并产生相应。</p><img src="/2022/01/06/2_5_SpringMVC/1639896707961.png" class="" width="1639896707961"><hr><h3 id="2-标准MVC-Model-View-Controller-模型"><a href="#2-标准MVC-Model-View-Controller-模型" class="headerlink" title="2. 标准MVC( Model-View-Controller )模型"></a>2. 标准MVC( Model-View-Controller )模型</h3><p>(1) <strong>Model( 模型 )</strong>: 数据模型，提供要展示的数据。为模型提供模型 <strong>数据查询</strong> 和 <strong>模型数据的状态更新</strong> 等功能，包括数据与业务。</p><p>JavaBean分为两类：</p><ul><li>实体类Bean: 专门存储业务数据的。如Student、User等。</li><li>业务处理Bean: 指Service或者Dao对象，专门用于处理业务逻辑和数据访问。</li></ul><p>(2) <strong>View( 视图 )</strong>: 负责对模型进行展示。<strong>工程中的html,jsp页面</strong>。【用户界面】</p><p>(3) <strong>Controller( 控制器 )</strong>: 接收用户请求，调度给模型进行处理，处理完毕将返回的模型数据传给视图，视图负责显示。<strong>工程中的Servlet</strong>。【调度员】</p><img src="/2022/01/06/2_5_SpringMVC/1639898453837.png" class="" width="1639898453837"><hr><h3 id="3-Web-MVC模型"><a href="#3-Web-MVC模型" class="headerlink" title="3. Web MVC模型"></a>3. Web MVC模型</h3><p>在Web MVC模型下，模型无法主动推数据给视图，如果用户想要视图更新，就要再发一次请求。(请求-相应模型)</p><img src="/2022/01/06/2_5_SpringMVC/1639899298840.png" class="" width="1639899298840"><h4 id="服务到工作者：Front-Controller-Application-Controller-Page-Controller-Context"><a href="#服务到工作者：Front-Controller-Application-Controller-Page-Controller-Context" class="headerlink" title=" 服务到工作者：Front Controller + Application Controller + Page Controller + Context "></a><font color=red> <strong>服务到工作者：Front Controller + Application Controller + Page Controller + Context</strong> </font></h4><p>即 <strong>前端控制器 + 应用控制器 + 页面控制器(也有称其为动作) + 上下文</strong></p><img src="/2022/01/06/2_5_SpringMVC/1639902599452.png" class="" width="1639902599452"><p><font color=red><strong>处理流程</strong></font>：</p><img src="/2022/01/06/2_5_SpringMVC/1639902666739.png" class="" width="1639902666739"><p><font color=red><strong>功能</strong></font>：</p><p><strong>(1) 前端控制器( Front Controller )</strong> </p><p>​    ① 负责为表现层提供统一访问点，避免出现重复的控制逻辑(由前端控制器统一回调相应的功能方法)。</p><p>​    ② 可以为多个请求提供共用的逻辑，将选择具体视图与具体的功能处理分离(如login中封装请求参数到模型)。</p><p><strong>(2) 应用控制器( Application Controller )</strong></p><p>​    ① 用来选择具体视图技术( 视图的管理 )。</p><p>​    ② 具体的功能处理( 页面控制器/命令对象/动作管理 )。</p><p><strong>(3) 页面控制器(  Page Controlle[Command]  )</strong></p><p>​    ① 功能处理代码。</p><p>​    ② 收集参数、封装参数到模型。</p><p>​    ③ 转调业务对象处理模型。</p><p>​    ④ 返回逻辑视图名交给前端控制器 。</p><p><strong>(4) 上下文(  Context  )</strong></p><p>有了上下文之后，可以将相关数据放置在上下文，从而与协议无关（如 Servlet API）的访问/设置模型数据，一般通过 ThreadLocal 模式实现。 </p><hr><h3 id="Spring-Web-MVC"><a href="#Spring-Web-MVC" class="headerlink" title="Spring Web MVC"></a>Spring Web MVC</h3><p>SpringMVC是Spring家族的原生产品，基于<strong>原生的Servlet</strong>，通过<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理。</p><p><strong>(1) 架构图</strong>：</p><img src="/2022/01/06/2_5_SpringMVC/1639913960343.png" class="" width="1639913960343"><p><strong>(2) 核心架构的具体执行流程</strong>：</p><ol><li><p>用户 <font color=green><strong>发送请求 —&gt; DispatcherServlet</strong> </font> : 前端控制器接收到请求后自己不处理，交给其他解析器进行处理，作为统一的访问点，进行<strong>全局流程控制</strong>。</p></li><li><p><font color=green><strong>DispatcherServlet —&gt;  HandlerMapping</strong>  </font>: HandlerMapping 将会把请求映射为<strong>HandlerExecutionChain</strong> 对象（包含一 个 Handler 处理器（页面控制器）对象、多个 HandlerInterceptor 拦截器）对象 。(<strong>用于添加新的映射策略</strong>)</p></li><li><p><font color=green><strong>DispatcherServlet —&gt;  HandlerAdapter</strong>  </font>: HandlerAdapter把处理器包装成适配器，从而支持多种类型处理器。</p></li><li><p><font color=green><strong>DispatcherServlet —&gt;  处理器功能处理方法的调用</strong>  </font>: 根据适配结果调用处理器的功能方法。返回一个<strong>ModelAndView</strong>对象。</p></li><li><p><font color=green><strong>ModelAndView的逻辑视图名 —&gt;  ViewResolver</strong>  </font>: ViewResolver把逻辑视图名解析成具体的<strong>View</strong>。(可用于更换其他视图技术)</p></li><li><p><font color=green><strong>View —&gt; 渲染</strong>  </font>: <strong>View</strong> 根据传来的 <strong>Model</strong> 模型数据进行渲染，此处的Model实际是一个 <strong>Map数据结构</strong>。</p></li><li><p><font color=green><strong>返回控制权给DispatcherServlet</strong>  </font>: 由DispatcherServlet <strong>返回响应</strong> 给用户。</p></li></ol><p><font color=red> <strong>(3) 具体的核心开发步骤：</strong> </font></p><ol start="0"><li><p>创建Maven工程。在 <code>pom.xml</code> 中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>DispatcherServlet 在 web.xml 中的部署描述，从而拦截请求到 Spring Web MVC。</p><ul><li><p>默认配置方式</p><p>此配置方式下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<code>&lt;servlet-name&gt;-servlet.xml</code> ,如以下配置所对应的SpringMVC的配置文件在WEB-INF下，文件名为<code>springMVC-servlet.xml</code> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       /所匹配的请求可以是/login或者.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">       但是不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>拓展配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ============================================================== --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- classpath对应的是类路径，.class或.java --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将前端控制器DispatcherServlet的初始化时间提前到服务器启动时 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ============================================================== --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>   <strong>对 main/resources/springMVC.xml 进行配置。</strong></p><ul><li><p>添加扫描组件</p></li><li><p>配置Thymeleaf视图解析器</p><p>springboot推荐的页面模板是Thymeleaf。<strong>前后端不分离</strong>的情况下，springboot推荐用html做页面，用Thymeleaf做模板渲染，做数据渲染。(相当于jsp)；<strong>前后端分离</strong>的情况下，前端用vue、react等做渲染页面，前后端采用restful json通信。[<a href="https://blog.csdn.net/velanjun/article/details/112475154">参考</a>]</p></li></ul>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.fanpeng.mvc.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置视图解析器的优先级 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   在 <code>HelloController.java</code> 中添加<strong>请求映射的注解</strong>。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.mvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fanpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/12/22 - 16:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过注解+组件的方式</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123; <span class="comment">// 控制器</span></span><br><span class="line">    <span class="comment">// “/”--&gt;WEB-INF/templates/index.html</span></span><br><span class="line">    <span class="comment">// 添加请求映射的注解</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   在 <code>main/webapp/WEB-INF</code>下创建 <code>templates</code> 文件夹，并创建HTML5文件，命名为 <code>index.html</code></p>   <img src="/2022/01/06/2_5_SpringMVC/1640183063610.png" class="" width="1640183063610"><p>   打开Tomcat服务器，验证是否搭建成功。</p>   <img src="/2022/01/06/2_5_SpringMVC/1640183085573.png" class="" width="1640183085573"><p>   <strong>小结：</strong></p><p>​        浏览器发送请求，如果请求地址符合前端控制器的url-pattern，该请求会被<strong>前端控制器DispatcherServlet</strong>处理。</p><p>​        前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中 <strong>@RequestMapping 注解的value属性值</strong>进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。</p><p>​        处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上<strong>前缀和后缀</strong>组成视图的路径，<strong>通过Thymeleaf对视图进行渲染</strong>，最终转发给视图所对应页面。</p><ol start="2"><li><p>HandlerMapping 的配置，从而将请求映射到处理器。</p></li><li><p>HandlerAdapter 的配置，从而支持多种类型的处理器。</p></li><li><p>ViewResolver 的配置，从而将逻辑视图名解析为具体视图技术。 </p></li><li><p>处理器（页面控制器）的配置，从而进行功能处理。</p></li></ol><hr><h3 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h3><p><strong>如果没有Spring框架，我们需要自己创建User/Dao/Service等。</strong> </p><p><strong>有了Spring框架，可以将原有Bean的创建工作转给框架, 需要用时从Bean的容器中获取即可，这样便简化了开发工作。</strong></p><p> 由用户管理Bean转变为框架管理Bean，这个就叫<strong>控制反转 - Inversion of Control (IoC)</strong> </p><p><font color=red><strong>引入的一些问题：</strong></font></p><ol><li>Spring框架托管创建的Bean放在<font color=red><strong>IoC Container</strong></font>中。</li><li>Spring引入不同方式(包括<font color=red> <strong>xml配置，Java配置，注解配置</strong> </font>)来配置Bean，为了能让用户更好配置Bean。</li><li>Spring框架负责Bean的生成，同时也负责管理整个Bean的生命周期。</li><li>应用程序从IoC Container中获取依赖的Bean, 注入到应用程序中, 这个过程叫<font color=red> <strong>依赖注入(Dependency Injection，DI)。</strong> </font> 控制反转是通过依赖注入实现的，其实它们是同一个概念的不同角度描述。 <strong>IoC是设计思想，DI是实现方式</strong> 。</li><li>依赖注入使用<font color=red><strong>构造器方式</strong></font>(包括 @Autowired, @Resource, @Qualifier… )。</li></ol><br><h3 id="理解IoC"><a href="#理解IoC" class="headerlink" title="理解IoC"></a>理解IoC</h3><h4 id="1-Spring-Bean是什么？"><a href="#1-Spring-Bean是什么？" class="headerlink" title="(1) Spring Bean是什么？"></a>(1) Spring Bean是什么？</h4><p>Spring Bean类似于定义的一个组件，这个组件的作用是实现某个功能。使用Bean是<strong>使用一种更为简便的方法来调用这个组件实现功能</strong>。</p><br><h4 id="2-IoC是什么？"><a href="#2-IoC是什么？" class="headerlink" title="(2) IoC是什么？"></a>(2) IoC是什么？</h4><p>一种设计思想。IoC意味着<strong>将设计好的对象交给容器控制</strong>，而不是传统的在对象内部直接控制。</p><p>IoC/DI思想中，应用程序变成被动的，被动等待IoC容器来创建并注入它所需要的资源。即<strong>由IoC容器帮对象找到相应的依赖对象并注入，而不是对象主动去找</strong>。</p><br><h4 id="3-IoC和DI的关系？"><a href="#3-IoC和DI的关系？" class="headerlink" title="(3) IoC和DI的关系？"></a>(3) IoC和DI的关系？</h4><p> <strong>“ IoC是设计思想，DI是实现方式 ”</strong> 。</p><p> <strong>DI—Dependency Injection，即依赖注入：</strong></p><p>容器动态的将某个依赖关系注入到组件之中，依赖注入的目的并非为软件系统带来更多的功能，而是为了提升组件重用的频率，为系统搭建一个可扩展的平台。</p><p> 通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。 </p><p><font color=red>依赖：</font> 应用程序依赖IoC容器。需要IoC容器提供对象需要的外部资源。</p><p><font color=red>注入：</font> IoC容器注入应用程序中的某个对象所需要的外部资源(对象、资源、常量数据等)。</p><hr><h3 id="IoC-配置"><a href="#IoC-配置" class="headerlink" title="IoC 配置"></a>IoC 配置</h3><p>xml配置、Java配置、注解配置。【主流方式：<font color=red><strong>注解 + Java配置</strong></font>】</p><p><strong>(1) xml配置</strong></p><p>将bean的信息配置.xml文件中，通过Spring加载文件为我们创建bean。</p><br><p><strong>(2) Java配置</strong></p><p>将类的创建交给配置的JavcConfig类完成，Spring只负责维护和管理，使用纯Java的方式。</p><p>本质就是将XML上的配置声明转移到Java配置中去。</p><br><p><strong>(3) 注解配置</strong></p><p>通过在类上加注解的方式，声明一个类交给Spring管理。Spring会自动扫描带注解( @Component，@Controller，@Service，@Repository )的类，并创建和管理。</p><hr><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>主要有三种方式：<strong>构造方法注入(Construct注入)、setter注入、基于注解的注入(接口注入)</strong></p><hr><h3 id="AOP-面向切面"><a href="#AOP-面向切面" class="headerlink" title="AOP 面向切面"></a>AOP 面向切面</h3><p> <strong>给Service所有方法调用添加日志</strong>（调用方法时)， 本质上是<strong>解耦问题</strong>； </p><p> <strong>如果没有Spring框架，我们需要在每个service的方法中都添加记录日志的方法</strong> 。</p><p> <strong>有了Spring框架，通过@Aspect注解 定义了切面，这个切面中定义了拦截所有service中的方法，并记录日志；</strong> </p><p> 框架将日志记录和业务需求的代码解耦了，不再是侵入式的了。 </p><p>Spring 框架通过定义切面, 通过拦截切点实现了不同业务模块的解耦。这就是 <strong>面向切面编程(AOP)</strong> 。</p><p><font color=red><strong>AOP的理念：将分散在各个业务逻辑代码中相同的代码通过横向切割的方式抽取到一个独立的模块中。</strong></font>【<strong>横向</strong>】</p><img src="/2022/01/06/2_5_SpringMVC/1639969412092.png" class="" width="1639969412092"><p>相对应的是：<strong>OOP(面向对象编程)</strong> ，即针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰的逻辑单元划分。【<strong>纵向</strong>】</p>]]></content>
    
    
    <summary type="html">Java中Spring相关内容。</summary>
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/15】Java_基础知识点(二)</title>
    <link href="http://example.com/2022/01/06/2_4_%E5%9F%BA%E7%A1%80%E5%BC%BA%E5%8C%96/"/>
    <id>http://example.com/2022/01/06/2_4_%E5%9F%BA%E7%A1%80%E5%BC%BA%E5%8C%96/</id>
    <published>2022-01-06T05:30:16.683Z</published>
    <updated>2021-12-18T14:19:38.926Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="基础强化"><a href="#基础强化" class="headerlink" title="基础强化"></a>基础强化</h2><h3 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a><code>Junit</code>单元测试</h3><p>测试分类：黑盒测试[不需要写代码]、白盒测试[需要写代码测试]</p><p>黑盒测试：给输入值，看程序是否能输出期望的值。</p><p>白盒测试：需要写代码。关注程序具体的执行流程。</p><ul><li><p>步骤</p><ol><li>定义一个测试类(测试用例)<ul><li>测试类名：<code>被测试的类名Test</code></li><li>包名：<code>xxx.xxx.xxx.test</code></li></ul></li><li>定义测试的方法：可以独立运行<ul><li>方法名：test测试的方法名        <code>testAdd()</code></li><li>返回值：<code>void</code></li><li>参数列表：空参</li></ul></li><li>给方法加<code>@Test</code></li><li>导入<code>junit</code>依赖环境</li></ol></li><li><p>判定结果：</p><p>​    绿色：成功</p><p>​    红色：失败</p><p>​    一般使用断言操作<code>Assert</code>来处理结果</p></li></ul><p>两个注解：<code>@Before</code> [执行测试方法之前执行] 和 <code>@After</code> [执行测试方法之后执行]。</p><hr><h3 id="反射：框架的设计灵魂"><a href="#反射：框架的设计灵魂" class="headerlink" title="反射：框架的设计灵魂"></a>反射：框架的设计灵魂</h3><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码。</p><p><strong>反射机制</strong>：将类的各个组成部分封装成其他对象，这就是反射机制。</p><ul><li>好处：<ul><li>在程序的运行过程中操作这些对象。</li><li>可以解耦，提供程序的可扩展性。</li></ul></li></ul><p>获取<code>Class</code>对象的方式：</p><ol><li><code>Class.forName(&quot;全类名&quot;)</code>:将字节码文件加载进内存，返回Class对象。<ul><li>多用于配置文件中，将类名定义在配置文件中，读取文件，加载类。</li></ul></li><li><code>类名.class</code>：通过类名的属性class获取。<ul><li>多用于参数的传递。</li></ul></li><li><code>对象.getClass()</code>:<code>getClass()</code>方法在Object类中定义。<ul><li>多用于对象的获取字节码的方式。</li></ul></li></ol><p>注：同一字节码文件<code>*.class</code> 在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的class对象都是同一个。</p><p><code>Class</code>对象功能：</p><ol><li><p>获取成员变量们</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo23_Reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   Class获取功能：</span></span><br><span class="line"><span class="comment">*       获取成员变量们：</span></span><br><span class="line"><span class="comment">*           1.Field[] getFields() 获取所有的public修饰的成员变量。</span></span><br><span class="line"><span class="comment">*           2.Field getField(String name) 获取指定名称的public修饰的成员变量</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           3.Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符。</span></span><br><span class="line"><span class="comment">*           4.Field getDeclaredField(String name)</span></span><br><span class="line"><span class="comment">*       操作：</span></span><br><span class="line"><span class="comment">*           1.设置值</span></span><br><span class="line"><span class="comment">*           2.获取值</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Filed</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 0.获取Person的Class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        Field[] fields = personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field a = personClass.getField(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取成员变量a的值</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Object value = a.get(p);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">// 设置a的值</span></span><br><span class="line">        a.set(p,<span class="string">&quot;菲利普&quot;</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符。</span></span><br><span class="line">        Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(declaredField);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.Field getDeclaredField(String name)</span></span><br><span class="line">        Field d = personClass.getDeclaredField(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="comment">// 忽略权限修饰符的安全检查</span></span><br><span class="line">        d.setAccessible(<span class="keyword">true</span>); <span class="comment">// 暴力反射</span></span><br><span class="line">        Object value2 = d.get(p);</span><br><span class="line">        System.out.println(value2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获取构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo23_Reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   获取构造的方法</span></span><br><span class="line"><span class="comment">*       Constructor&lt;?&gt;[] getConstructors()</span></span><br><span class="line"><span class="comment">*       Constructor&lt;T&gt; getConstructors(类&lt;?&gt;... parameter Types)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*       Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameter Types)</span></span><br><span class="line"><span class="comment">*       Constructor&lt;?&gt;[] getDeclaredConstructors()</span></span><br><span class="line"><span class="comment">*   创建对象：</span></span><br><span class="line"><span class="comment">*       T newInstance(Object... initargs);</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_Constructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Person的class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Constructor&lt;T&gt; getConstructors(类&lt;?&gt;... parameter Types)</span></span><br><span class="line">        Constructor constructor = personClass.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        Object person = constructor.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 空参构造方法</span></span><br><span class="line">        Constructor constructor1 = personClass.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        Object person1 = constructor1.newInstance();</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化空参构造方法</span></span><br><span class="line">        Object o = personClass.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获取成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo23_Reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   获取成员方法：</span></span><br><span class="line"><span class="comment">*       Method[] getMethod()</span></span><br><span class="line"><span class="comment">*       Method getMethod(String name, 类&lt;T&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*       Method[] getDeclaredMethod()</span></span><br><span class="line"><span class="comment">*       Method getDeclaredMethod(String name, 类&lt;T&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03_Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 0.创建一个class对象</span></span><br><span class="line">        Class peronClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定的方法</span></span><br><span class="line">        Method eat_method = peronClass.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        eat_method.invoke(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        Method eat_food_method = peronClass.getMethod(<span class="string">&quot;eat_food&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        eat_food_method.invoke(p,<span class="string">&quot;饭&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类名</span></span><br><span class="line">        String className = peronClass.getName();</span><br><span class="line">        System.out.println(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>反射案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo23_Reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   案例：</span></span><br><span class="line"><span class="comment">*       需求：写一个框架，在不改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中的任意方法。</span></span><br><span class="line"><span class="comment">*       实现：</span></span><br><span class="line"><span class="comment">*           1.配置文件</span></span><br><span class="line"><span class="comment">*           2.反射</span></span><br><span class="line"><span class="comment">*       步骤：</span></span><br><span class="line"><span class="comment">*           1.将需要创建的对象的全类名和需要执行的方法定义在配置文件中。</span></span><br><span class="line"><span class="comment">*           2.在程序中加载读取配置文件。</span></span><br><span class="line"><span class="comment">*           3.使用反射技术来加载类文件进内存。</span></span><br><span class="line"><span class="comment">*           4.创建对象。</span></span><br><span class="line"><span class="comment">*           5.执行方法。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04_ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载配置文件</span></span><br><span class="line">        <span class="comment">// 1.1创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 1.2加载配置文件，转化成一个集合</span></span><br><span class="line">        <span class="comment">// 1.2.1获取class目录下的配置文件</span></span><br><span class="line">        ClassLoader classLoader = Demo04_ReflectTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取配置文件中定义的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        <span class="comment">// 4.创建对象</span></span><br><span class="line">        Object o = cls.newInstance();</span><br><span class="line">        <span class="comment">// 5.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">// 6.执行方法</span></span><br><span class="line">        method.invoke(o);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="注解-【不太明白】"><a href="#注解-【不太明白】" class="headerlink" title="注解 【不太明白】"></a>注解 【不太明白】</h3><p>注解：说明程序的，给计算机看的。</p><p>注释：用文字描述程序。给开发人员看的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IDEA中添加注解的方式: /**... + Enter</span></span><br><span class="line">    <span class="comment">/**..</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>作用分类：</p><ol><li>编写文档：通过代码里标识的注解生成文档【生成文档doc文档】</li><li>代码分析：通过代码里标识的注解对代码进行分析【使用反射】</li><li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ol><p><code>JDK</code> 中预定义的一些注解：</p><ol><li><code>@Override</code> : 检测被该注解标注的方法是否继承自父类(接口)的。</li><li><code>Deprecated</code> : 该注解标注的内容，表示已过时。</li><li><code>SuppressWarning</code> : 压制警告。</li></ol><p>自定义注解：</p><ol><li><p>元注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span> <span class="comment">// 描述注解能作用的位置</span></span><br><span class="line"><span class="meta">@Retention</span> <span class="comment">// 描述注解被保留的阶段</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">// 描述注解是否被抽取到api文档中</span></span><br><span class="line"><span class="meta">@Inherited</span> <span class="comment">// 描述注解是否被子类继承</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">    <span class="comment">// 属性列表;(本质就是成员方法)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本质：注解的本质就是一个接口，该接口默认继承Annotation接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAnno</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性：接口中可以定义的成员方法。接口中的抽象方法。</p><p>​    要求：（1）属性的返回值是(基本数据类型、String、枚举、注解、以上类型的数组)。</p><p>​                （2）定义了属性，在使用时需要给属性赋值。</p><p>​                        ① 如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</p><p>​                        ② 如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略。</p><p>​                        ③ 数组赋值时，使用{}包裹。</p></li></ol><p><code>Demo01_Anno.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo24_Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.tree.analysis.Value;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="comment">// 8888888888888888888888888888888888888888888888888888888</span></span><br><span class="line"><span class="meta">@MyAnno(value = 1,per = Person.P1,anno2 = @MyAnno2,strs = &#123;&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;&#125;)</span> <span class="comment">// 添加注解的方式</span></span><br><span class="line"><span class="comment">// 8888888888888888888888888888888888888888888888888888888</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Anno</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 有缺陷</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 替代show1方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MyAnno.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo24_Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    <span class="comment">//int age();</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    String[] strs();</span><br><span class="line">    <span class="function">Person <span class="title">per</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">MyAnno2 <span class="title">anno2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Person.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo24_Annotation;</span><br><span class="line"><span class="comment">// 枚举类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">    P1,P2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MyAnno2.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo24_Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno2 &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>以后大多数时间，仅仅是使用注解而不是自定义注解。</li><li>注解给谁用？<ol><li>编译器</li><li>解析程序</li></ol></li><li>注解不是程序的一部分。</li></ol><hr>]]></content>
    
    
    <summary type="html">Java中基础知识点总结(二)。【单元测试、框架、注解】</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/14】Java_Stream流</title>
    <link href="http://example.com/2022/01/06/2_3_Stream%E6%B5%81/"/>
    <id>http://example.com/2022/01/06/2_3_Stream%E6%B5%81/</id>
    <published>2022-01-06T05:30:16.671Z</published>
    <updated>2021-12-18T14:15:35.846Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><p>对集合和数组进行优化操作。</p><p><code>Stream流</code> 是一个集合元素的函数模型，调用指定的方法可以从一个流模型转换成另一个流模型。其本身**并不存储任何元素(或地址值)**。</p><p><code>Stream流</code>的基础特征：</p><ol><li>Pipelining：中间操作的对象都会返回流本身。多个操作可以串联成一个管道，如同流式风格(fluent style)。这样可以对操作进行优化，比如延迟执行(laziness)和短路(short-circuiting).    <code>Stream流</code>属于管道流，只能被消费一次。</li><li>内部迭代：之前的遍历操作通过Iterator或者增强for循环进行操作，显式的在集合外部进行迭代。Stream提供了内部迭代的方式，流可以直接调用遍历方法。</li></ol><p>流模型常用<code>API</code>，方法可以被分为两种：</p><ol><li><strong>延迟方法</strong>：返回值类型仍是 <code>Stream</code> 接口自身类型的方法，支持<strong>链式调用</strong>。（除了终结方法，其余方法都是延迟方法）</li><li><strong>终结方法</strong>：返回值类型不再是 <code>Stream</code> 接口自身类型的方法，因此不再支持类似 <code>StringBuilder</code> 那样的链式调用。终结方法包括 <code>count</code> 和 <code>forEach</code> 方法。</li></ol><hr><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><p><code>Demo01List.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo21_Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   使用传统方式遍历集合，对集合中的数据进行过滤。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01List</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个List集合，存储姓名。</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;杨过&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张强&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周杰伦&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对list集合中的元素进行过滤，只要以张开头的元素，存储到一个新的集合中去</span></span><br><span class="line">        List&lt;String&gt; listA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;张&quot;</span>)) &#123;</span><br><span class="line">                listA.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对集合listA中的元素进行过滤，只要长度为3的元素，存储到新的集合中去</span></span><br><span class="line">        List&lt;String&gt; listB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : listA) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length()==<span class="number">3</span>) &#123;</span><br><span class="line">                listB.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印listB</span></span><br><span class="line">        <span class="keyword">for</span> (String s : listB) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Demo02Stream.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo21_Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   Stream流关注的是做什么而不是怎么做。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Stream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个List集合，存储姓名。</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;杨过&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张强&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周杰伦&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对list集合中的元素进行过滤，只要以张开头的元素，存储到一个新的集合中去</span></span><br><span class="line">        <span class="comment">// 对集合listA中的元素进行过滤，只要长度为3的元素，存储到新的集合中去</span></span><br><span class="line">        <span class="comment">// 打印listB</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(name-&gt;name.startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">                .filter(name-&gt;name.length()==<span class="number">3</span>)</span><br><span class="line">                .forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><p><code>Demo03StreamUse.java</code>：Stream流的一些方法的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo21_Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.util.stream.Stream&lt;T&gt;是java8新加入的常用的流接口(并不是一个函数式接口)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   获取一个流有以下几种方式</span></span><br><span class="line"><span class="comment">*       1. 所有的Collection集合都可以通过stream默认方法获取流。</span></span><br><span class="line"><span class="comment">*           default Stream&lt;E&gt; stream()</span></span><br><span class="line"><span class="comment">*       2. Stream接口的静态方法of可以获取数组对应的流。</span></span><br><span class="line"><span class="comment">*           static &lt;T&gt; Stream&lt;T&gt; of (T... value)</span></span><br><span class="line"><span class="comment">*           参数是一个可变参数，我们可以传递一个数组。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StreamUse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 把集合转换为Stream流</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream2 = set.stream();</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取map集合中的键</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        Stream&lt;String&gt; stream3 = keySet.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取map集合中的值</span></span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        Stream&lt;String&gt; stream4 = values.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取键值对</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">        Stream&lt;Map.Entry&lt;String, String&gt;&gt; stream5 = entries.stream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把数组转换成Stream流</span></span><br><span class="line">        Stream&lt;Integer&gt; stream6 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 可变参数传递数组</span></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Stream&lt;Integer&gt; stream7 = Stream.of(arr);</span><br><span class="line">        String[] arr2 = &#123;<span class="string">&quot;123&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;dd&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream8 = Stream.of(arr2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   如果需要将流中的元素映射到另一个流中，可以使用map方法。</span></span><br><span class="line"><span class="comment">        *   &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</span></span><br><span class="line"><span class="comment">        *   该接口需要一个Function函数式接口参数，可以将当前流中的T类型数据转换成另一种R类型的流。</span></span><br><span class="line"><span class="comment">        *   Function中的抽象方法：</span></span><br><span class="line"><span class="comment">        *       R apply(T t);</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">// 获取一个String类型的Stream流</span></span><br><span class="line">        Stream&lt;String&gt; mapStream = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用map方法把字符串类型的整数，转换(映射)为Integer类型的整数</span></span><br><span class="line">        Stream&lt;Integer&gt; int_stream = mapStream.map((String s)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        int_stream.forEach(i-&gt; System.out.print(i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   Stream流中常用的方法 count:用于统计Stream流中元素的个数。</span></span><br><span class="line"><span class="comment">        *   long count();</span></span><br><span class="line"><span class="comment">        *   count方法是一个终结方法，返回值是一个long类型的整数。</span></span><br><span class="line"><span class="comment">        *   所以不能再调用Stream流中的方法了。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list_count = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list_count.add(<span class="number">1</span>);</span><br><span class="line">        list_count.add(<span class="number">2</span>);</span><br><span class="line">        list_count.add(<span class="number">3</span>);</span><br><span class="line">        list_count.add(<span class="number">4</span>);</span><br><span class="line">        list_count.add(<span class="number">5</span>);</span><br><span class="line">        list_count.add(<span class="number">6</span>);</span><br><span class="line">        Stream&lt;Integer&gt; stream_count = list_count.stream();</span><br><span class="line">        <span class="keyword">long</span> count = stream_count.count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   Stream流中常用的方法 limit:用于截取流中的元素。</span></span><br><span class="line"><span class="comment">        *   limit方法可以对流进行截取，只取用前n个。</span></span><br><span class="line"><span class="comment">        *   Stream&lt;T&gt; limit(long maxSize);</span></span><br><span class="line"><span class="comment">        *       参数是一个long型，如果集合当前长度大于参数则进行截取；否则不操作。</span></span><br><span class="line"><span class="comment">        *   limit是一个延迟方法，只是对流中的元素进行截取，返回的是一个新的流，所以可以继续调用Stream流中的其他方法。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        String[] arr3 = &#123;<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ddd&quot;</span>,<span class="string">&quot;eee&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream_limit = Stream.of(arr3);</span><br><span class="line">        Stream&lt;String&gt; limit = stream_limit.limit(<span class="number">3</span>);</span><br><span class="line">        limit.forEach(name-&gt; System.out.println(name));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   希望跳过前面几个元素，可以使用skip方法获取一个截取之后的新流：</span></span><br><span class="line"><span class="comment">        *   Stream&lt;T&gt; skip(long n);</span></span><br><span class="line"><span class="comment">        *   如果流的当前长度大于n，则跳过前n个；否则将得到一个长度为0的空流。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; skip = original.skip(<span class="number">2</span>);</span><br><span class="line">        System.out.println(skip.count());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   如果两个流，希望合并成一个流，可以使用Stream接口的静态方法concat.</span></span><br><span class="line"><span class="comment">        *   static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt;a, Stream&lt;? extends T&gt;b)</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Stream&lt;String&gt; aaa = Stream.of(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; bbb = Stream.of(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; result = Stream.concat(aaa, bbb);</span><br><span class="line">        result.forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><p><code>Demo04_StreamTest.java</code> :集合元素的处理(使用Stream和不使用Stream)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo21_Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   练习：集合元素的处理(传统方式)</span></span><br><span class="line"><span class="comment">*       现有两个ArrayList集合中有多个成员，按照以下要求对成员进行筛选。</span></span><br><span class="line"><span class="comment">*       1.第一个集合中只要名字为3个字的成员姓名，存储到一个新的集合中。</span></span><br><span class="line"><span class="comment">*       2.第一个队伍筛选完后只要前3个人，存储到一个新的集合中。</span></span><br><span class="line"><span class="comment">*       3.第二个队伍中只要姓名为”张“的成员，存储到一个集合中。</span></span><br><span class="line"><span class="comment">*       4.第二个队伍筛选完后不要前两个人，存储到一个新的集合中。</span></span><br><span class="line"><span class="comment">*       5.将两个队伍筛选完后的结果合并成一个新的队伍，存储到一个集合中。</span></span><br><span class="line"><span class="comment">*       6.根据姓名创建Person对象，存储到一个新的集合中。</span></span><br><span class="line"><span class="comment">*       7.打印整个Person对象信息。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04_StreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一个队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="string">&quot;盖伦&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;金克丝&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;拉克丝&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;易&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;伊泽瑞尔&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;崔斯特&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;薇古丝&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.第一个集合中只要名字为3个字的成员姓名，存储到一个新的集合中。</span></span><br><span class="line">        ArrayList&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : list1) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.length()==<span class="number">3</span>) &#123;</span><br><span class="line">                one.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.第一个队伍筛选完后只要前3个人，存储到一个新的集合中。</span></span><br><span class="line">        ArrayList&lt;String&gt; one1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            one1.add(one.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Stream进行优化</span></span><br><span class="line">        Stream&lt;String&gt; oneStream = one.stream().filter(name-&gt;name.length()==<span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list2.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;张起灵&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;迪丽热巴&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;古力娜扎&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;马儿扎哈&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;张天爱&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;张杰&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.第二个队伍中只要姓名为”张“的成员，存储到一个集合中。</span></span><br><span class="line">        ArrayList&lt;String&gt;  two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : list2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.startsWith(<span class="string">&quot;张&quot;</span>)) &#123;</span><br><span class="line">                two.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.第二个队伍筛选完后只要前两个人，存储到一个新的集合中。</span></span><br><span class="line">        ArrayList&lt;String&gt; two1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; two.size(); i++) &#123;</span><br><span class="line">            two1.add(two.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Stream进行优化</span></span><br><span class="line">        Stream&lt;String&gt; twoStream = two.stream().filter(name-&gt;name.startsWith(<span class="string">&quot;张&quot;</span>)).skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.将两个队合并成一个集合</span></span><br><span class="line">        ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        result.addAll(one1);</span><br><span class="line">        result.addAll(two1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.根据姓名创建Person对象，存储到一个新集合中。</span></span><br><span class="line">        ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : result) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Person(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.打印输出</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : list) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 优化Stream进行合并</span></span><br><span class="line">        Stream.concat(oneStream,twoStream).map(name-&gt;<span class="keyword">new</span> Person(name)).forEach(p-&gt; System.out.println(p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中Stream流相关内容。【三个案例】</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/13】Java_函数式接口</title>
    <link href="http://example.com/2022/01/06/2_2_%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2022/01/06/2_2_%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-01-06T05:30:16.658Z</published>
    <updated>2021-12-18T14:13:37.085Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口：<strong>有且仅有一个抽象方法的接口</strong>。</p><p>适用于函数式编程[Lambda]。</p><p><code>Demo01_MyFunctionalInterface.java</code> : 定义一个函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo19_FunctionalInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   函数式接口：有且仅有一个抽象方法的接口，称之为函数式接口。</span></span><br><span class="line"><span class="comment">*   接口中还可以有别的方法(默认，静态，私有)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   @FunctionalInterface注解</span></span><br><span class="line"><span class="comment">*   作用：可以检测接口是否是一个函数式接口</span></span><br><span class="line"><span class="comment">*       是：编译成功</span></span><br><span class="line"><span class="comment">*       否：编译失败(接口中没有抽象方法或是抽象方法的个数多于1个)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Demo01_MyFunctionalInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MyFunctionalInterfaceImpl</code> : 定义接口的实现类对象，重写其抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo19_FunctionalInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFunctionalInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">Demo01_MyFunctionalInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Demo.java</code> : 测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo19_FunctionalInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*       函数式接口的使用：一般可以作为方法的参数和返回值类型。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Demo01_MyFunctionalInterface inter)</span> </span>&#123;</span><br><span class="line">        inter.method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用show方法，方法的参数是一个接口，所以可以传递接口的实现类对象。</span></span><br><span class="line">        show(<span class="keyword">new</span> MyFunctionalInterfaceImpl());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用show方法，方法的参数是一个接口，所以我们可以传递接口的匿名内部类</span></span><br><span class="line">        show(<span class="keyword">new</span> Demo01_MyFunctionalInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写接口中的抽象方法！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用show方法，方法的参数是一个函数式接口，所以我们可以Lambda表达式</span></span><br><span class="line">        show(()-&gt; System.out.println(<span class="string">&quot;使用Lambda表达式重写接口中的抽象方法！&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p><code>Lambda表达式</code> ：延迟加载。</p><h3 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo20_Lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个方法startThread,方法的参数使用函数式接口Runnable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">(Runnable run)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 开启多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用startThread方法，方法的参数是一个接口，可以考虑使用这个接口的匿名内部类</span></span><br><span class="line">        startThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&quot;</span>+<span class="string">&quot;线程启动！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用startThread方法，方法的参数是一个函数式接口，可以传递Lambda表达式</span></span><br><span class="line">        startThread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&quot;</span>+<span class="string">&quot;线程启动！&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数式接口作为方法的返回值类型"><a href="#函数式接口作为方法的返回值类型" class="headerlink" title="函数式接口作为方法的返回值类型"></a>函数式接口作为方法的返回值类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo20_Lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*          一个方法的返回值是一个函数式接口，那么就可以直接返回一个Lambda表达式。</span></span><br><span class="line"><span class="comment">*           当需要一个方法来获取一个java.util.Comparator接口类型的对象作为排序器时，就可以调用该方法获取。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_Comparator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个方法，方法的返回值类型使用函数式接口Comparator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title">getComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String o1,String o2) &#123;</span></span><br><span class="line"><span class="comment">//                // 字符串的降序排序</span></span><br><span class="line"><span class="comment">//                return o2.length()-o1.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法的返回值类型是一个函数式接口，所以我们可以返回一个Lambda表达式</span></span><br><span class="line">        <span class="keyword">return</span> (String o1,String o2)-&gt;&#123;</span><br><span class="line">            <span class="comment">// 字符串的降序排序</span></span><br><span class="line">            <span class="keyword">return</span> o2.length()-o1.length();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继续优化Lambda表达式</span></span><br><span class="line">        <span class="comment">//return ((o1, o2) -&gt; o2.length()-o1.length());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个字符串数组</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;aaaa&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;dd&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">// 输出字符串</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">// 调用Arrays中的sort方法，对字符串数组进行排序</span></span><br><span class="line">        Arrays.sort(arr,getComparator());</span><br><span class="line">        <span class="comment">// 输出排序后的结果</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中函数式接口相关内容。【Lambda】</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/13】Java_网络编程</title>
    <link href="http://example.com/2022/01/06/2_1_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2022/01/06/2_1_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2022-01-06T05:30:16.640Z</published>
    <updated>2021-12-18T14:10:50.491Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="1-软件结构"><a href="#1-软件结构" class="headerlink" title="(1) 软件结构"></a>(1) 软件结构</h3><p><code>C/S结构</code> :客户端/服务器。</p><p><code>B/S结构</code> :浏览器/服务器。</p><p><code>TCP</code> :传输控制协议。面两连接的通信协议。提供可靠的无差错的数据传输。每次传输需要经过<strong>三次握手</strong>。</p><p><code>UDP</code> :用户数据报协议。面向无连接性。不保证数据的完整性。但是传输速度快。</p><hr><h3 id="2-网络编程三要素"><a href="#2-网络编程三要素" class="headerlink" title="(2)网络编程三要素"></a>(2)网络编程三要素</h3><p><code>协议</code> [计算机通信需要遵守的规则]、<code>IP地址</code> [互联网协议地址]、<code>端口号</code> [两个字节组成，取值范围0-65535之间]</p><p>查看本地IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ipconfig</span><br></pre></td></tr></table></figure><p>检查网络是否连通：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping ip地址</span><br></pre></td></tr></table></figure><p>通信必须保证数据准确无误的发送到对象计算机的软件上。[使用<strong>IP地址+端口号</strong>]</p><p>一些常见的<code>端口号</code> :</p><ol><li>80端口，网络端口。</li><li>数据库  mysql: 3306 oracle: 1521</li><li>Tomcat服务器：8080</li></ol><hr><h3 id="3-TCP通信程序"><a href="#3-TCP通信程序" class="headerlink" title="(3) TCP通信程序"></a>(3) TCP通信程序</h3><p>TCP通信实现两台计算机之间的数据交互，通信的两端严格区分**客户端(Client)和服务端(Server)**。</p><p>通信的步骤：</p><p>服务器端先启动，服务器端不会主动的请求客户端，必须使用客户端请求服务器端。</p><p>客户端和服务器端建立一个逻辑链接，这个连接中包含一个对象，这个对象就是<strong>IO对象</strong>。</p><p>客户端与服务器端就可以使用IO对象进行通信。</p><p>通信的不止是字符，所以IO对象是<strong>字节流对象</strong>。</p><p>服务器端需要明确的事情：</p><ol><li>多个客户端同时与服务器进行交互，服务器必须明确和哪个客户端进行交互。在服务器端有一个方法，叫accept客户端获取到请求的客户端对象。</li><li>多个客户端同时和服务器进行交互，就需要使用多个IO流对象。</li><li><font color=red>服务器端使用客户端的流和客户端交互。</font></li></ol><h4 id="实验1：测试服务器端与客户端进行通信"><a href="#实验1：测试服务器端与客户端进行通信" class="headerlink" title="实验1：测试服务器端与客户端进行通信"></a>实验1：测试服务器端与客户端进行通信</h4><p><code>Demo01_TCPClient.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   TCP通信的客户端：向服务器发送请求，给服务器发送数据，读取服务器返回的数据。</span></span><br><span class="line"><span class="comment">*   表示客户端的类：</span></span><br><span class="line"><span class="comment">*       java.net.Socket:此类实现客户端套接字(&quot;套接字&quot;)，套接字是两台机器间通信的端点。</span></span><br><span class="line"><span class="comment">*       套接字：包含了IP地址和端口号的网络单位。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       Socket(String host, int port) 创建一个流套接字并将其连接到指定主机的指定端口号。</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           String host： 服务器主机的名称/服务器的IP地址</span></span><br><span class="line"><span class="comment">*           int port: 服务器的端口号。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   成员方法：</span></span><br><span class="line"><span class="comment">*       OutputStream getOutputStream() 返回此套接字的输出流。</span></span><br><span class="line"><span class="comment">*       InputStream getInputStream() 返回此套接字的输入流。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建一个客户端对象Socket，构建方法绑定服务器的IP地址和端口号。</span></span><br><span class="line"><span class="comment">*       2. 使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       3. 使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据。</span></span><br><span class="line"><span class="comment">*       4. 使用Socket对象中的方法getInputStream获取网络字节输入流InputStream对象。</span></span><br><span class="line"><span class="comment">*       5. 使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据。</span></span><br><span class="line"><span class="comment">*       6. 释放资源。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   注意：</span></span><br><span class="line"><span class="comment">*       1. 客户端和服务器进行交互，必须使用Socket中提供的网络流，不能自己创建流对象。</span></span><br><span class="line"><span class="comment">*       2. 当我们创建客户端对象Socket的时候，就会去请求服务器和服务器经过三次握手建立连接通路。</span></span><br><span class="line"><span class="comment">*               这时如果服务器没有启动，那么就会抛出异常</span></span><br><span class="line"><span class="comment">*               如果服务器已经启动，就可以进行交互了。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_TCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个客户端对象Socket，构建方法绑定服务器的IP地址和端口号。</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">// 2. 使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 3. 使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据。</span></span><br><span class="line">        os.write(<span class="string">&quot;你好服务器&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 4. 使用Socket对象中的方法getInputStream获取网络字节输入流InputStream对象。</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 5. 使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">// 6. 释放资源。</span></span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Demo02_Server.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   TCP通信的服务器端：接收客户端的请求，读取客户端发送的数据，给客户端返回数据。</span></span><br><span class="line"><span class="comment">*   表示服务器的类：</span></span><br><span class="line"><span class="comment">*       java.net.ServerSocket:此类实现服务器套接字。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       ServerSocket(int port) 创建绑定到指定端口的服务器套接字</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   服务器端必须明确一件事情，必须要知道是哪个客户端请求的服务器。</span></span><br><span class="line"><span class="comment">*   所以使用accept方法获取到请求的客户端对象Socket</span></span><br><span class="line"><span class="comment">*   成员方法：</span></span><br><span class="line"><span class="comment">*       Socket accept() 侦听并接收此套接字的连接。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   服务器端的实现步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建服务器ServerSocket对象和系统指定得端口号。</span></span><br><span class="line"><span class="comment">*       2. 使用ServerSocket对象中的方法accept，获取道请求的客户端对象Socket。</span></span><br><span class="line"><span class="comment">*       3. 使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象。</span></span><br><span class="line"><span class="comment">*       4. 使用InputStream对象中的方法read，读取客户端发送的请求数据。</span></span><br><span class="line"><span class="comment">*       5. 使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       6. 使用OutputStream对象中的方法write，给客户端回写数据。</span></span><br><span class="line"><span class="comment">*       7. 释放资源(Socket,ServerSocket)。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建服务器ServerSocket对象和系统指定得端口号。</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">// 2. 使用ServerSocket对象中的方法accept，获取道请求的客户端对象Socket。</span></span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 3. 使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象。</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 4. 使用InputStream对象中的方法read，读取客户端发送的请求数据。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">// 5. 使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 6. 使用OutputStream对象中的方法write，给客户端回写数据。</span></span><br><span class="line">        os.write(<span class="string">&quot;收到&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 7. 释放资源(Socket,ServerSocket)。</span></span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="实验2-TCP通信实现文件的上传"><a href="#实验2-TCP通信实现文件的上传" class="headerlink" title="实验2: TCP通信实现文件的上传"></a>实验2: TCP通信实现文件的上传</h4><p><strong>原理:</strong> 客户端读取本地的文件，上传至服务器，服务器将上传的文件保存到服务器硬盘上。</p><img src="/2022/01/06/2_1_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1639366205848.png" class=""><p><strong>流程:</strong> </p><ol><li>客户端使用<font color=blue>本地字节输入流</font>，读取要上传的文件。</li><li>客户端使用<font color=green>网络字节输出流</font>，把读取到的文件上传至服务器。</li><li>服务器使用<font color=green>网络字节输入流</font>，读取客户端上传的文件。</li><li>服务器使用<font color=blue>本地字节输出流</font>，把读取到的文件，保存到服务器的硬盘上。</li><li>服务器使用<font color=green>网络字节输出流</font>，给客户端回写“上传成功”。</li><li>客户端使用<font color=green>网络字节输入流</font>，读取服务器回写的数据。</li><li>释放资源。</li></ol><p><strong>注意:</strong> </p><ol><li>客户端和服务器的本地硬盘进行读写，需要使用自己创建的字节流对象(本地流)。</li><li>客户端和服务器进行读写，必须使用Socket中提供的字节流对象(网络流)。</li><li>文件上传的原理，就是文件的复制。明确数据源、数据目的地。</li></ol><p><code>FileUploadClient.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   文件上传案例的客户端：读取本地文件，上传至服务器，读取服务器回写的数据。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   明确：</span></span><br><span class="line"><span class="comment">*       数据源：</span></span><br><span class="line"><span class="comment">*       目的地：服务器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1.创建一个本地字节输入流FileInputStream对象，构造方法中绑定要读取的数据源。</span></span><br><span class="line"><span class="comment">*       2.创建一个客户端Socket对象，构造方法中绑定服务器的IP地址和端口号。</span></span><br><span class="line"><span class="comment">*       3.使用Socket中的方法getOutputStream,获取网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       4.使用本地字节输入流FileInputStream对象中的方法read，读取本地文件。</span></span><br><span class="line"><span class="comment">*       5.使用网络字节输出流OutputStream对象中的方法write，将读取的本地文件的数据上传至服务器。</span></span><br><span class="line"><span class="comment">*       6.使用Socket中的方法getInputStream,获取网络字节输入流InputStream对象.</span></span><br><span class="line"><span class="comment">*       7.使用网络字节输入流InputStream对象中的方法read读取服务回写的数据。</span></span><br><span class="line"><span class="comment">*       8.释放资源（FileInputStream,Socket）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03_FileUploadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建一个本地字节输入流FileInputStream对象，构造方法中绑定要读取的数据源。</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\client_upload\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.创建一个客户端Socket对象，构造方法中绑定服务器的IP地址和端口号。</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 3.使用Socket中的方法getOutputStream,获取网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 4.使用本地字节输入流FileInputStream对象中的方法read，读取本地文件。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 5.使用网络字节输出流OutputStream对象中的方法write，将读取的本地文件的数据上传至服务器。</span></span><br><span class="line">            os.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上传完文件，给服务器写一个结束标记。</span></span><br><span class="line">        <span class="comment">// void shutdownOutput() 禁用此套接字的输出流</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.使用Socket中的方法getInputStream,获取网络字节输入流InputStream对象.</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 7.使用网络字节输入流InputStream对象中的方法read读取服务回写的数据。</span></span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8.释放资源（FileInputStream,Socket）</span></span><br><span class="line">        fis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>FileUploadServer.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   文件上传案例的服务器端：读取本地文件，上传至服务器，读取服务器回写的数据。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   明确：</span></span><br><span class="line"><span class="comment">*       数据源：</span></span><br><span class="line"><span class="comment">*       目的地：服务器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1.创建一个服务器ServerSocket对象，和系统要指定的端口号。</span></span><br><span class="line"><span class="comment">*       2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line"><span class="comment">*       3.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象。</span></span><br><span class="line"><span class="comment">*       4.判断是否存在文件夹(d:\\upload)，不存在则创建。</span></span><br><span class="line"><span class="comment">*       5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"><span class="comment">*       6.使用网络字节输入流InputStream对象中的方法read,读取客户端上传的文件。</span></span><br><span class="line"><span class="comment">*       7.使用本地字节输出流FileOutputStream对象中的方法write,把读取到的文件保存到服务器的硬盘上。</span></span><br><span class="line"><span class="comment">*       8.使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写“上传成功”</span></span><br><span class="line"><span class="comment">*       10.释放资源(FileOutputStream,Socket,ServerSocket)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04_FileUploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建一个服务器ServerSocket对象，和系统要指定的端口号。</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 3.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象。</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">// 4.判断是否存在文件夹(d:\\upload)，不存在则创建。</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\upload&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(file.exists())) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file+<span class="string">&quot;\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 6.使用网络字节输入流InputStream对象中的方法read,读取客户端上传的文件。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 7.使用本地字节输出流FileOutputStream对象中的方法write,把读取到的文件保存到服务器的硬盘上。</span></span><br><span class="line">            fos.write(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8.使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写“上传成功”</span></span><br><span class="line">        os.write(<span class="string">&quot;上传成功&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 10.释放资源(FileOutputStream,Socket,ServerSocket)</span></span><br><span class="line">        fos.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化<code>FileUploadServer.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo18_Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   文件上传案例的服务器端：读取本地文件，上传至服务器，读取服务器回写的数据。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   明确：</span></span><br><span class="line"><span class="comment">*       数据源：</span></span><br><span class="line"><span class="comment">*       目的地：服务器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1.创建一个服务器ServerSocket对象，和系统要指定的端口号。</span></span><br><span class="line"><span class="comment">*       2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line"><span class="comment">*       3.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象。</span></span><br><span class="line"><span class="comment">*       4.判断是否存在文件夹(d:\\upload)，不存在则创建。</span></span><br><span class="line"><span class="comment">*       5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"><span class="comment">*       6.使用网络字节输入流InputStream对象中的方法read,读取客户端上传的文件。</span></span><br><span class="line"><span class="comment">*       7.使用本地字节输出流FileOutputStream对象中的方法write,把读取到的文件保存到服务器的硬盘上。</span></span><br><span class="line"><span class="comment">*       8.使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象。</span></span><br><span class="line"><span class="comment">*       9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写“上传成功”</span></span><br><span class="line"><span class="comment">*       10.释放资源(FileOutputStream,Socket,ServerSocket)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04_FileUploadServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建一个服务器ServerSocket对象，和系统要指定的端口号。</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   优化2 让服务器一直处于监听状态</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象。</span></span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *   优化3 多线程技术，提升上传效率</span></span><br><span class="line"><span class="comment">            *   有一个文件，开一个线程，完成文件的上传。</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="comment">// 完成文件的上传</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="comment">// 3.使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象。</span></span><br><span class="line">                        InputStream is = socket.getInputStream();</span><br><span class="line">                        <span class="comment">// 4.判断是否存在文件夹(d:\\upload)，不存在则创建。</span></span><br><span class="line">                        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\upload&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(!(file.exists())) &#123;</span><br><span class="line">                            file.mkdir();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         *   优化1 文件名问题</span></span><br><span class="line"><span class="comment">                         *   自定义文件命名规则，防止同名的文件被覆盖。</span></span><br><span class="line"><span class="comment">                         *   规则：域名+毫秒值+随机数</span></span><br><span class="line"><span class="comment">                         * */</span></span><br><span class="line">                        String FileName = <span class="string">&quot;fan&quot;</span> + System.currentTimeMillis() + <span class="keyword">new</span> Random().nextInt(<span class="number">999999</span>) + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">                        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file + <span class="string">&quot;\\&quot;</span> + FileName);</span><br><span class="line">                        <span class="comment">// 6.使用网络字节输入流InputStream对象中的方法read,读取客户端上传的文件。</span></span><br><span class="line">                        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">while</span> ((len = is.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="comment">// 7.使用本地字节输出流FileOutputStream对象中的方法write,把读取到的文件保存到服务器的硬盘上。</span></span><br><span class="line">                            fos.write(bytes);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 8.使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象。</span></span><br><span class="line">                        OutputStream os = socket.getOutputStream();</span><br><span class="line">                        <span class="comment">// 9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写“上传成功”</span></span><br><span class="line">                        os.write(<span class="string">&quot;上传成功&quot;</span>.getBytes());</span><br><span class="line">                        <span class="comment">// 10.释放资源(FileOutputStream,Socket,ServerSocket)</span></span><br><span class="line">                        fos.close();</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        System.out.println(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中网络编程相关内容。【服务器端与客户端】</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/12】23_Java_序列化流</title>
    <link href="http://example.com/2022/01/06/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/"/>
    <id>http://example.com/2022/01/06/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/</id>
    <published>2022-01-06T05:30:16.624Z</published>
    <updated>2021-12-18T13:58:08.776Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h2><img src="/2022/01/06/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/1639295964257.png" class="" width="1639295964257"><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a><code>ObjectOutputStream</code></h3><p>对象的<code>序列化流</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo17_ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.ObjectOutputStream extends OutputStream</span></span><br><span class="line"><span class="comment">*   ObjectOutputStream:对象的序列化流</span></span><br><span class="line"><span class="comment">*   作用: 把对象以流的方式写入到文件中保存。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       ObjectOutputStream(OutputStream out) 创建指定写入OutputStream的ObjectOutputStream</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           OutputStream out: 字节输出流</span></span><br><span class="line"><span class="comment">*       特有的成员方法：</span></span><br><span class="line"><span class="comment">*           void writeObject(Object obj) 将指定的对象写入ObjectOutputStream</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建一个ObjectOutputStream对象，构造方法中传递字节输出流。</span></span><br><span class="line"><span class="comment">*       2. 使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中。</span></span><br><span class="line"><span class="comment">*       3. 释放资源</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_ObjectOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        write_person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_person</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个ObjectOutputStream对象，构造方法中传递字节输出流。</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo17_ObjectStream\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 2. 使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中。</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;小美女&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo17_ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   序列化和反序列化的时候，会抛出NotSerializableException没有序列化异常。</span></span><br><span class="line"><span class="comment">*   类通过实现java.io.Serializable接口启用序列化功能。</span></span><br><span class="line"><span class="comment">*   未实现该接口的类将无法使其任何状态序列化或反序列化。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   Serializable接口称为标记接口</span></span><br><span class="line"><span class="comment">*       要实现序列化和反序列化的时候，就会检测类上是否有这个标记。</span></span><br><span class="line"><span class="comment">*       有：进行序列化和反序列化。</span></span><br><span class="line"><span class="comment">*       没有：抛出NotSerializableException没有序列化异常。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>序列化结果：</p><img src="/2022/01/06/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/1639299515522.png" class="" width="1639299515522"><hr><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a><code>ObjectInputStream</code></h3><p>对象的<code>反序列化流</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo17_ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.ObjectInputStream extends InputStream</span></span><br><span class="line"><span class="comment">*   ObjectInputStream:对象的反序列化流</span></span><br><span class="line"><span class="comment">*   作用：把文件中保存的对象，以流的方式读取出来并使用。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       ObjectInputStream(InputStream in) 创建从指定InputStream读取的ObjectInputStream.</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           InputStream in 字节输入流</span></span><br><span class="line"><span class="comment">*   特有的成员方法:</span></span><br><span class="line"><span class="comment">*       Object readObject() 从ObjectInputStream读取对象。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建ObjectInputStream对象，构造方法中传递字节输入流。</span></span><br><span class="line"><span class="comment">*       2. 使用ObjectInputStream对象方法中的readObject读取保存对象的文件。</span></span><br><span class="line"><span class="comment">*       3. 释放资源</span></span><br><span class="line"><span class="comment">*       4. 使用读取出的对象（打印）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_ObjectInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        person_read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">person_read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建ObjectInputStream对象，构造方法中传递字节输入流。</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo17_ObjectStream\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 2. 使用ObjectInputStream对象方法中的readObject读取保存对象的文件。</span></span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   readObject方法声明抛出异常，ClassNotFoundException(class文件找不到异常)</span></span><br><span class="line"><span class="comment">        *   当不存在对象的class文件时，抛出异常。</span></span><br><span class="line"><span class="comment">        *   反序列化的前提：</span></span><br><span class="line"><span class="comment">        *       1. 类必须实现Serializable.</span></span><br><span class="line"><span class="comment">        *       2. 必须存在类对应的class文件。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="comment">// 4. 使用读取出的对象（打印）</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反序列化结果：</p><img src="/2022/01/06/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/1639299599991.png" class="" width="1639299599991"><p><strong>transient关键字：瞬态关键字</strong></p><p>被序列化的都是对象。被transient修饰成员变量，不能被序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure><hr><p><code>InvalidClassException</code><strong>异常</strong></p><p><code>.java</code>文件编译成<code>.class</code>文件后，如果类进行序列化，则会生成一个序列化编号。</p><p>如果<code>.java</code>文件在编译后进行修改，则其再编译时，序列号会发生变化。再对该类进行反序列化时，会出现<code>InvalidClassException</code> 异常。（两次序列号判断不一致）</p><p><strong>解决方案：</strong></p><p>手动给类添加一个序列号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可序列化类可以通过声明名为&quot;serialVersionUID&quot;的字段，(该字段必须是静态的(static)、最终的(final)的long型字段)显式声明其自己的serialVersionUID</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> seriaVersionUID = <span class="number">42L</span>;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中IO流操作相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/11】22_Java_缓冲流与转换流</title>
    <link href="http://example.com/2022/01/06/23_%E7%BC%93%E5%86%B2%E6%B5%81%E5%92%8C%E8%BD%AC%E6%8D%A2%E6%B5%81/"/>
    <id>http://example.com/2022/01/06/23_%E7%BC%93%E5%86%B2%E6%B5%81%E5%92%8C%E8%BD%AC%E6%8D%A2%E6%B5%81/</id>
    <published>2022-01-06T05:30:16.602Z</published>
    <updated>2021-12-18T13:54:33.256Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="缓冲流和转换流"><a href="#缓冲流和转换流" class="headerlink" title="缓冲流和转换流"></a>缓冲流和转换流</h2><h3 id="缓冲流-Buffered"><a href="#缓冲流-Buffered" class="headerlink" title="缓冲流[Buffered]"></a>缓冲流[Buffered]</h3><p>给基本的字节输入流增加一个缓冲区(数组)提高基本的字节输入流的读取效率。</p><p><code>BufferedInputStream(new FileInputStream())</code></p><img src="/2022/01/06/23_%E7%BC%93%E5%86%B2%E6%B5%81%E5%92%8C%E8%BD%AC%E6%8D%A2%E6%B5%81/1639127602631.png" class="" width="1639127602631"><h4 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a><code>BufferedInputStream</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo15_Buffered;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   java.io.BufferedInputStream extends InputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   继承自父类的方法：</span></span><br><span class="line"><span class="comment"> *       int read() 从输入流中读取数据的下一个字节。</span></span><br><span class="line"><span class="comment"> *       int read(byte[] b) 从输入流中读取一定数量的字节，并存储在缓冲区数组b中。</span></span><br><span class="line"><span class="comment"> *       void close() 关闭此输入流并释放与该流关联的所有系统资源。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   构造方法：</span></span><br><span class="line"><span class="comment"> *       BufferedOutputStream(InputStream in) 创建一个BufferedOutputStream并保存参数即输入流in，供将来使用。</span></span><br><span class="line"><span class="comment"> *       BufferedOutputStream(InputStream in, int size)创建一个指定缓冲区大小的BufferedOutputStream并保存参数即输入流in，供将来使用。</span></span><br><span class="line"><span class="comment"> *       参数：读取文件的数据源。</span></span><br><span class="line"><span class="comment"> *           InputStream in:字节输入流。</span></span><br><span class="line"><span class="comment"> *           int size: 指定缓冲流内部缓冲n区的大小，不指定则默认。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   使用步骤(重点)：</span></span><br><span class="line"><span class="comment"> *       1.创建一个FileInputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"><span class="comment"> *       2.创建BufferedInputStream对象，构造方法中传递FileInputStream对象对象，提高FileInputStream对象读取效率。</span></span><br><span class="line"><span class="comment"> *       3.使用BufferedInputStream对象中的方法read,读取文件。</span></span><br><span class="line"><span class="comment"> *       4.释放资源(会先调用flush方法刷新数据，则第四步可省略)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BufferedInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo15_Buffered\\a.txt&quot;</span>);</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line"><span class="comment">//        int len = 0;</span></span><br><span class="line"><span class="comment">//        while ((len = bis.read())!= -1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(len);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len2 = fis.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a><code>BufferedOutputStream</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo15_Buffered;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.BufferedOutputStream extends OutputStream</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   继承自父类的共性成员方法:</span></span><br><span class="line"><span class="comment">*       - public void close(): 关闭该输出流并释放与该流相关联的任何系统资源。</span></span><br><span class="line"><span class="comment">*       - public void flush(): 刷新此输出流，并强制任何缓冲的输出字节被写出。</span></span><br><span class="line"><span class="comment">*       - public void write(byte[] b): 将b.length字节从指定的字节数组写入此输出流。</span></span><br><span class="line"><span class="comment">*       - public void write(byte[] b, int off, int len): 从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。</span></span><br><span class="line"><span class="comment">*       - public abstract void write(int b): 将指定的字节输出流。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       BufferedOutputStream(OutputStream out) 创建一个新的缓冲输出流，以将数据写入指定的底层输出流。</span></span><br><span class="line"><span class="comment">*       BufferedOutputStream(OutputStream out, int size)创建一个新的缓冲输出流，以将指定缓冲区大小的数据写入指定的底层输出流。</span></span><br><span class="line"><span class="comment">*       参数：写入的目的地。</span></span><br><span class="line"><span class="comment">*               OutputStream out: 字节输出流。</span></span><br><span class="line"><span class="comment">*               int size: 指定缓冲流内部缓冲区的大小，不指定则默认。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用步骤(重点)：</span></span><br><span class="line"><span class="comment">*       1.创建一个FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"><span class="comment">*       2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象对象，提高FileOutputStream对象效率</span></span><br><span class="line"><span class="comment">*       3.使用BufferedOutputStream对象中的方法write,将数据写入到内部缓冲区中。</span></span><br><span class="line"><span class="comment">*       4.使用BufferedOutputStream对象中的方法flush,把内部缓冲区中的数据，刷新到文件中。</span></span><br><span class="line"><span class="comment">*       5.释放资源(会先调用flush方法刷新数据，则第四步可省略)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BufferedOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建一个BufferedOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo15_Buffered\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象对象，提高FileOutputStream对象效率</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">        <span class="comment">// 3.使用BufferedOutputStream对象中的方法write,将数据写入到内部缓冲区中。</span></span><br><span class="line">        bos.write(<span class="string">&quot;写入数据&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 4.使用BufferedOutputStream对象中的方法flush,把内部缓冲区中的数据，刷新到文件中。</span></span><br><span class="line">        bos.flush();</span><br><span class="line">        <span class="comment">// 5.释放资源(会先调用flush方法刷新数据，则第四步可省略)</span></span><br><span class="line">        bos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title=" BufferedReader"></a><code> BufferedReader</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo15_Buffered;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*    java.io.BufferedReader extends Reader</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*    继承自父类的方法：</span></span><br><span class="line"><span class="comment">*       int read() 读取单个字符并返回</span></span><br><span class="line"><span class="comment">*       int read(char[] cbuf) 一次读取多个字符，将字符读取数组。</span></span><br><span class="line"><span class="comment">*       void close() 关闭该流并释放与之相关的所有资源。</span></span><br><span class="line"><span class="comment">*    构造方法：</span></span><br><span class="line"><span class="comment">*       BufferedReader(Reader in) 创建一个使用默认大小输入缓冲区的缓冲字符输入流。</span></span><br><span class="line"><span class="comment">*       BufferedReader(Reader in， int sz) 创建一个使用指定大小输入缓冲区的缓冲字符输入流。</span></span><br><span class="line"><span class="comment">*   参数：</span></span><br><span class="line"><span class="comment">*       Reader in 字符输入流</span></span><br><span class="line"><span class="comment">*           可以传递给FileReader,缓冲流会给FileReader增加一个缓冲区，提高FileReader的读取效率。</span></span><br><span class="line"><span class="comment">*   特有的成员方法：</span></span><br><span class="line"><span class="comment">*       String readLine() 读取一个文本行。读取一行数据。</span></span><br><span class="line"><span class="comment">*           行的终止符号：通过以下字符之一即可认为某行已经终止。换行(&#x27;\n&#x27;)、回车(&#x27;\r&#x27;)或者回车之后直接接着换行(\r\n).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04BufferedReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo15_Buffered\\buf.txt&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a><code>BufferedWriter</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo15_Buffered;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.BufferedWriter extends Writer</span></span><br><span class="line"><span class="comment">*   BufferedWriter: 字符缓冲输出流</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   共性的方法：</span></span><br><span class="line"><span class="comment">*       - void write(int c) 写入单个字符。</span></span><br><span class="line"><span class="comment">*       - void write(char[] cbuf)写入字符数组</span></span><br><span class="line"><span class="comment">*       - abstract void write(char[] cbuf, int off, int len)写入字符数组的一部分，off是数组的开始索引，len写的是字符个数</span></span><br><span class="line"><span class="comment">*       - void write(String str)写入字符串</span></span><br><span class="line"><span class="comment">*       - void write(String str, int off, int len)写入字符串的某一部分，off字符串的开始索引，len写的字符个数</span></span><br><span class="line"><span class="comment">*       - void flush()刷新该流的缓冲</span></span><br><span class="line"><span class="comment">*       - void close()关闭该流，但是要先刷新它</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       BufferedWriter(Writer out) 创建一个使用默认大小缓冲区的缓冲字符输出流。</span></span><br><span class="line"><span class="comment">*       BufferedWriter(Writer out, int sz) 创建一个使用给定大小缓冲区的新缓冲字符输出流。</span></span><br><span class="line"><span class="comment">*   特有的成员方法：</span></span><br><span class="line"><span class="comment">*       void newLine() 写入一个行分隔符。会根据操作系统获取不同的行分隔符。</span></span><br><span class="line"><span class="comment">*       换行：换行符号</span></span><br><span class="line"><span class="comment">*       windows: \r\n</span></span><br><span class="line"><span class="comment">*       linux:/n</span></span><br><span class="line"><span class="comment">*       mac:/r</span></span><br><span class="line"><span class="comment">*   使用步骤:</span></span><br><span class="line"><span class="comment">*       1.创建字符缓冲输出流对象，构造方法中传递字符输出流。</span></span><br><span class="line"><span class="comment">*       2.调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中。</span></span><br><span class="line"><span class="comment">*       3.调用flush，将内存缓冲区中的数据刷新到文件。</span></span><br><span class="line"><span class="comment">*       4.释放资源</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03BufferedWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建字符缓冲输出流对象，构造方法中传递字符输出流。</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo15_Buffered\\buf.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;这是一个测试&quot;</span>);</span><br><span class="line"><span class="comment">//            bw.write(&quot;\r\n&quot;);</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.调用flush，将内存缓冲区中的数据刷新到文件。</span></span><br><span class="line">        bw.flush();</span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><p><code>java.io.InputStreamReader</code> 是Reader的子类，是从<strong>字节流到字符流</strong>的桥梁。它读取字节，并使用<strong>指定的字符集</strong>将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><p><code>java.io.OutputStreamWriter</code> 是Writer的子类，是从<strong>字符流到字节流</strong>的桥梁。读取字符，并使用指定得字符集将其解码为字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo16_ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.OutputStreamWriter extends Writer</span></span><br><span class="line"><span class="comment">*   OutputStreamWriter: 字符流通向字节流的桥梁，可以使用指定得charset将要写入流中的字符编码成字节。(编码：把看得懂的转化成看不懂的)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   继承来自父类的共性成员方法：</span></span><br><span class="line"><span class="comment">*       - void write(int c) 写入单个字符。</span></span><br><span class="line"><span class="comment">*       - void write(char[] cbuf)写入字符数组</span></span><br><span class="line"><span class="comment">*       - abstract void write(char[] cbuf, int off, int len)写入字符数组的一部分，off是数组的开始索引，len写的是字符个数</span></span><br><span class="line"><span class="comment">*       - void write(String str)写入字符串</span></span><br><span class="line"><span class="comment">*       - void write(String str, int off, int len)写入字符串的某一部分，off字符串的开始索引，len写的字符个数</span></span><br><span class="line"><span class="comment">*       - void flush()刷新该流的缓冲</span></span><br><span class="line"><span class="comment">*       - void close()关闭该流，但是要先刷新它</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       OutputStreamWriter(OutputStream out) 创建使用默认字符编码的 OutputStreamWriter</span></span><br><span class="line"><span class="comment">*       OutputStreamWriter(OutputStream out， String charsetName) 创建使用指定字符集的OutputStreamWriter.默认UTF-8</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           OutputStream out: 字节输出流，可以用来写转换之后的字节到文件中。</span></span><br><span class="line"><span class="comment">*           String charsetName: 指定编码表名称，不区分大小写。</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建OutputStreamWriter对象，构造方法中传递字节输出流和指定的编码表名称。</span></span><br><span class="line"><span class="comment">*       2. 使用OutputStreamWriter对象中的方法write，把字符转换成字节存储在缓冲区中。</span></span><br><span class="line"><span class="comment">*       3. 使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中。(使用字节流写字节的过程)</span></span><br><span class="line"><span class="comment">*       4. 释放资源</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01OutputStreamWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        write_utf_8();</span><br><span class="line">        write_gbk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_gbk</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建OutputStreamWriter对象，构造方法中传递字节输出流和指定的编码表名称。</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo16_ReverseStream\\gbk.txt&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 使用OutputStreamWriter对象中的方法write，把字符转换成字节存储在缓冲区中。</span></span><br><span class="line">        osw.write(<span class="string">&quot;你好呀&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中。(使用字节流写字节的过程)</span></span><br><span class="line">        osw.flush();</span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_utf_8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建OutputStreamWriter对象，构造方法中传递字节输出流和指定的编码表名称。</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo16_ReverseStream\\utf_8.txt&quot;</span>),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 使用OutputStreamWriter对象中的方法write，把字符转换成字节存储在缓冲区中。</span></span><br><span class="line">        osw.write(<span class="string">&quot;你好呀&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中。(使用字节流写字节的过程)</span></span><br><span class="line">        osw.flush();</span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中缓冲流(Buffered)和转换流(InputStrea/OutputStream)相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/10】21_Java_Properties</title>
    <link href="http://example.com/2022/01/06/22_Properties/"/>
    <id>http://example.com/2022/01/06/22_Properties/</id>
    <published>2022-01-06T05:30:16.590Z</published>
    <updated>2021-12-18T13:50:51.792Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Properties属性类"><a href="#Properties属性类" class="headerlink" title="Properties属性类"></a>Properties属性类</h2><h3 id="Properties集合"><a href="#Properties集合" class="headerlink" title="Properties集合"></a>Properties集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.util.Properties集合 extends Hashtable&lt;k,v&gt; implements Map&lt;k,v&gt;</span></span><br><span class="line"><span class="comment">*   Properties类表示一个持久的属性集。Properties 可保存在流中，或从流中加载。</span></span><br><span class="line"><span class="comment">*   Properties集合是一个唯一和IO流相结合的集合。</span></span><br><span class="line"><span class="comment">*       (1)store方法，把集合中的临时数据，持久化写入到硬盘存储。</span></span><br><span class="line"><span class="comment">*       (2)load方法，把硬盘中保存的文件(键值对)，读取到集合中使用。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   属性列表中每个键与其对应值都是一个字符串。</span></span><br><span class="line"><span class="comment">*       Properties集合是一个双列集合，key和value默认为字符串。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><code>store</code>方法的Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1 创建Properties集合对象，添加数据</span></span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    prop.setProperty(<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;182&quot;</span>);</span><br><span class="line">    prop.setProperty(<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;160&quot;</span>);</span><br><span class="line">    prop.setProperty(<span class="string">&quot;Golang&quot;</span>,<span class="string">&quot;175&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 创建字节输出流/字符输出流，构造方法中绑定要输出的目的地。</span></span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo14_Properties\\prop.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</span></span><br><span class="line">    <span class="comment">// 字符流可以写中文，字节流不能写中文。</span></span><br><span class="line">    prop.store(fw,<span class="string">&quot;Sava Data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 释放资源</span></span><br><span class="line">    fw.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/01/06/22_Properties/1639126443616.png" class="" width="1639126443616"><p><code>load</code>方法的Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   使用Properties集合中的方法load,把硬盘中保存的文件(键值对),读取到集合中使用</span></span><br><span class="line"><span class="comment">    *   void load(InputStream inStream)</span></span><br><span class="line"><span class="comment">    *   void load(Reader reader)</span></span><br><span class="line"><span class="comment">    *   参数：</span></span><br><span class="line"><span class="comment">    *       InputStream inStream:字节输入流，不能读取含有中文的键值对</span></span><br><span class="line"><span class="comment">    *       Reader reader：字符输入流，可以读取含有中文的键值对。</span></span><br><span class="line"><span class="comment">    *   使用步骤：</span></span><br><span class="line"><span class="comment">    *       1.创建Properties集合对象。</span></span><br><span class="line"><span class="comment">    *       2.使用Properties集合对象中的方法load读取保存键值对的文件.</span></span><br><span class="line"><span class="comment">    *       3.遍历Properties集合</span></span><br><span class="line"><span class="comment">    *   注意：</span></span><br><span class="line"><span class="comment">    *       1.存储键值对的文件中，键与值默认的连接符号可以是=，空格（其他符号）</span></span><br><span class="line"><span class="comment">    *       2.存储键值对的文件中，可以使用#进行注释，被注释的键值对不会被读取</span></span><br><span class="line"><span class="comment">    *       3.存在键值对的文件中，键与值默认都是字符串，不用再加引号。</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    prop.load(<span class="keyword">new</span> FileReader(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo14_Properties\\prop.txt&quot;</span>));</span><br><span class="line">    Set&lt;String&gt; set = prop.stringPropertyNames();</span><br><span class="line">    <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">        String value = prop.getProperty(key);</span><br><span class="line">        System.out.println(key + <span class="string">&#x27;=&#x27;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中Properties属性类相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/18】20_Java_IO</title>
    <link href="http://example.com/2022/01/06/21_IO%E6%B5%81/"/>
    <id>http://example.com/2022/01/06/21_IO%E6%B5%81/</id>
    <published>2022-01-06T05:30:16.545Z</published>
    <updated>2021-12-18T13:50:05.806Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><p><strong>I</strong>(input读取)<strong>O</strong>(output输出)<strong>流</strong>(数据)</p><h4 id="OutputStream-输出流"><a href="#OutputStream-输出流" class="headerlink" title="OutputStream[输出流]"></a>OutputStream[输出流]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo13_IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.OutputStream:字节输出流</span></span><br><span class="line"><span class="comment">*       此抽象类是表示输出字节流的所有类的超类。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   定义一些子类共性的成员方法:</span></span><br><span class="line"><span class="comment">*       - public void close(): 关闭该输出流并释放与该流相关联的任何系统资源。</span></span><br><span class="line"><span class="comment">*       - public void flush(): 刷新此输出流，并强制任何缓冲的输出字节被写出。</span></span><br><span class="line"><span class="comment">*       - public void write(byte[] b): 将b.length字节从指定的字节数组写入此输出流。</span></span><br><span class="line"><span class="comment">*       - public void write(byte[] b, int off, int len): 从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。</span></span><br><span class="line"><span class="comment">*       - public abstract void write(int b): 将指定的字节输出流。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   java.io.FileOutputStream extends OutputStream</span></span><br><span class="line"><span class="comment">*   FileOutputStream: 文件字节输出流。</span></span><br><span class="line"><span class="comment">*   作用：把内存中的数据写入到硬盘的文件中。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       FileOutputStream(String name)创建一个向具有指定名称的文件中写入数据的文件输出流。</span></span><br><span class="line"><span class="comment">*       FileOutputStream(File file)创建一个向指定File对象表示的文件中写入数据的文件输出流。</span></span><br><span class="line"><span class="comment">*           参数：写入的目的地。</span></span><br><span class="line"><span class="comment">*               String name: 目的地是一个文件的路径。</span></span><br><span class="line"><span class="comment">*               File file: 目的地是一个文件。</span></span><br><span class="line"><span class="comment">*       创建构造方法的作用：</span></span><br><span class="line"><span class="comment">*           1. 创建一个FileOutputStream对象。</span></span><br><span class="line"><span class="comment">*           2. 会根据构造方法中的传递的文件/文件路径，创建一个空的文件。</span></span><br><span class="line"><span class="comment">*           3. 会把FileOutputStream对象指向创造好的文件。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   写入数据的原理(内存-&gt;硬盘)</span></span><br><span class="line"><span class="comment">*       java程序 -&gt; JVM -&gt; OS(操作系统) -&gt; OS调用写数据的方法 -&gt; 把数据写入到文件中</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   字节输出流的使用步骤(重点)</span></span><br><span class="line"><span class="comment">*       1. 创建一个FileOutputStream对象，构造方法中传递写入数据的目的地。</span></span><br><span class="line"><span class="comment">*       2. 调用FileOutputStream对象中的方法write，把数据写入到文件中</span></span><br><span class="line"><span class="comment">*       3. 释放资源(流使用会占用一定的内存，使用完毕要将内存清空)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01OutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个FileOutputStream对象，构造方法中传递写入数据的目的地。</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo13_IO\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 调用FileOutputStream对象中的方法write，把数据写入到文件中</span></span><br><span class="line">        fos.write(<span class="number">97</span>); <span class="comment">// 写数据时，会将10进制的整数97转换成二进制的整数97</span></span><br><span class="line">        <span class="comment">// 3. 释放资源(流使用会占用一定的内存，使用完毕要将内存清空)</span></span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入多个字节</span></span><br><span class="line">        FileOutputStream fos2 = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo13_IO\\b.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = &#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;</span><br><span class="line">        fos2.write(bytes);</span><br><span class="line">        fos2.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入多个字节,指定位置</span></span><br><span class="line">        FileOutputStream fos3 = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo13_IO\\c.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes2 = &#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;</span><br><span class="line">        fos3.write(bytes2,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        fos3.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="InputStream-输入流"><a href="#InputStream-输入流" class="headerlink" title="InputStream[输入流]"></a>InputStream[输入流]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo13_IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.InputStream:字节输入流</span></span><br><span class="line"><span class="comment">*   此抽象类是表示字节输入流的所有类的超类。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   定义了所有子类共性的方法：</span></span><br><span class="line"><span class="comment">*       int read() 从输入流中读取数据的下一个字节。read读取文件是按照字节读取，读取完毕后，将指针移向下一位。</span></span><br><span class="line"><span class="comment">*       int read(byte[] b) 从输入流中读取一定数量的字节，并存储在缓冲区数组b中。</span></span><br><span class="line"><span class="comment">*       void close() 关闭此输入流并释放与该流关联的所有系统资源。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   java.io.FileInputStream extends InputStream</span></span><br><span class="line"><span class="comment">*   FileInputStream: 文件字节输入流</span></span><br><span class="line"><span class="comment">*   作用：把硬盘中的文件中的数据，读取到内存中使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       FileInputStream(String name)</span></span><br><span class="line"><span class="comment">*       FileInputStream(File file)</span></span><br><span class="line"><span class="comment">*       参数：读取文件的数据源。</span></span><br><span class="line"><span class="comment">*           String name:文件的路径。</span></span><br><span class="line"><span class="comment">*           File file:文件</span></span><br><span class="line"><span class="comment">*       构造方法的作用：</span></span><br><span class="line"><span class="comment">*           1. 创建一个FileInputStream对象</span></span><br><span class="line"><span class="comment">*           2. 会把FileInputStream对象指定构造方法中要读取的文件</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   读取数据的原理(硬盘-&gt;内存)</span></span><br><span class="line"><span class="comment">*      java程序 -&gt; JVM -&gt; OS -&gt; OS读取数据的方法 -&gt; 读取文件</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   字节输入流的使用步骤(重点)：</span></span><br><span class="line"><span class="comment">*       1. 创建FileInputStream对象，构造方法中绑定要读取的数据源。</span></span><br><span class="line"><span class="comment">*       2. 使用FileInputStream对象中的方法read，读取文件。</span></span><br><span class="line"><span class="comment">*       3. 释放资源。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建FileInputStream对象，构造方法中绑定要读取的数据源。</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo13_IO\\b.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 使用FileInputStream对象中的方法read，读取文件。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1 使用 int read()从输入流中读取数据的下一个字节。read读取文件是按照字节读取，读取完毕后，将指针移向下一位。</span></span><br><span class="line"><span class="comment">//        int len = 0;</span></span><br><span class="line"><span class="comment">//        while ((len = fis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)len);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.2 int read(byte[] b) 从输入流中读取一定数量的字节，并存储在缓冲区数组b中。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>]; <span class="comment">// 起到缓冲作用，存储每次读取到的多个字节</span></span><br><span class="line">        <span class="keyword">int</span> len2 = fis.read(bytes); <span class="comment">// 读取的有效字节个数</span></span><br><span class="line">        System.out.println(len2);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源。</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h4><p>一读一写。</p><img src="/2022/01/06/21_IO%E6%B5%81/1639034676238.png" class="" width="1639034676238"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo13_IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   文件复制：一读一写。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   明确：</span></span><br><span class="line"><span class="comment">*       1. 数据源</span></span><br><span class="line"><span class="comment">*       2. 目的地</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   文件复制的步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建一个字节输入流对象，构造方法中绑定要读取的数据。</span></span><br><span class="line"><span class="comment">*       2. 创建一个字节输出流对象，构造方法中绑定要写入的目的地。</span></span><br><span class="line"><span class="comment">*       3. 使用字节输入流对象中的方法read读取文件。</span></span><br><span class="line"><span class="comment">*       4. 使用字节输出流的方法write，把读取的字节写入到目的地的文件中。</span></span><br><span class="line"><span class="comment">*       5. 释放资源。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03FileCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个字节输入流对象，构造方法中绑定要读取的数据。</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo13_IO\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 创建一个字节输出流对象，构造方法中绑定要写入的目的地。</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 3. 使用字节输入流对象中的方法read读取文件。</span></span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 4. 使用字节输出流的方法write，把读取的字节写入到目的地的文件中。</span></span><br><span class="line">            fos.write(bytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 释放资源。</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;复制文件共耗时:&quot;</span> + (end-start) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="字符流输入流-Reader"><a href="#字符流输入流-Reader" class="headerlink" title="字符流输入流[Reader]"></a>字符流输入流[Reader]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo13_IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   字节流</span></span><br><span class="line"><span class="comment">*   主要解决文件中遇到中文的情况，一个中文一般占用多个字节。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   java.io.Reader 字符输入流，是字符输入流的最顶层的父类，定义了一些共性的成员方法，是一个抽象类。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   共性的方法：</span></span><br><span class="line"><span class="comment">*       int read() 读取单个字符并返回</span></span><br><span class="line"><span class="comment">*       int read(char[] cbuf) 一次读取多个字符，将字符读取数组。</span></span><br><span class="line"><span class="comment">*       void close() 关闭该流并释放与之相关的所有资源。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   java.io.FileReader extends InputStreamReader extends Reader</span></span><br><span class="line"><span class="comment">*   FileReader：文件字符输入流</span></span><br><span class="line"><span class="comment">*   作用：把硬盘中的数据以字符的方式读入到内存中。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       FileReader(String fileName)</span></span><br><span class="line"><span class="comment">*       FileReader(File file)</span></span><br><span class="line"><span class="comment">*   参数：读取文件的数据源。</span></span><br><span class="line"><span class="comment">*       String name:文件的路径。</span></span><br><span class="line"><span class="comment">*       File file:文件</span></span><br><span class="line"><span class="comment">*   构造方法的作用：</span></span><br><span class="line"><span class="comment">*       1. 创建一个FileReader对象</span></span><br><span class="line"><span class="comment">*       2. 会把FileReader对象指定构造方法中要读取的文件</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建FileReader对象，构造方法中绑定要读取的数据源。</span></span><br><span class="line"><span class="comment">*       2. 使用FileReader对象中的方法read读取文件。</span></span><br><span class="line"><span class="comment">*       3. 释放资源</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Reader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建FileReader对象，构造方法中绑定要读取的数据源。</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo13_IO\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 使用FileReader对象中的方法read读取文件。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   String类的构造方法：</span></span><br><span class="line"><span class="comment">        *       String(char[] value) 把字符数组转换为字符串</span></span><br><span class="line"><span class="comment">        *       String(char[] value, int offset, int count)</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>]; <span class="comment">// 存储读取到的多个字符</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>; <span class="comment">// 记录每次读取的有效的字符个数</span></span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(cs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(cs));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="字符输出流-Writer"><a href="#字符输出流-Writer" class="headerlink" title="字符输出流[Writer]"></a>字符输出流[Writer]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo13_IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.Writer:字符输出流，是所有字符输出流的最顶层的父类，是一个抽象类。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   共性的方法：</span></span><br><span class="line"><span class="comment">*       - void write(int c) 写入单个字符。</span></span><br><span class="line"><span class="comment">*       - void write(char[] cbuf)写入字符数组</span></span><br><span class="line"><span class="comment">*       - abstract void write(char[] cbuf, int off, int len)写入字符数组的一部分，off是数组的开始索引，len写的是字符个数</span></span><br><span class="line"><span class="comment">*       - void write(String str)写入字符串</span></span><br><span class="line"><span class="comment">*       - void write(String str, int off, int len)写入字符串的某一部分，off字符串的开始索引，len写的字符个数</span></span><br><span class="line"><span class="comment">*       - void flush()刷新该流的缓冲</span></span><br><span class="line"><span class="comment">*       - void close()关闭该流，但是要先刷新它</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   java.io.FileWriter extends OutputStreamWriter extends Writer</span></span><br><span class="line"><span class="comment">*   FileWriter: 文件字符输出流。</span></span><br><span class="line"><span class="comment">*   作用： 把内存中的字符数据写入到文件中。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       FileWriter(File file)根据给定的File对象构造一个FileWriter对象。</span></span><br><span class="line"><span class="comment">*       FileWriter(String fileName)根据给定的文件名构造一个FileWriter对象。</span></span><br><span class="line"><span class="comment">*       参数：写入数据的目的地</span></span><br><span class="line"><span class="comment">*           String fileName:文件的路径</span></span><br><span class="line"><span class="comment">*           File file:是一个文件</span></span><br><span class="line"><span class="comment">*       构造方法的作用：</span></span><br><span class="line"><span class="comment">*           1. 创建一个FileWriter对象</span></span><br><span class="line"><span class="comment">*           2. 根据构造方法中传递的文件/文件的路径，创建文件。</span></span><br><span class="line"><span class="comment">*           3. 会把FileWriter对象指向创造好的文件。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   字符输入流的使用步骤(重点)：</span></span><br><span class="line"><span class="comment">*       1. 创建FileWriter对象，构造方法中绑定写入数据的目的地。</span></span><br><span class="line"><span class="comment">*       2. 使用FileWriter中的方法write，把数据写入到内存缓冲区中。(字符转换成字节的过程)</span></span><br><span class="line"><span class="comment">*       3. 使用FileWriter中的方法flush,把内存缓冲区中的数据，刷新到文件中。</span></span><br><span class="line"><span class="comment">*       4. 释放资源(会先把内存缓冲区中的数据刷新到文件中)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   续写与换行：</span></span><br><span class="line"><span class="comment">*       1. FileWriter(String fileName, boolean append)</span></span><br><span class="line"><span class="comment">*       2. FileWriter(File file, boolean append)</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           1. String fileName,File file:写入数据的目的地。</span></span><br><span class="line"><span class="comment">*           2. boolean append:续写开关 true：不会创建新的文件覆盖源文件，可以续写; false:创建新的文件覆盖源文件。</span></span><br><span class="line"><span class="comment">*       换行：换行符号</span></span><br><span class="line"><span class="comment">*           windows:\r\n</span></span><br><span class="line"><span class="comment">*           linux:/n</span></span><br><span class="line"><span class="comment">*           mac:/r</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Writer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建FileWriter对象，构造方法中绑定写入数据的目的地。</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo13_IO\\c.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 使用FileWriter中的方法write，把数据写入到内存缓冲区中。(字符转换成字节的过程)</span></span><br><span class="line">        fw.write(<span class="number">97</span>);</span><br><span class="line">        <span class="comment">// 3. 使用FileWriter中的方法flush,把内存缓冲区中的数据，刷新到文件中。</span></span><br><span class="line">        fw.flush(); <span class="comment">// 刷新之后，流可以继续使用</span></span><br><span class="line">        <span class="comment">// 4. 释放资源(会先把内存缓冲区中的数据刷新到文件中)</span></span><br><span class="line">        fw.close(); <span class="comment">// close之后，流已经关闭了，从内存中清除了，不能再使用了。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 续写与换行</span></span><br><span class="line">        FileWriter fw2 = <span class="keyword">new</span> FileWriter(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo13_IO\\d.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            fw2.write(<span class="string">&quot;Hello&quot;</span>+i+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fw2.flush();</span><br><span class="line">        fw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="关闭-close-与刷新-flush"><a href="#关闭-close-与刷新-flush" class="headerlink" title="关闭[close]与刷新[flush]"></a>关闭[close]与刷新[flush]</h4><p><code>close</code>: 先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p><p><code>flush</code>: 刷新缓冲区，流对象可以继续使用。</p><h4 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo13_IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   使用try catch finally 处理流中的异常</span></span><br><span class="line"><span class="comment">*   格式：</span></span><br><span class="line"><span class="comment">*       try&#123;</span></span><br><span class="line"><span class="comment">*           可能出现异常的代码</span></span><br><span class="line"><span class="comment">*       &#125;catch(异常类变量 变量名)&#123;</span></span><br><span class="line"><span class="comment">*           异常的处理逻辑</span></span><br><span class="line"><span class="comment">*       &#125;finally&#123;</span></span><br><span class="line"><span class="comment">*           一定会执行的代码</span></span><br><span class="line"><span class="comment">*           资源释放</span></span><br><span class="line"><span class="comment">*       &#125;</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06TryCatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileWriter fw2 = <span class="keyword">null</span>; <span class="comment">// 要有初始值</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 可能出现的异常代码</span></span><br><span class="line">            fw2 = <span class="keyword">new</span> FileWriter(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo13_IO\\d.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                fw2.write(<span class="string">&quot;Hello&quot;</span>+i+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fw2.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中IO流操作相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
