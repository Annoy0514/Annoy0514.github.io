<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Annoy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-14T02:05:02.736Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Annoy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL笔试题记录</title>
    <link href="http://example.com/2022/06/14/MySQL%E7%AC%94%E8%AF%95%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/06/14/MySQL%E7%AC%94%E8%AF%95%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2022-06-14T02:02:54.000Z</published>
    <updated>2022-06-14T02:05:02.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL笔试题知识点"><a href="#MySQL笔试题知识点" class="headerlink" title="MySQL笔试题知识点"></a>MySQL笔试题知识点</h2>]]></content>
    
    
    <summary type="html">MySQL刷笔试题过程中一些知识点扫盲记录。</summary>
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>【22/06/09】7_秒杀项目_削峰限流与防刷[重点]</title>
    <link href="http://example.com/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/"/>
    <id>http://example.com/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/</id>
    <published>2022-06-10T02:49:46.000Z</published>
    <updated>2022-06-10T03:23:28.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秒杀项目–削峰限流与防刷【重点内容】"><a href="#秒杀项目–削峰限流与防刷【重点内容】" class="headerlink" title="秒杀项目–削峰限流与防刷【重点内容】"></a>秒杀项目–削峰限流与防刷【重点内容】</h2><h3 id="削峰、限流"><a href="#削峰、限流" class="headerlink" title="削峰、限流"></a>削峰、限流</h3><blockquote><p>问题描述</p></blockquote><p>解决<strong>下单接口流量大</strong>的问题，1）流量太大接口承受不住，2）商品数量有限，没必要放太多人。</p><br><blockquote><p>解决方案</p></blockquote><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220531161452520.png" class="" title="image-20220531161452520"><br><blockquote><p>实现逻辑</p></blockquote><ol><li><strong>验证码</strong>：平滑流量。在秒杀时防止出现秒杀的流量过高。例如有几百万用户同时秒杀一个商品，如果不做处理，百万级别的流量会给服务器带来极大的压力，造成服务器崩溃。设置验证码后，用户下单需要手动输入验证码，而每个人的手速是不一样的，这样操作会使流量平摊下来。</li><li><strong>验证–大闸–令牌</strong>：这三个步骤的最终目的是给用户发放一个<strong>令牌</strong>，有了令牌用户才可以去下单，并且令牌的数量有限制。假设有100个商品参与秒杀，有10万用户去秒杀，不可能发放10万个令牌给用户，这样会消耗性能。令牌数量的限制是由<strong>大闸</strong>所决定的。</li><li><strong>限流器</strong>： <strong>限制每段时间访问的用户数量</strong>，将很大的流量分摊成小的流量防止服务崩溃。</li><li><strong>队列(线程池)<strong>：</strong>提高单机处理流量的能力</strong>，当流量过大时起一个缓冲作用。</li><li>最终提交到交易服务时，承担的流量就小的多了。</li></ol><br><blockquote><p>实现细节</p></blockquote><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p>平滑流量。将1秒的千万流量平滑到3-5秒（强制让用户手速减慢）。【easy capcha】</p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.whvcse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-captcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用: 生成验证码对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">&quot;D:/temp/captcha1.png&quot;</span>);</span><br><span class="line">FileOutputStream outputStream1 = <span class="keyword">new</span> FileOutputStream(file1);</span><br><span class="line">SpecCaptcha specCaptcha = <span class="keyword">new</span> SpecCaptcha(<span class="number">130</span>, <span class="number">48</span>, <span class="number">4</span>);<span class="comment">//普通字符 SpecCaptcha 字符数</span></span><br><span class="line">specCaptcha.out(outputStream1);<span class="comment">//通过文件输出流，将图片输出到本地</span></span><br><span class="line">System.out.println(specCaptcha.text());<span class="comment">//返回图片中的答案</span></span><br></pre></td></tr></table></figure></li></ul><br><h4 id="大闸"><a href="#大闸" class="headerlink" title="大闸"></a>大闸</h4><p>控制令牌发送数量。【Redis:”promotion:gate:ID”—对应令牌数量】</p><p>在Redis缓存中存入一个键值对，键为<code>promotion:gate:活动id</code>，值为商品数量的5倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPromotionGate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = itemService.findItemsOnPromotion();<span class="comment">//数据库查出商品</span></span><br><span class="line">    <span class="keyword">for</span> (Item item : list) &#123;</span><br><span class="line">        <span class="keyword">int</span> stock = item.getItemStock().getStock();<span class="comment">//获得库存</span></span><br><span class="line">        Promotion promotion = item.getPromotion();<span class="comment">//获得活动ID</span></span><br><span class="line">        <span class="comment">//设置令牌数量，key【promotion:gate:ID】 value【stock * 5】</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;promotion:gate:&quot;</span> + promotion.getId(), stock * <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="令牌"><a href="#令牌" class="headerlink" title="令牌"></a>令牌</h4><p>可以进行交易的凭证，控制交易数量。</p><ul><li><p>验证码通过之后，获取令牌。</p><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220605113929651.png" class="" title="image-20220605113929651"></li><li><p>令牌的具体实现。</p><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220605191510081.png" class="" title="image-20220605191510081"></li></ul><p><strong>限流器：</strong> 限制TPS，保证机器不崩溃。【guava(RateLimiter)，令牌桶】</p><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220605192347261.png" class="" title="image-20220605192347261"><p><strong>队列</strong>：单机达到极限时运行较慢，缓冲交易的流量。【Spring中的ThreadPool】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ThreadPool</span></span><br><span class="line"><span class="comment"># 核心线程数5</span></span><br><span class="line"><span class="meta">spring.task.execution.pool.core-size</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大线程数10</span></span><br><span class="line"><span class="meta">spring.task.execution.pool.max-size</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 等待队列容量30</span></span><br><span class="line"><span class="meta">spring.task.execution.pool.queue-capacity</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure><p>通过注入Spring的线程池实现，令牌通过后，通过线程池创建一个线程taskExector.submit来创建订单进行交易。</p><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220605192521910.png" class="" title="image-20220605192521910"><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220605192541344.png" class="" title="image-20220605192541344"><br><h3 id="防刷"><a href="#防刷" class="headerlink" title="防刷"></a>防刷</h3><ol><li><p>问题描述</p><p>防刷是防止黄牛以一些方式买走秒杀时的商品，然后再高价卖出。</p></li><li><p>解决方案</p><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220605193627461.png" class="" title="image-20220605193627461"><ul><li>根据session或者token限制用户的购买数量和访问次数。</li><li>限制同一个ip访问商品的数量。</li></ul></li><li><p>存在弊端</p><p>黄牛可能存在多个设备或者账号。</p></li></ol><br><blockquote><p><font color = red>限流器涉及到的两种算法</font></p></blockquote><p>限流器通常采用两种算法进行限流，<strong>令牌桶</strong> 和 <strong>漏桶算法</strong>，<strong>本项目中采用的是令牌桶</strong>。</p><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220605194101707.png" class="" title="image-20220605194101707"><ol><li><h4 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a><strong>令牌桶算法</strong></h4><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220605195602395.png" class="" title="image-20220605195602395"><p>有一个限流器、它会管理一个叫令牌桶的容器，这个容器容量是有限的，初始化时限流器会给令牌桶加入一定量的令牌，并且初始化完之后会有一个<strong>令牌生成器</strong>在间隔固定时间内会生成一些令牌到令牌桶中，当令牌桶满之后会溢出多余的令牌。</p><p>用户请求时，要先经过限流器获取令牌。当令牌桶中没有令牌时，无法访问；有令牌时，给用户这个请求分一个令牌去执行业务，同时令牌桶中的令牌数量-1。</p></li><li><h4 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a><strong>漏桶算法</strong></h4><img src="/2022/06/10/7-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%89%8A%E5%B3%B0%E9%99%90%E6%B5%81%E4%B8%8E%E9%98%B2%E5%88%B7/image-20220605195909651.png" class="" title="image-20220605195909651"><p>漏桶算法也有一个桶叫漏桶，这个桶放的是水滴也是有一定容量的。</p><p>当用户发送请求时就像当于一滴水到限流器中、假设漏桶满了就无法请求、没满就会将这个请求加到漏桶中。</p><p>漏桶会在一定间隔时间内漏出一定量的水滴也就是处理一定量的请求。</p></li><li><p><strong>两种算法的比较</strong></p><ul><li><strong>漏桶算法</strong> 比较稳定，每次只处理固定量的请求，它的速率是固定的。</li><li><strong>令牌桶算法</strong> 可能收到突发情况，突然接收到与令牌桶同样数量的请求时，服务器承受的压力就会很大。</li><li><strong>业务中，希望有比较平稳的流量访问，就用漏桶。偶尔能承受爆发的流量， 就用令牌桶。</strong></li></ul></li></ol><br>]]></content>
    
    
    <summary type="html">秒杀项目中，有关削峰、限流与防刷问题的处理思路，以及采用的技术点进行记录。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot项目" scheme="http://example.com/tags/SpringBoot%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>【22/06/09】6_秒杀项目_异步化扣减库存[重点]</title>
    <link href="http://example.com/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/"/>
    <id>http://example.com/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/</id>
    <published>2022-06-09T09:02:20.000Z</published>
    <updated>2022-06-10T02:48:08.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秒杀项目–异步化扣减库存【重点内容】"><a href="#秒杀项目–异步化扣减库存【重点内容】" class="headerlink" title="秒杀项目–异步化扣减库存【重点内容】"></a>秒杀项目–异步化扣减库存【重点内容】</h2><blockquote><p>存在问题: 为什么要使用异步化扣减库?</p></blockquote><p>下单的时候，如果扣减库存时马上修改数据库中数据，会造成性能的浪费，并且当并发量高的时候，对用户的体验会造成很大的影响。</p><blockquote><p>解决方案</p></blockquote><p>在下单时，不马上修改数据库中的内容，而是先<font color=red>修改缓存中的数据</font>， 过一段时间再去修改数据库中的数据。这样做可以大大提高秒杀下单时的并发性能。但是存在<font color=red><strong>数据一致性问题</strong></font>, 就是本地缓存中扣减了库存，但是有可能消息在传送过程中没有被消费者消费到，从而导致数据库中没有扣减库存。</p><p>本项目中使用 <code>RocketMQ</code> 中的 <font color=red>事务型消息</font> 保证本地事务和消费者消费的一致性。</p><br><h3 id="RocketMQ环境搭建"><a href="#RocketMQ环境搭建" class="headerlink" title="RocketMQ环境搭建"></a>RocketMQ环境搭建</h3><ol><li><p>环境搭建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载 官网找下载地址【https://rocketmq.apache.org/dowloading/releases/】</span></span><br><span class="line">yum -y install wget</span><br><span class="line">wget https://archive.apache.org/dist/rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">unzip rocketmq-all-4.8.0-bin-release.zip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改权限</span></span><br><span class="line">chmod -R 777 rocketmq-all-4.8.0-bin-release</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置 runserver.sh</span></span><br><span class="line">cd rocketmq-all-4.8.0-bin-release</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改80 行，堆大小256，新时代内存128，元空间128</span></span><br><span class="line"><span class="meta">#</span><span class="bash">运行 路由nameserver</span></span><br><span class="line">vim bin/runserver.sh</span><br><span class="line">-server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"></span></span><br><span class="line"><span class="bash">-server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=128m</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改67行， runbroker.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行 Broker，堆大小256，新时代内存128</span></span><br><span class="line">vim bin/runbroker.sh</span><br><span class="line">-server -Xms8g -Xmx8g -Xmn4g</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"></span></span><br><span class="line"><span class="bash">-server -Xms256m -Xmx256m -Xmn128m</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改 broker  添加两行</span></span><br><span class="line">vim conf/broker.conf</span><br><span class="line">brokerIP1 = 139.198.178.163</span><br><span class="line">autoCreateTopicEnable = true</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动 在主目录下用bin目录的文件启动</span></span><br><span class="line">nohup sh ./bin/mqnamesrv -n localhost:9876 &amp;</span><br><span class="line">ps -ef | grep mqnamesrv</span><br><span class="line">tail -f /root/logs/rocketmqlogs/namesrv.log</span><br><span class="line"></span><br><span class="line">nohup sh ./bin/mqbroker -n localhost:9876 -c ./conf/broker.conf &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> nohup sh ./bin/mqbroker -n 139.198.178.163:9876 -c ./conf/broker.conf &amp;</span></span><br><span class="line">ps -ef | grep mqbroker</span><br><span class="line">tail -f /root/logs/rocketmqlogs/broker.log</span><br><span class="line"></span><br><span class="line">nohup sh ./bin/mqnamesrv &amp;</span><br><span class="line">nohup sh ./bin/mqbroker -n localhost:9876 -c ./conf/broker.conf &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 报缺失文件正常</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">export NAMESRV_ADDR=localhost:9876</span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">sh ./bin/mqshutdown namesrv</span><br><span class="line">sh ./bin/mqshutdown broker</span><br></pre></td></tr></table></figure></li></ol><br><h3 id="本地事务与消费者消费一致性问题【核心点】"><a href="#本地事务与消费者消费一致性问题【核心点】" class="headerlink" title="本地事务与消费者消费一致性问题【核心点】"></a>本地事务与消费者消费一致性问题【核心点】</h3><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609192326535.png" class="" title="image-20220609192326535"><p>具体流程：</p><ol><li>生产者[<code>MQ Producer</code>] 向 MQ服务[<code>MQ Server</code>] 发送消息，这个消息是一个 <strong>半成品消息</strong>，意思是通知服务端这边要开始发消息了。<ul><li>同时生成 <strong>流水</strong>，流水的目的是为了后续check。</li><li><strong>为什么在这个位置生成流水</strong>？如果在事务时生成流水假设事务失败，那么连本次流水都没有后面还怎么检查流水。</li></ul></li><li>服务器端收到消息后会返回一个 <strong>确认消息</strong> ，表示已经准备好了。</li><li>生产者收到消息后，开始执行 <strong>本地事务</strong>。<ul><li>创建订单扣减本地缓存中的库存，并且 <strong>更新流水</strong> 是在创建订单时扣减库存的，假设扣减成功就会到步骤4，表示已经扣减成功，最终会被消费者消费这条消息，消费者执行的就是mysql中扣减库存。</li></ul></li><li>事务成功之后，生产者会发送一个 <code>commit消息</code> 表示事务执行成功，没有成功则发送 <code>rollback消息</code> 。</li><li>在一些网络环境较差的情况下，第4步发送的消息服务端可能无法接收到，这样就会导致这条消息被阻塞在这里，无法执行后续操作。RrocketMQ使用 <strong>回查机制</strong> 来解决这个问题。</li><li>生产者收到服务端传来的 回查[<code>check</code>]后，生产者会检查事务有没有执行成功。<ul><li><strong>检查流水：</strong> 流水表的锁粒度是远远比订单的锁粒度要小的，因为流水表的值是递增，所以锁的时候我们只锁一条流水，而不是整个库存。</li><li>步骤3中更新流水，步骤6检查流水有没有更新成功，更新成功则表示事务成功，没有则失败。</li></ul></li><li>将事务检查的结果再次发送，成功就发送 <code>commit消息</code>，失败就发送 <code>rollback消息</code>。</li><li>服务端收到commit或者rollback消息之后，会把消息放到正式队列中。接收到的是 <code>commit</code> ，发送至消费者执行消费；接收到的是 <code>rollback</code> ，消费者不消费直接撤回这条消息。</li></ol><br><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609212914075.png" class="" title="image-20220609212914075"><ol><li><p>在 <code>OrderController</code> 中, 调用 <code>OrderService</code> 中的 <code>createOrderAsync</code> 方法，传入用户id，商品id，活动id，下单数量。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609210414881.png" class="" title="image-20220609210414881"></li><li><p><code>orderServiceImpl</code> 中的 <code>createOrderAsync</code> 方法。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609210834018.png" class="" title="image-20220609210834018"></li></ol><br><h4 id="执行本地事务"><a href="#执行本地事务" class="headerlink" title="执行本地事务"></a>执行本地事务</h4><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609212902163.png" class="" title="image-20220609212902163"><ol><li><p>本地事务生产者代码 <code>LocalTransactionListenerImpl</code> 。通过监听，然后执行对应的方法。</p></li><li><p>接收到秒杀主题，tag为扣减库存的消息后，会执行创建订单的方法。该方法会异步更新销量，并且将扣减库存日志记录的状态码改为1，表示执行成功。</p></li><li><p>就是执行一个创建订单的事务，创建订单成功后，会返回一个 <code>commit成功的状态码</code>，表示事务成功。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609211600088.png" class="" title="image-20220609211600088"><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609211707416.png" class="" title="image-20220609211707416"></li></ol><br><h5 id="扣减缓存"><a href="#扣减缓存" class="headerlink" title="扣减缓存"></a>扣减缓存</h5><ol><li><p><strong>缓存预热</strong></p><p>在代码逻辑中要实现先扣减缓存中的数据再扣减数据库中的数据，所以秒杀活动进行之前我们应该先将商品数据加到缓存中去，这叫做缓存预热。</p><p>本项目没有缓存预热模块，所以通过写一个测试类，将商品数据存入到 <code>Redis缓存</code> 中。</p></li><li><p><strong>流水数据表分析</strong></p><p>存商品的id和要购买的数量，最后一个就是当前商品订单的状态默认是0表示没有被处理、1表示订单创建成功、2表示订单创建失败。而在异步扣减库存的事务型消息中二次检查检查的就是status的值。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609214248894.png" class="" title="image-20220609214248894"></li><li><p><strong>异步化扣减缓存</strong></p><p>异步更新销量，并且将扣减库存日志记录的状态码改为1，表示执行成功。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609213454225.png" class="" title="image-20220609213454225"><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609205857391.png" class="" title="image-20220609205857391"></li></ol><br><h5 id="更新销量"><a href="#更新销量" class="headerlink" title="更新销量"></a>更新销量</h5><ol><li><p>通过异步方式更新销量，发送 <code>商品id[itemId]</code> 和 <code>商品数量[amount]</code> 进行库存流水更新。消息是通过json形式转化为字符串之后，再转化为二进制消息，发送给消费者。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609204750859.png" class="" title="image-20220609204750859"></li><li><p><strong>更新销量数据的消费者</strong>。消费者通过订阅更新订单的消费者信息来监听数据，当收到消息之后，重写<code>onMessage方法</code> ，将收到的消息解析成字符串，再将参数调用 <code>itemservice</code> 去更新销量。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609205128497.png" class="" title="image-20220609205128497"></li><li><p><strong>更新库存流水状态</strong>。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609214720747.png" class="" title="image-20220609214720747"></li></ol><br><h5 id="检查流水"><a href="#检查流水" class="headerlink" title="检查流水"></a>检查流水</h5><p>当生产者发送的commit消息没有被服务端接收到，服务端就会定时进行check。</p><p>根据流水中的 <strong>状态码字段</strong> 进行判断。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609214907684.png" class="" title="image-20220609214907684"><br><h4 id="扣减库存"><a href="#扣减库存" class="headerlink" title="扣减库存"></a>扣减库存</h4><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609212806186.png" class="" title="image-20220609212806186"><p>当commit之后，表示事务成功。事务成功生产者会将消息发送给服务器队列，然后被 <strong>消费者</strong> 消费，消费者的逻辑是 <strong>扣减数据库中的库存</strong>。</p><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609211927044.png" class="" title="image-20220609211927044"><img src="/2022/06/09/6-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%BC%82%E6%AD%A5%E5%8C%96%E6%89%A3%E5%87%8F%E5%BA%93%E5%AD%98/image-20220609212135220.png" class="" title="image-20220609212135220"><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong><font color=red>异步扣减库存功能，是本项目的重点，一定要将整个处理流程理清楚。</font></strong></p><ul><li><p>有关MQ常问面试题</p><blockquote><p>1.消息丢失问题</p></blockquote><p><strong>影响消息可靠性的原因</strong>：</p><ol><li>Broker非正常关闭、Broker异常Crash、OS Crash、机器掉电，但是能立即恢复供电情况。</li><li>机器无法开机（可能是<strong>cpu</strong>、主板、内存等关键设备损坏）、<strong>磁盘</strong>设备损坏</li></ol><p><font color=red><strong>解决方案</strong>：</font></p><ol><li>前四种：属于<strong>硬件资源可立即恢复情况</strong>，消息<strong>保存在磁盘中</strong>能保证消息不丢，或者<strong>丢失少量数据</strong>（依赖<strong>刷盘方式</strong>是同步还是异步）。</li><li>后两种：属于<strong>单点故障</strong>，单点上的<strong>消息全部丢失</strong>，<strong>异步复制</strong>[主从复制]，<strong>双写技术</strong>[两个主节点，消息同时写入]。但同步双写必定影响性能，适合消息可靠性要求极高的场合。</li></ol><blockquote><p><strong>消费者：消费失败-》消息重试</strong></p></blockquote><ul><li><strong>原因</strong>：<ol><li><strong>数据问题</strong>，例如反序列化失败（10秒后重试）。</li><li><strong>网络问题</strong>，例如db连接不可用（30秒后重试），减轻Broker重试消息的压力。</li></ol></li><li><font color=red><strong>解决方案</strong>：</font><ol><li>定时重试机制，令消息再消费一次。</li></ol></li></ul><blockquote><p><strong>生产者：发送失败-》消息重投-》引起重复消费</strong></p></blockquote><ul><li><strong>原因</strong>：<ol><li><strong>生产者</strong>发送消息时，<strong>同步消息失败</strong>会<strong>重投</strong>，<strong>异步消息有重试</strong>。</li><li><strong>消息重投</strong>保证消息尽可能发<strong>送成功</strong>、<strong>不丢失</strong>，但<strong>可能会引起重复消费</strong>。</li></ol></li></ul><br><blockquote><p>2.重复消费问题</p></blockquote><p>消息重复在RocketMQ中是<strong>无法避免</strong>的问题。当出现<strong>消息量大</strong>、<strong>网络抖动</strong>时，是大概率事件。</p><ol><li><p><strong>设置消息重试策略</strong></p><ul><li><p><strong>同步发送</strong>失败重投次数：<strong>不会选择上次失败的broker</strong>，最大程度保证消息不丢失。超出重投次数，抛出异常。</p></li><li><p><strong>异步发送</strong>失败重投次数：<strong>仅在一个broker上做重试</strong>，不保证消息不丢失。</p></li><li><p>消息刷盘超时，或是slave[从]不可用，尝试发送到其他broker。</p></li></ul></li><li><p><strong>死信队列</strong>【用于处理无法被正常消费的消息】</p><ul><li>当一条消息初次消费失败，消息队列会自动进行<strong>消息重试</strong>；</li><li>达到<strong>最大重试次数</strong>后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列不会立刻将消息丢弃，而是将其发送到该<strong>消费者对应</strong>的<strong>特殊队列</strong>中。</li><li>正常情况下无法被消费的消息称为<strong>死信消息</strong>，将<strong>存储死信消息</strong>的特殊队列称为死信队列（Dead-Letter Queue）。</li><li>可以通过使用<strong>console控制台</strong>对死信队列中的消息进行<strong>重发</strong>来使得消费者实例再次进行消费。</li></ul></li></ol><br><blockquote><p>3.最终一致性问题</p></blockquote><p>事务性消息保证。</p></li></ul><hr>]]></content>
    
    
    <summary type="html">秒杀项目中，使用消息队列RocketMQ对用户下单进行异步化扣减库存，提高系统性能，对其中的技术点进行记录。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot项目" scheme="http://example.com/tags/SpringBoot%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>【22/06/08】5_秒杀项目_分布式状态管理</title>
    <link href="http://example.com/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</id>
    <published>2022-06-08T13:15:13.000Z</published>
    <updated>2022-06-09T08:31:21.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秒杀项目–分布式状态管理"><a href="#秒杀项目–分布式状态管理" class="headerlink" title="秒杀项目–分布式状态管理"></a>秒杀项目–分布式状态管理</h2><p>为了<strong>提高吞吐量和系统性能</strong>，需要采用<strong>分布式架构</strong>的方案，包括**Nginx,Tomcat,MySQL,并引入缓存(guava cache, redis)和消息队列(rocketMQ)**。</p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220608212321983.png" class="" title="image-20220608212321983"><br><h4 id="MySQL主从分离"><a href="#MySQL主从分离" class="headerlink" title="MySQL主从分离"></a>MySQL主从分离</h4><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220527212758420.png" class="" title="image-20220527212758420"><p><strong>主服务器</strong>和<strong>从服务器</strong>放在<strong>两个不同的物理机</strong>上。</p><ol><li>主服务器将事务操作记录存储在<strong>bin log日志</strong>中。</li><li>从服务器通过IO线程读取binlog日志，并将数据存储在relaylog日志中，<strong>SQL线程</strong>从relaylog日志中读取并执行出<strong>主服务器的操作</strong>，从而达成主从同步的目的。</li><li>从服务器生成 <strong>快照</strong>(可<strong>用于主服务器数据恢复</strong>，防止主服务器崩溃)</li></ol><br><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220527215329953.png" class="" title="image-20220527215329953"><ul><li><strong>资源管理器</strong>：分布式数据库集群(一堆数据库)。</li><li><strong>事务管理器</strong>：实现分布式事务的协调者。</li><li><strong>应用程序</strong>：业务的请求者。</li></ul><p><strong>处理流程：</strong></p><ol><li>应用程序向事务管理器<strong>请求分布式业务</strong>。</li><li>事务管理器通过资源管理器<strong>开始分布式业务</strong>。</li><li>应用程序向资源管理器<strong>执行SQL</strong>。</li><li>应用程序执行完毕，向事务管理器发送<strong>SQL结束</strong>信息。</li><li>事务管理器通知资源管理器结束分布式业务，事务管理器记录开始到结束资源管理器执行的SQL。</li><li><strong>一阶段</strong>：事务管理器向资源管理器发送prepared，资源管理器检查能否提交。</li><li><strong>二阶段</strong>：发送commit【无异常】/rollback【有异常】。</li></ol><p><strong>存在问题</strong>：</p><ul><li>事务管理器可能挂掉</li><li>commit/rollback消息可能没有被全部接收到</li></ul><p><strong>解决方案</strong>：</p><ul><li>在应用层或事务管理层添加 <strong>重试机制</strong>，隔一段时间检查<strong>数据是否变化，事务状态是否提交</strong>。</li></ul><p><font color=red><strong>内部分布式事务</strong></font></p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220527222205879.png" class="" title="image-20220527222205879"><ol><li>主服务器对redolog进行<strong>prepare</strong>的写入。</li><li>MySQL对bin log进行写入。</li><li>从IO线程写入relay log。</li><li>对redo log进行commit前<strong>检查prepare标识</strong>，<u>防止出现<strong>redo log</strong>与<strong>bin log</strong>不同步问题</u>。</li></ol><br><h4 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h4><p><strong>实现原理</strong></p><p>Redis的持久化机制通过 <strong>把内存中的数据同步到硬盘文件中</strong> 保证数据的持久化。</p><p>当Redis重启后再将硬盘文件重新加载到内存中，达到 <strong>恢复数据</strong> 的目的。</p><br><p><strong>实现过程</strong></p><p><strong>持久化过程</strong>: 单独fork()一个子进程，将当前父进程的数据库数据复制到子进程的内存中，再由子进程写入到临时文件中去。</p><p>再用临时文件替换上次的快照文件，子进程退出，内存释放。</p><br><p><strong>持久化策略</strong></p><ol><li><p><strong>Redis持久化机制</strong></p><ol><li><p><strong>RDB</strong>(Redis Database): 在指定的时间间隔对数据进行快照存储。</p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220530102052774.png" class="" title="image-20220530102052774"><p>【黄色区域：额外会执行的事情】</p><blockquote><p>RDB的原理？</p></blockquote><p>fork和cow。</p><ul><li><strong>fork</strong>：是指redis通过创建子进程来进行RDB操作。</li><li><strong>cow</strong>：是指copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。</li></ul><br></li><li><p><strong>AOF</strong>(Append Only File): 每一个收到的写命令都通过write函数追加到文件中。当Redis重启，通过重新执行文件中保存的命令，在内存中重构整个数据库的内容。</p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220530102111583.png" class="" title="image-20220530102111583"></li></ol><p>​    【黄色区域：额外会执行的事情】</p><ul><li><p><strong>数据恢复</strong> ： 在Redis进行重启时，会使用<strong>RDB</strong>持久化文件重新构建内存，再使用<strong>AOF</strong>重新执行近期的操作指令来实现完成恢复重启前的状态。</p></li><li><p><strong>AOF持久化开启且存在AOF文件时，优先加载AOF文件</strong>。</p></li></ul></li></ol><hr><h3 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h3><ol><li><p>后端项目中引入 <code>Redis</code> 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>properties文件中设置 <code>Redis</code> 相关参数。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6694</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">你的密码</span></span><br></pre></td></tr></table></figure></li><li><p><strong>自定义持久化的方式</strong></p><p>默认的持久化方式是以二进制格式写入到redis中的，这不方便开发人员开发过程中进行阅读，所以我们要自定义持久化的方式。</p><ul><li><p>默认持久化方式</p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220608213549404.png" class="" title="image-20220608213549404"></li><li><p><strong>自定义持久化方式</strong></p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220608213710716.png" class="" title="image-20220608213710716"><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220608213945810.png" class="" title="image-20220608213945810"></li></ul></li></ol><hr><h3 id="使用Redis进行用户登录状态管理"><a href="#使用Redis进行用户登录状态管理" class="headerlink" title="使用Redis进行用户登录状态管理"></a>使用Redis进行用户登录状态管理</h3><p><strong>存在问题</strong>：之前的注册和登录环节使用的是 <code>Session</code> 进行状态管理，单机架构下 <code>Session</code> 没有问题，但是在分布式系统中，一些客户端使用的不是 <code>http协议</code> ，没有 <code>Session域</code> 所以无法进行跨域，这样使用Session进行登录状态的维护是行不通的。</p><p><strong>解决方案</strong>: 我们采用<code>Redis</code> 来实现 <code>单点登录</code>，把登录成功的用户存一个 <code>token字符串 </code>在 <code>Redis</code> 中，其他站点的应用通过访问 <code>Redis</code> 查询是否存在这个用户的 <code>token</code> 来判断用户是否登录。</p><h4 id="注册模块的优化"><a href="#注册模块的优化" class="headerlink" title="注册模块的优化"></a>注册模块的优化</h4><p>之前的注册模块是将验证码存到session中这样假设同时有上百千万的人高并发情况下使用session读性能会很差。</p><p>我们可以使用 <code>redis</code> 缓存验证码,并且设置过期时间，这样的话既提高访问效率又节约了session内存空间。</p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220608220153315.png" class="" title="image-20220608220153315"><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220608220310974.png" class="" title="image-20220608220310974"><h4 id="登录状态管理优化"><a href="#登录状态管理优化" class="headerlink" title="登录状态管理优化"></a>登录状态管理优化</h4><p>用户登录状态的维护，随机生成UUID作为键，user对象作为值，有效期设置为1天。</p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220608221330926.png" class="" title="image-20220608221330926"><p><strong>登录拦截器</strong></p><p>判断Redis中是否有用户的token，有就表示已经登陆，没有的话就需要登录，才可以进行后续下单操作。</p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220608222025401.png" class="" title="image-20220608222025401"><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220608222256529.png" class="" title="image-20220608222256529"><hr><h3 id="使用guava-Redis缓存商品"><a href="#使用guava-Redis缓存商品" class="headerlink" title="使用guava+Redis缓存商品"></a>使用guava+Redis缓存商品</h3><p>商品缓存使用到了 <font color=red>二级缓存</font> ，本地缓存使用 <code>guava</code>，服务器缓存使用 <code>Redis</code>。</p><ol><li><p>导入guava依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>27.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>商品详情接口</p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220609102158620.png" class="" title="image-20220609102158620"><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220609102440076.png" class="" title="image-20220609102440076"><p>由service代码可知、分为了三步。</p><ol><li>先去guava本地缓存中去看是否有数据，有直接从缓存中取数据，然后直接返回。没有就下一步。</li><li>假如guava本地缓存中没有数据就去redis中找看有没有，有就直接取到存带guava中然后再返回，没有就下一步。</li><li>假如本地和redis一二级缓存都没有数据、才去数据库中查查到了就放到本地guava缓存和redis缓存中方便下次取，提高效率。最后返回。</li></ol></li></ol><hr><h3 id="使用Redis缓存用户"><a href="#使用Redis缓存用户" class="headerlink" title="使用Redis缓存用户"></a>使用Redis缓存用户</h3><p>本地缓存中一般存的是热点较高的数据，而用户数据访问的频率不是特别高，没有必要使用本地缓存。所以使用 <font color=red>一级缓存</font> 缓存用户信息，直接使用 <code>Redis缓存</code>。</p><ol><li><p>在 <code>PromotionServiceImpl</code> 中生成活动令牌时，调用 <code>UserService</code> 中的 <code>findUserFromCache</code> 方法。</p><img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220609104326152.png" class="" title="image-20220609104326152"></li><li><p> <code>UserService</code> 中的 <code>findUserFromCache</code> 方法。</p></li></ol>   <img src="/2022/06/08/5-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/image-20220609151412190.png" class="" title="image-20220609151412190"><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本节主要使用Redis+token对用户登录状态的维护进行了一个优化，熟悉处理流程。</p><p>使用Redis做缓存，对经常访问并且不经常改变的数据进行查询，可以大大提高网页的访问效率。</p><ul><li>看Redis相关八股文。如Redis的持久化有哪些种类。</li><li>分布式缓存的八股文。</li></ul><p>本节参考: <a href="https://blog.csdn.net/weixin_43919497/article/details/119646114">(秒杀项目) 4.6 分布式状态管理</a></p><hr>]]></content>
    
    
    <summary type="html">秒杀项目中，使用Redis缓存优化商品列表、秒杀下单的访问性能，对其中采用的分布式技术点进行记录。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot项目" scheme="http://example.com/tags/SpringBoot%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>【22/06/07】4_秒杀项目_项目部署与压测</title>
    <link href="http://example.com/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/"/>
    <id>http://example.com/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/</id>
    <published>2022-06-07T09:35:06.000Z</published>
    <updated>2022-06-08T09:01:30.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秒杀项目–项目部署与压测"><a href="#秒杀项目–项目部署与压测" class="headerlink" title="秒杀项目–项目部署与压测"></a>秒杀项目–项目部署与压测</h2><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220607204506290.png" class="" title="image-20220607204506290"><p>项目是 <strong>前后端分离开发</strong> ，在服务器上要分别部署。</p><ul><li><code>nginx</code> : 使用 <strong>web服务</strong> 做前端页面浏览的服务器。<strong>反向代理</strong> 用来做发送后端数据接口请求的地址转发。</li><li><code>Tomcat</code> : 作为后端服务器。</li></ul><p><strong>前后端交互逻辑</strong></p><ol><li>浏览器输入url地址 。</li><li>请求web服务器前端页面。</li><li>发送ajax请求。</li><li>访问反向代理。</li><li>请求后端返回。</li><li>返回数据给反向代理。</li><li>返回给浏览器。</li></ol><p><strong>80端口请求的是前端页面，90端口请求的是后端接口。</strong></p><br><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><p>将 <strong>前端代码压缩包</strong> 存入 /usr/local/share/nginx/html 中，并解压。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">yum install -y unzip zip</span><br><span class="line">unzip seckill-site.zip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改前端代码参数</span></span><br><span class="line">cd 01_seckill-site/js</span><br><span class="line">vi seckill-site/common.js</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">vi /usr/share/nginx/html/seckill-site/js/common.js</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一行</span></span><br><span class="line">var SERVER_PATH = &quot;http://43.142.77.7(服务器ip):90&quot;;</span><br></pre></td></tr></table></figure><h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><p>将 <strong>后端代码jar包</strong> 传入 /root/workspace ,并传入代码执行脚本 startup.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.通过脚本执行</span></span><br><span class="line">chmod -R 777 startup.sh</span><br><span class="line">sh startup.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看</span></span><br><span class="line">tail nohup.out</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">测试访问</span></span><br><span class="line">http://43.142.77.7(服务器ip)/</span><br><span class="line">http://43.142.77.7(服务器ip):90/item/list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.直接执行jar包</span></span><br><span class="line">java -jar seckill-0.0.1-SNAPSHOT.jar &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.直接执行jar包[后台运行]</span></span><br><span class="line">nohup java -jar seckill-0.0.1-SNAPSHOT.jar &gt;temp.txt 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2&gt;&amp;1 : 这条命令的作用是错误输出将和标准输出同用一个文件描述符，说人话就是错误输出将会和标准输出输出到同一个地方。这里是都输出到temp.txt中。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>后端代码出现的一些问题</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果出现数据库连接问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> java.sql.SQLException: null,  message from server: <span class="string">&quot;Host &#x27;172.17.0.1&#x27; is blocked because of many connection errors; unblock with &#x27;mysqladmin flush-hosts&#x27;&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.进入数据库</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.刷新hosts</span></span><br><span class="line">flush hosts;</span><br></pre></td></tr></table></figure><h4 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h4><p>配置 <strong>反向代理</strong> 和 <strong>webserver</strong>，注释掉 <code>nginx</code> 中的server配置，修改为如下配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置nginx</span></span><br><span class="line">cd /usr/local/nginx</span><br><span class="line">vi nginx.conf</span><br><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">注释原来的server</span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置两个server分别监听前端接口与后端接口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">前端监听</span></span><br><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        location / &#123;</span><br><span class="line">                alias /usr/local/nginx/html/seckill-site/;</span><br><span class="line">                index seckill.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置myserver</span></span><br><span class="line">upstream myserver&#123;</span><br><span class="line">        server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">后端监听</span></span><br><span class="line">server&#123;</span><br><span class="line">        listen 90;</span><br><span class="line">        server_name _;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://myserver;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置好之后重启nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span>到nginx所在目录/usr/<span class="built_in">local</span>/nginx/sbin下,执行命令重启nginx</span></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="Jmeter压测"><a href="#Jmeter压测" class="headerlink" title="Jmeter压测"></a>Jmeter压测</h4><p><strong>准备工作</strong></p><p>压测之前通过使用<code>top -H</code> 查看服务器的负载状态(三个数分别代表1分钟、5分钟、15分钟的负载情况)。</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608093427129.png" class="" title="image-20220608093427129"><p>我们的目的是让这三个参数接近2、2表示负载差不多满了、超过2服务器会宕机。<br>还要看的就是各个进程占cpu的状态不能超过100%。</p><br><p><strong>安装Jmeter</strong></p><ul><li><p>配置</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608094255292.png" class="" title="image-20220608094255292"><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608094321868.png" class="" title="image-20220608094321868"></li><li><p>启动</p><p>编辑环境变量 Path中添加Jmeter中bin的路径。</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608094400920.png" class="" title="image-20220608094400920"><p>打开命令提示符，输入jmeter启动程序。</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608094458646.png" class="" title="image-20220608094458646"></li></ul><br><p><strong>压测商品详情</strong></p><ol><li><p>option中修改为中文。</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608094642632.png" class="" title="image-20220608094642632"></li><li><p>点击 <code>test plan</code> 新建一个 <code>线程组</code>。</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608094731127.png" class="" title="image-20220608094731127"></li><li><p>设置参数:10秒50个线程,循环次数10次也就是100秒500个线程。</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608094825715.png" class="" title="image-20220608094825715"></li><li><p>添加 <code>取样器 HTTP请求</code> ，配置参数。</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608095054917.png" class="" title="image-20220608095054917"></li><li><p>添加 <code>结果树</code> 和 <code>聚合报告</code></p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608095141163.png" class="" title="image-20220608095141163"></li><li><p>保存 <code>聚合报告</code>。</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608095304747.png" class="" title="image-20220608095304747"></li><li><p><strong>结果展示</strong></p><ul><li><p>结果树：可以看到请求返回的商品详情信息</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608164756373.png" class="" title="image-20220608164756373"></li><li><p>聚合报告：会有本次压测的数据统计、吞吐量、平均请求时间等等。</p><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608165541824.png" class="" title="image-20220608165541824"><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608165322492.png" class="" title="image-20220608165322492"><img src="/2022/06/07/4-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8E%8B%E6%B5%8B/image-20220608165459621.png" class="" title="image-20220608165459621"></li></ul></li><li><p>分析</p><p>再增加线程数<strong>吞吐量不再提高</strong>，反而<strong>响应时间下降</strong>，<strong>推测瓶颈是带宽</strong>，<strong>CPU不是瓶颈</strong>。</p></li></ol><br><p><strong>压测用户下单</strong></p><p>首先，下单操作需要用户登录，测试时需要携带cookie测试。请求参数有商品id，商品数量，活动id。</p><p>参考: <a href="https://blog.csdn.net/weixin_43919497/article/details/119616302">(秒杀项目) 4.5 项目部署与压测</a></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>面试时可以说自己通过压力测试优化通过什么方式优化了某些模块、将他的吞吐量什么的从多少提高到了多少、这样说会让面试官觉得你有理有据、而不是凭感觉去优化的就会很虚。<br>面试需要复习的八股文：</p><ol><li>部署时 <code>linux</code> 用到的一些命令。</li><li><code>mysql</code> 主从复制。</li><li>数据库的分布式事务。</li></ol><hr>]]></content>
    
    
    <summary type="html">秒杀项目中，用户下单与秒杀环节，前后端技术点记录。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot项目" scheme="http://example.com/tags/SpringBoot%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>【22/06/07】3_秒杀项目_用户下单与秒杀</title>
    <link href="http://example.com/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/"/>
    <id>http://example.com/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/</id>
    <published>2022-06-07T01:42:19.000Z</published>
    <updated>2022-06-07T07:58:15.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秒杀项目–用户下单与秒杀"><a href="#秒杀项目–用户下单与秒杀" class="headerlink" title="秒杀项目–用户下单与秒杀"></a>秒杀项目–用户下单与秒杀</h2><h3 id="少卖与超卖问题-面试重点"><a href="#少卖与超卖问题-面试重点" class="headerlink" title="少卖与超卖问题(面试重点)"></a>少卖与超卖问题(面试重点)</h3><p>下单操作会涉及到库存扣减问题。扣减库存一般发生在下单和付款时，在高并发的情况下涉及到两个问题：<font color=red><strong>少卖和超卖问题</strong></font>。（面试中常问到）</p><ul><li><strong>少卖问题</strong> : <strong>下单时扣减库存</strong>。比如有100件商品、秒杀时有100人下了单，这时候库存已经没有了商品、理论卖出去了100件，但实际付款的只有80人，另外20人没有付款，实际只卖出去了80件，还有20件商品没有卖出去，但库存表中的库存数已经为0了。这就出现了 <font color=red><strong>少卖</strong></font> 问题。</li><li><strong>超卖问题</strong> : <strong>付款时扣减库存</strong>。假如有100件商品、由于是付款时扣减库存、所以就算有100人下单商品没有付款的话还是可以继续下单的，假如有150个人下了单、但只能有前100个付款的人才能购买成功后50个人无法购买，这样给人的体验是很差的，明明已经抢到了。这就是 <font color=red><strong>超卖问题</strong></font>。</li></ul><p>本项目采用 <font color=red><strong>下单时扣减库存</strong></font> 的方法。</p><br><h3 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h3><h4 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h4><ol><li><p>点击购买</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607110907381.png" class="" title="image-20220607110907381"></li><li><p>生成验证码(在用户已经登录的前提下)</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607110951690.png" class="" title="image-20220607110951690"></li><li><p>下单成功</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607110828698.png" class="" title="image-20220607110828698"></li><li><p>返回查看商品库存变化</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607111039252.png" class="" title="image-20220607111039252"></li></ol><hr><h4 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h4><ol><li><p>点击购买</p><ul><li><p>先看Controller</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607111133123.png" class="" title="image-20220607111133123"></li><li><p>创建订单：传入商品id，数量，活动id，活动令牌[promotionToken]，用户令牌[token]</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607111218841.png" class="" title="image-20220607111218841"><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607111356386.png" class="" title="image-20220607111356386"></li><li><p>加入限流器限制请求次数。</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607111925413.png" class="" title="image-20220607111925413"></li><li><p>从缓存中获取用户信息。</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607111952127.png" class="" title="image-20220607111952127"></li><li><p>验证活动的有效性。</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607112046008.png" class="" title="image-20220607112046008"></li><li><p>调用 <code>orderService</code> 中的创建订单的方法 <code>createOrderAsync</code> 。<strong>使用消息队列异步扣减库存</strong>。</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607143556890.png" class="" title="image-20220607143556890"></li><li><p>调用 <code>itemService</code> 中的 <code>createItemStockLog</code>方法，生成订单流水。</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607150043290.png" class="" title="image-20220607150043290"><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607150138630.png" class="" title="image-20220607150138630"></li></ul></li><li><p>生成二维码【<font color=red>创建订单之前完成</font>】</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607150406410.png" class="" title="image-20220607150406410"></li><li><p>生成用户令牌【<font color=red>用户需要携带令牌才能创建订单</font>】</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607150824891.png" class="" title="image-20220607150824891"><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607151219472.png" class="" title="image-20220607151219472"></li></ol><hr><h4 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h4><ol><li><p>order_info表：保存生成订单信息的表。</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607154425370.png" class="" title="image-20220607154425370"><p>订单信息的id，比如‘20210807000000000000’前八位20210807表示的是订单日期的年月日，后面表示的就是订单的流水号。</p><p>这么做的原因是当订单表未来是会一张很大很大的表，一般情况下会进行数据的拆分，比如我们用京东淘宝会有最近订单和历史订单，历史订单是显然会放在另一张表中，因为如果全部保存在这张下单用的订单表中很显然内存很容易不够用的。</p><p>我们可以根据日期将订单进行拆分，这时候id中的前八位就起到作用了，进行拆分时就可以走<strong>索引</strong>提高效率了，假设不是这样的话就只能使用后面的日期进行拆分那将会很慢。</p></li><li><p>item_stock_log表: 用于记录商品库存的流水记录。</p><img src="/2022/06/07/3-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E4%B8%8E%E7%A7%92%E6%9D%80/image-20220607155001743.png" class="" title="image-20220607155001743"><p>在消息队列中，异步下单时记录商品库存流水，保证异步下单的正常完成。</p></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>该部分为用户进行秒杀时，创建订单，以及创建订单后续如何处理。主要设计 <code>MySQL</code> 操作偏多。</p></li><li><p>如何处理少卖或是超卖问题，记录每个订单的流水，引入消息队列 <code>RocketMQ</code> 异步处理订单请求。</p></li><li><p>多看<code>MySQL</code>相关面试题[索引、事务]，<code>RocketMQ</code>相关面试题[异步处理请求流程]。</p></li><li><p>本文借鉴: <a href="https://blog.csdn.net/weixin_43919497/article/details/119486408">(秒杀项目) 4.4 用户下单与秒杀</a></p></li></ul><hr>]]></content>
    
    
    <summary type="html">秒杀项目中，用户下单与秒杀环节，前后端技术点记录。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot项目" scheme="http://example.com/tags/SpringBoot%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>【22/06/06】2_秒杀项目_商品列表与详情</title>
    <link href="http://example.com/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/"/>
    <id>http://example.com/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/</id>
    <published>2022-06-06T08:35:56.000Z</published>
    <updated>2022-06-07T02:37:40.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秒杀项目–商品列表与详情"><a href="#秒杀项目–商品列表与详情" class="headerlink" title="秒杀项目–商品列表与详情"></a>秒杀项目–商品列表与详情</h2><h3 id="商品列表"><a href="#商品列表" class="headerlink" title="商品列表"></a>商品列表</h3><h4 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h4><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606165305752.png" class="" title="image-20220606165305752"><br><h4 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h4><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606170143554.png" class="" title="image-20220606170143554"><p>Controller中调用了 <code>itemService</code> 中的 <code>findItemsOnPromotion</code> 方法</p><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606170524443.png" class="" title="image-20220606170524443"><p>先将所有商品查询出来，再根据商品的id向 <strong>库存表</strong> 和 <strong>活动表</strong> 中进行查询，判断商品是否符合秒杀活动条件。</p><p><u>使用stream流中的map将每件商品的库存和活动映射到商品实体数据中。</u></p><ul><li><p><code>itemMapper</code></p><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606171108353.png" class="" title="image-20220606171108353"></li><li><p><code>itemStockMapper</code></p><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606171922749.png" class="" title="image-20220606171922749"></li><li><p><code>promotionMapper</code></p><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606172010913.png" class="" title="image-20220606172010913"></li></ul><hr><h3 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h3><h4 id="前端部分-1"><a href="#前端部分-1" class="headerlink" title="前端部分"></a>前端部分</h4><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606172453848.png" class="" title="image-20220606172453848"><br><h4 id="后端部分-1"><a href="#后端部分-1" class="headerlink" title="后端部分"></a>后端部分</h4><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606172657814.png" class="" title="image-20220606172657814"><ul><li><p>调用在 <code>itemService</code> 中的 <code>findItemById</code> 方法，查询商品详细信息。</p><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606173226781.png" class="" title="image-20220606173226781"></li><li><p>后续优化，在缓存中查询商品信息。调用在 <code>itemService</code> 中的 <code>findItemInCache</code> 方法。</p><img src="/2022/06/06/2-%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-20220606173402979.png" class="" title="image-20220606173402979"></li></ul><hr><h3 id="慢查询分析"><a href="#慢查询分析" class="headerlink" title="慢查询分析"></a>慢查询分析</h3><p>通过开启慢查询日志开关，执行某个sql语句超过了配置的<strong>查询的最大时间</strong>，会将该sql记录到慢查询日志中，方便开发人员对sql语句查询慢的原因进行分析，进行<strong>SQL优化</strong>。</p><ul><li><p><strong><font color=red>面试问题</font></strong></p><p>假设在商品展示中发现商品列表加载太慢，然后通过使用<strong>慢查询分析</strong>发现是查询商品活动信息sql语句超时，经过分析是查询<font color=red>没有使用索引</font>，优化后使用索引提高了页面的加载速度。</p></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>商品列表和详情的后端开发方法都是比较常规的。重点是 <strong>引入缓存进行优化的操作</strong>，而且涉及大量的数据库增删改查操作，需要多看mysql相关的知识点。</p><p>参考资料:<a href="https://blog.csdn.net/weixin_43919497/article/details/119463509">(秒杀项目) 4.3 商品列表与详情</a></p><hr>]]></content>
    
    
    <summary type="html">秒杀项目中，商品详情页前后端技术点记录。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot项目" scheme="http://example.com/tags/SpringBoot%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>【22/06/06】1_秒杀项目_用户注册与登录</title>
    <link href="http://example.com/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/"/>
    <id>http://example.com/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/</id>
    <published>2022-06-06T02:37:59.000Z</published>
    <updated>2022-06-06T08:35:10.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="秒杀项目——用户注册与登录"><a href="#秒杀项目——用户注册与登录" class="headerlink" title="秒杀项目——用户注册与登录"></a>秒杀项目——用户注册与登录</h2><h3 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h3><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><img src="/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/image-20220606104641917.png" class="" title="image-20220606104641917"><p>从前端页面可知，用户输入手机号获取验证码，输入正确后才能进行用户的注册。</p><h4 id="后端模块"><a href="#后端模块" class="headerlink" title="后端模块"></a>后端模块</h4><ol><li><p>验证码模块</p><img src="/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/image-20220606105331776.png" class="" title="image-20220606105331776"><ul><li><p>生成验证码: 随机生成四个0-9内的数字</p><img src="/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/image-20220606105454901.png" class="" title="image-20220606105454901"></li><li><p>绑定验证码: 这里我们将生成的验证码存入到redis缓存中，并设置5分钟过期时间。</p></li><li><p>发送验证码: 将验证码信息发送至后端控制台。</p></li></ul></li><li><p>注册模块</p><img src="/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/image-20220606110321201.png" class="" title="image-20220606110321201"><ul><li><p>首先，获取到用户输入的验证码，进行判断。</p></li><li><p>验证码通过后，对用户设置的密码进行MD5加密处理。</p></li><li><p>调用UserService中的register方法进行注册。</p><img src="/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/image-20220606110832033.png" class="" title="image-20220606110832033"></li></ul></li></ol><hr><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><h4 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h4><p>用户输入注册的手机号和密码进行登录。</p><img src="/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/image-20220606105728819.png" class="" title="image-20220606105728819"><h4 id="后端模块-1"><a href="#后端模块-1" class="headerlink" title="后端模块"></a>后端模块</h4><ol><li><p>用户登录</p><img src="/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/image-20220606111426040.png" class="" title="image-20220606111426040"><ul><li>首先，判断收到的账号和密码是否正确。</li><li>将用户输入的密码经过<code>MD5</code>加密后，调用<code>UserService</code>中的<code>login</code>方法进行登录。</li><li>将用户的信息存入到<code>Redis</code>缓存中。</li></ul></li></ol><hr><h3 id="登陆状态的维护"><a href="#登陆状态的维护" class="headerlink" title="登陆状态的维护"></a>登陆状态的维护</h3><p>使用 <code> Session</code> 记录登陆状态，登录成功时，将用户对象(loginUser)存入到 <code>Session </code>中，没有登录的话不会有这个对象。</p><p><u>后续优化，使用 <code>Redis缓存</code> 存储用户的信息，登陆时可以从缓存中取出用户信息进行判断。</u></p><p>使用 <code>SpringMVC</code> 中的 <strong>拦截器功能</strong> 实现上述操作。</p><ol><li><p>自定义拦截器</p><img src="/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/image-20220606155534063.png" class="" title="image-20220606155534063"><p>写一个类实现 <code>HandlerInterceptor</code> 接口, 实现这个接口可以重写三种方法。</p><ul><li><code>preHandle</code>：控制器执行之前执行、return false为不放行、return true表示放行。</li><li><code>postHandle</code>：控制器执行之后执行。</li><li><code>afterHandle</code>：页面渲染完之后执行。</li></ul></li><li><p>配置拦截器</p><p>拦截器定义完成后，接下来工作是将其注册到 <code>IOC</code> 中，配置好拦截的路径。</p><p>实现方式: 写一个配置类，通过实现 <code>WebMvcConfigurer</code> 接口中的 <code>addInterceptors</code> 方法实现。</p><img src="/2022/06/06/1-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/image-20220606161821740.png" class="" title="image-20220606161821740"></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该秒杀项目的用户注册与登录模块的开发，采用的方法较为普遍。</p><p>对于用户登录状态的维护，实现 <code>HandlerInterceptor</code> 接口中的 <code>preHandle</code> 方法对用户进行放行。自定义好之后通过配置类实现 <code>WebMvcConfiguration </code> 接口中的 <code>addInterceptor</code> 方法。</p><ul><li><p>拦截器的原理: <a href="https://blog.csdn.net/weixin_43919497/article/details/119213115">拦截器原理</a></p></li><li><p>有关<strong>单点登录</strong>的实现方式，可以参考以下文章：<a href="https://www.cnblogs.com/zhuifeng523/p/11598115.html">面试必问的4种单点登录的实现方式，你知道几个？</a></p></li><li><p>本文参考: <a href="https://blog.csdn.net/weixin_43919497/article/details/119389565">(秒杀项目) 4.2 用户登录和注册</a></p></li></ul><hr>]]></content>
    
    
    <summary type="html">秒杀项目中，用户注册与用户登录使用到的技术点记录。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot项目" scheme="http://example.com/tags/SpringBoot%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>【22/05/03】SpringBoot前后端分离项目部署服务器</title>
    <link href="http://example.com/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-05-03T11:59:24.000Z</published>
    <updated>2022-05-03T14:08:11.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前后端项目部署"><a href="#前后端项目部署" class="headerlink" title="前后端项目部署"></a>前后端项目部署</h2><hr><h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1 环境配置"></a>1 环境配置</h3><h4 id="1-docker配置mysql"><a href="#1-docker配置mysql" class="headerlink" title="1.docker配置mysql"></a>1.docker配置mysql</h4><p>1.安装mysql</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull mysql:<span class="number">5</span>.<span class="number">7</span></span><br></pre></td></tr></table></figure><p>2.配置mysql</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">3307</span>:<span class="number">3306</span> --privileged=<span class="keyword">true</span> -v <span class="regexp">/home/my</span>sql8<span class="regexp">/log:/</span>var<span class="regexp">/log/my</span>sql -v <span class="regexp">/home/my</span>sql8<span class="regexp">/data:/</span>var<span class="regexp">/lib/my</span>sql -v <span class="regexp">/home/my</span>sql8<span class="regexp">/conf:/</span>etc<span class="regexp">/mysql/</span>conf.d -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span> --name mysql8 mysql:<span class="number">8.0</span></span><br></pre></td></tr></table></figure><p>3.使用mysql</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># docker exec -it mysql bash <span class="comment">// 运行mysql</span></span></span><br><span class="line"><span class="meta"># mysql -u root -p <span class="comment">// 登录mysql</span></span></span><br><span class="line"><span class="meta"># show variables like <span class="meta-string">&quot;character%&quot;</span> <span class="comment">// 查询字符类型</span></span></span><br></pre></td></tr></table></figure><p>注意：<strong>docker安装完MySQL并run出容器后，建议请先修改完字符集编码后再新建mysql库-表-插数据。</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /home/mysql8/conf/</span></span><br><span class="line"><span class="comment"># vim my.cnf 【新建文件】</span></span><br><span class="line">添加以下内容：</span><br><span class="line">————————————————————————————————————</span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br><span class="line">————————————————————————————————————</span><br><span class="line"><span class="comment"># docker restart mysql8 【重启mysql】</span></span><br></pre></td></tr></table></figure><hr><h4 id="2-docker安装node-js"><a href="#2-docker安装node-js" class="headerlink" title="2.docker安装node.js"></a>2.docker安装node.js</h4><p>1.安装nodejs</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull <span class="keyword">node</span><span class="title">:latest</span></span><br></pre></td></tr></table></figure><p>2.安装完成，运行nodejs</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name <span class="keyword">node</span><span class="title">-test</span> <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure><p>3.最后进入查看容器运行的 node 版本:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it <span class="keyword">node</span><span class="title">-test</span> /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">9001</span>:<span class="number">80</span> --name nginx -v <span class="regexp">/usr/</span>local<span class="regexp">/docker/</span>nginx<span class="regexp">/conf/</span>nginx.conf:<span class="regexp">/etc/</span>nginx<span class="regexp">/nginx.conf -v /u</span>sr<span class="regexp">/local/</span>docker<span class="regexp">/nginx/</span>conf<span class="regexp">/conf.d:/</span>etc<span class="regexp">/nginx/</span>conf.d -v <span class="regexp">/usr/</span>local<span class="regexp">/docker/</span>nginx<span class="regexp">/log:/</span>var<span class="regexp">/log/</span>nginx -v <span class="regexp">/usr/</span>local<span class="regexp">/docker/</span>nginx<span class="regexp">/html:/u</span>sr<span class="regexp">/share/</span>nginx/html -d nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="3-安装Nginx"><a href="#3-安装Nginx" class="headerlink" title="3.安装Nginx"></a>3.安装Nginx</h4><p><a href="https://www.linuxprobe.com/linux-install-nginx.html">Linux环境下安装nginx | 《Linux就该这么学》 (linuxprobe.com)</a></p><hr><h4 id="4-安装Redis"><a href="#4-安装Redis" class="headerlink" title="4.安装Redis"></a>4.安装Redis</h4><p><a href="https://www.cnblogs.com/bJydsJ/p/14962649.html">Linux：CentOS7下安装Redis的详细步骤 - 不经意的瞬间 - 博客园 (cnblogs.com)</a></p><hr><h3 id="2-项目上线"><a href="#2-项目上线" class="headerlink" title="2 项目上线"></a>2 项目上线</h3><h4 id="1-演示项目介绍"><a href="#1-演示项目介绍" class="headerlink" title="1.演示项目介绍"></a>1.演示项目介绍</h4><p>拿若依项目作为演示(项目地址：<a href="http://www.ruoyi.vip/">若依</a>)。</p><p>项目简介：基于SpringBoot的权限管理系统，<strong>前后端分离</strong>。</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503151158112.png" class="" title="image-20220503151158112"><p><strong>项目结构</strong></p><p><strong>后端部分</strong> 和 <strong>前端部分</strong></p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503151356684.png" class="" title="image-20220503151356684"><p><strong>配置部分</strong></p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503151509720.png" class="" title="image-20220503151509720"><ul><li><p><code>logback.xml</code>日志配置文件</p><ol><li><p>修改日志指定路径 — <font color=red>Linux下的路径</font></p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503151702176.png" class="" title="image-20220503151702176"><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503151746794.png" class="" title="image-20220503151746794"></li><li><p>修改日志输出编码格式，修改为<FONT COLOR=RED> UTF-8 </FONT>(有三处需要添加)</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503151847825.png" class="" title="image-20220503151847825"></li></ol></li><li><p><code>application.yml</code>项目配置</p><ol><li><p>修改启动端口</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503152035015.png" class="" title="image-20220503152035015"></li><li><p>修改Redis配置</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503152130055.png" class="" title="image-20220503152130055"></li></ol></li><li><p><code>application-druid.yml</code>数据源配置</p><ol><li><p>配置数据库连接信息</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503152433091.png" class="" title="image-20220503152433091"></li></ol></li></ul><br><p><strong>完事具备，可以开始打包。</strong></p><hr><h4 id="2-前端项目打包"><a href="#2-前端项目打包" class="headerlink" title="2.前端项目打包"></a>2.前端项目打包</h4><ol><li><p>找到前端部分，从 ‘<strong>终端</strong>’ 打开 — <font color=red>Open in Terminal</font></p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503152655911.png" class="" title="image-20220503152655911"></li><li><p>安装前端依赖</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503152816741.png" class="" title="image-20220503152816741"></li><li><p>执行打包命令（打<strong>生产环境包</strong>）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="builtin-name">run</span> build:prod</span><br></pre></td></tr></table></figure></li><li><p>打包完成后，会生成 <code>dist</code> 文件夹</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503152956504.png" class="" title="image-20220503152956504"></li><li><p>将 <code>ruoyi-ui</code> 压缩成包，上传至服务器</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503153052029.png" class="" title="image-20220503153052029"></li></ol><br><p><strong>前端打包完毕！</strong></p><hr><h4 id="3-后端部分打包"><a href="#3-后端部分打包" class="headerlink" title="3.后端部分打包"></a>3.后端部分打包</h4><ol><li><p>将项目在终端打开</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503153311256.png" class="" title="image-20220503153311256"></li><li><p>执行打包命令</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="class"><span class="keyword">package</span></span></span><br></pre></td></tr></table></figure><p><font color=red>生成 jar 包文件</font></p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503153418605.png" class="" title="image-20220503153418605"></li><li><p>后端包上传至服务器</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503153502923.png" class="" title="image-20220503153502923"></li></ol><br><p><font color=red>后端打包完成！</font></p><hr><h3 id="3-项目启动"><a href="#3-项目启动" class="headerlink" title="3 项目启动"></a>3 项目启动</h3><h4 id="1-部署前端项目"><a href="#1-部署前端项目" class="headerlink" title="1.部署前端项目"></a>1.部署前端项目</h4><p><font color=red>首先保证装了Nginx！！！</font></p><ol><li><p>配置Nginx</p><ul><li><p>配置用户权限 </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">user</span> <span class="title">root</span></span><br></pre></td></tr></table></figure><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503154455173.png" class="" title="image-20220503154455173"></li><li><p>配置跳转前端资源的路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">            root   <span class="regexp">/root/</span>workspace<span class="regexp">/ruoyi-ui/</span>dist;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503154541341.png" class="" title="image-20220503154541341"></li><li><p>配置Nginx的请求转发规则</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location  <span class="regexp">/prod-api/</span> &#123;   </span><br><span class="line">proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">proxy_pass http:<span class="regexp">//</span>你的ip地址:<span class="number">8080</span>/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503154700466.png" class="" title="image-20220503154700466"></li></ul></li></ol><hr><h4 id="2-部署后端项目"><a href="#2-部署后端项目" class="headerlink" title="2.部署后端项目"></a>2.部署后端项目</h4><ol><li><p>cd到项目的位置，通过 <code>java -jar &lt;项目名&gt;</code> 启动项目</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@VM</span><span class="number">-4</span><span class="number">-14</span>-centos workspace]<span class="meta"># java -jar ruoyi-admin.jar</span></span><br></pre></td></tr></table></figure></li><li><p>显示启动成功</p><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503154906534.png" class="" title="image-20220503154906534"></li></ol><hr><h4 id="3-验证效果"><a href="#3-验证效果" class="headerlink" title="3.验证效果"></a>3.验证效果</h4><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503155029088.png" class="" title="image-20220503155029088"><img src="/2022/05/03/%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220503155052625.png" class="" title="image-20220503155052625"><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此，项目的服务器部署流程就走完了。</p><p>参考：<a href="https://blog.csdn.net/qq_43284469/article/details/115800331">https://blog.csdn.net/qq_43284469/article/details/115800331</a></p><hr>]]></content>
    
    
    <summary type="html">SpringBoot前后端分离项目部署在服务器的流程记录。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/30】在线学习网站项目_day04</title>
    <link href="http://example.com/2022/03/31/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day04/"/>
    <id>http://example.com/2022/03/31/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day04/</id>
    <published>2022-03-31T12:40:51.000Z</published>
    <updated>2022-04-02T01:49:17.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day04-在线学习网站项目——阿里云oss使用、Nginx"><a href="#Day04-在线学习网站项目——阿里云oss使用、Nginx" class="headerlink" title="Day04_在线学习网站项目——阿里云oss使用、Nginx"></a>Day04_在线学习网站项目——阿里云oss使用、Nginx</h2><h3 id="阿里云oss的使用"><a href="#阿里云oss的使用" class="headerlink" title="阿里云oss的使用"></a>阿里云oss的使用</h3><p>为了解决海量数据存储与弹性扩容，项目中我们采用云存储的解决方案- 阿里云OSS。</p><h4 id="创建云存储微服务"><a href="#创建云存储微服务" class="headerlink" title="创建云存储微服务"></a>创建云存储微服务</h4><ol><li><p><strong>后端</strong> ：创建子模块 <code>service/service_oss</code></p><ol><li><p>配置<code>pom.xml</code> , 添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阿里云oss依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日期工具栏依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置文件 <code>application.properties</code> </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8002</span></span><br><span class="line"><span class="comment">#服务名</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-oss</span></span><br><span class="line"><span class="comment">#环境设置：dev、test、prod</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#阿里云 OSS</span></span><br><span class="line"><span class="comment">#不同的服务器，地址不同</span></span><br><span class="line"><span class="meta">aliyun.oss.file.endpoint</span>=<span class="string">oss-cn-beijing.aliyuncs.com</span></span><br><span class="line"><span class="meta">aliyun.oss.file.keyid</span>=<span class="string">&#x27;你的accesskey&#x27;</span></span><br><span class="line"><span class="meta">aliyun.oss.file.keysecret</span>=<span class="string">&#x27;你的keysecret&#x27;</span></span><br><span class="line"><span class="comment">#bucket可以在控制台创建，也可以使用java代码创建</span></span><br><span class="line"><span class="meta">aliyun.oss.file.bucketname</span>=<span class="string">gulischool-online</span></span><br></pre></td></tr></table></figure></li><li><p>创建 <code>OssController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/eduoss/fileoss&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OssService ossService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.上传头像的方法</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">uploadOssFile</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上传的文件</span></span><br><span class="line">        <span class="comment">// 返回上传到oss的路径</span></span><br><span class="line">        String url = ossService.uploadFileAvatar(file);</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;url&quot;</span>,url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>service</code></p><ul><li><p><code>OssService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OssService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//上传头像到oss</span></span><br><span class="line">    <span class="function">String <span class="title">uploadFileAvatar</span><span class="params">(MultipartFile file)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>OssServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssServiceImpl</span> <span class="keyword">implements</span> <span class="title">OssService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFileAvatar</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 工具类获取值</span></span><br><span class="line">        String endpoint = ConstantPropertiesUtils.END_POIND;</span><br><span class="line">        String accessKeyId = ConstantPropertiesUtils.ACCESS_KEY_ID;</span><br><span class="line">        String accessKeySecret = ConstantPropertiesUtils.ACCESS_KEY_SECRET;</span><br><span class="line">        String bucketName = ConstantPropertiesUtils.BUCKET_NAME;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">            OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取文件输入流</span></span><br><span class="line">            InputStream inputStream = file.getInputStream();</span><br><span class="line">            <span class="comment">// 获取文件输入名称</span></span><br><span class="line">            String fileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1 在文件名称里面添加随机唯一的值</span></span><br><span class="line">            String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">// yuy76t5rew01.jpg</span></span><br><span class="line">            fileName = uuid+fileName;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2 把文件按照日期进行分类</span></span><br><span class="line">            <span class="comment">//获取当前日期</span></span><br><span class="line">            String datePath = <span class="keyword">new</span> DateTime().toString(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">            <span class="comment">//拼接</span></span><br><span class="line">            fileName = datePath+<span class="string">&quot;/&quot;</span>+fileName;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用oss方法实现上传</span></span><br><span class="line">            <span class="comment">//第一个参数  Bucket名称</span></span><br><span class="line">            <span class="comment">//第二个参数  上传到oss文件路径和文件名称   aa/bb/1.jpg</span></span><br><span class="line">            <span class="comment">//第三个参数  上传文件输入流</span></span><br><span class="line">            ossClient.putObject(bucketName,fileName , inputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">            ossClient.shutdown();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把上传之后文件路径返回</span></span><br><span class="line">            <span class="comment">//需要把上传到阿里云oss路径手动拼接出来</span></span><br><span class="line">            String url = <span class="string">&quot;https://&quot;</span>+bucketName+<span class="string">&quot;.&quot;</span>+endpoint+<span class="string">&quot;/&quot;</span>+fileName;</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建 <strong>工具类</strong> <code>ConstantPropertiesUtils.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当项目已启动，spring接口，spring加载之后，执行接口一个方法</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantPropertiesUtils</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;  <span class="comment">// 每次初始化后可以读取定义的值</span></span><br><span class="line">    <span class="comment">// 读取配置文件内容</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endPoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keyId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keySecret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义公开静态常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String END_POIND;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ACCESS_KEY_ID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ACCESS_KEY_SECRET;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String BUCKET_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        END_POIND = endPoint;</span><br><span class="line">        ACCESS_KEY_ID = keyId;</span><br><span class="line">        ACCESS_KEY_SECRET = keySecret;</span><br><span class="line">        BUCKET_NAME = bucketName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ol><li><p>请求转发</p><img src="/2022/03/31/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day04/image-20220331204303257.png" class="" title="image-20220331204303257"></li><li><p>负载均衡</p><img src="/2022/03/31/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day04/image-20220331204354320.png" class="" title="image-20220331204354320"></li><li><p>动静分离</p><ul><li><strong>静态资源[图片、静态网页等]</strong> 存储在 <strong>静态</strong> 资源服务器。</li><li><strong>动态资源[java代码等]</strong> 存储在 <strong>动态</strong> 资源服务器。</li></ul></li><li><p>Nginx的使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx.exe <span class="regexp">//</span> 启动</span><br><span class="line">nginx.exe -s stop <span class="regexp">//</span> 关闭</span><br></pre></td></tr></table></figure><blockquote><p>1.修改 <code>nginx.conf</code>配置信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       81;</span><br><span class="line">        server_name  localhost;</span><br></pre></td></tr></table></figure><blockquote><p>2.配置<code>nginx</code>转发规则</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       9001; # 监听接口</span><br><span class="line">       server_name  localhost; # 主机</span><br><span class="line"></span><br><span class="line">location ~ /eduservice/ &#123; # 匹配路径</span><br><span class="line">proxy_pass http://localhost:8001; # 转发服务器地址</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /eduoss/ &#123;</span><br><span class="line">proxy_pass http://localhost:8002;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="实现添加教师信息头像"><a href="#实现添加教师信息头像" class="headerlink" title="实现添加教师信息头像"></a>实现添加教师信息头像</h3><ol><li><p>将组件添加到 <code>\src\components</code></p><img src="/2022/03/31/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day04/image-20220331220624758.png" class="" title="image-20220331220624758"></li><li><p>添加讲师页面上传组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!-- 讲师头像：TODO --&gt;</span><br><span class="line">&lt;!-- 讲师头像 --&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;讲师头像&quot;&gt;</span><br><span class="line">   </span><br><span class="line">      &lt;!-- 头衔缩略图 --&gt;</span><br><span class="line">      &lt;pan-thumb :image=&quot;teacher.avatar&quot;/&gt;</span><br><span class="line">      &lt;!-- 文件上传按钮 --&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-upload&quot; @click=&quot;imagecropperShow=true&quot;&gt;更换头像</span><br><span class="line">      &lt;/el-button&gt;</span><br><span class="line">   </span><br><span class="line">      &lt;!--</span><br><span class="line">  v-show：是否显示上传组件</span><br><span class="line">  :key：类似于id，如果一个页面多个图片上传控件，可以做区分</span><br><span class="line">  :url：后台上传的url地址</span><br><span class="line">  @close：关闭上传组件</span><br><span class="line">  @crop-upload-success：上传成功后的回调 </span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt;</span><br><span class="line">  --&gt;</span><br><span class="line">    &lt;image-cropper</span><br><span class="line">                    v-show=&quot;imagecropperShow&quot;</span><br><span class="line">                    :width=&quot;300&quot;</span><br><span class="line">                    :height=&quot;300&quot;</span><br><span class="line">                    :key=&quot;imagecropperKey&quot;</span><br><span class="line">                    :url=&quot;BASE_API+&#x27;/eduoss/fileoss&#x27;&quot;</span><br><span class="line">                    field=&quot;file&quot;</span><br><span class="line">                    @close=&quot;close&quot;</span><br><span class="line">                    @crop-upload-success=&quot;cropSuccess&quot;/&gt;</span><br><span class="line">  &lt;/el-form-item&gt; </span><br></pre></td></tr></table></figure></li><li><p>使用组件</p><blockquote><p>data(){…}: 定义变量和初始值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imagecropperShow:<span class="literal">false</span>, <span class="comment">// 上传组件是否显示</span></span><br><span class="line"><span class="attr">imagecropperKey</span>:<span class="number">0</span>, <span class="comment">// 上传组件的key值</span></span><br><span class="line"><span class="attr">BASE_API</span>:process.env.BASE_API, <span class="comment">// 获取dev.env.js里面的地址</span></span><br></pre></td></tr></table></figure></li><li><p><strong>引入组件</strong> 和 <strong>声明组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入 </span></span><br><span class="line"><span class="keyword">import</span> ImageCropper <span class="keyword">from</span> <span class="string">&#x27;@/components/ImageCropper&#x27;</span></span><br><span class="line"><span class="keyword">import</span> PanThumb <span class="keyword">from</span> <span class="string">&#x27;@/components/PanThumb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.声明</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123; ImageCropper, PanThumb &#125;,</span><br></pre></td></tr></table></figure></li><li><p>修改上传接口地址</p><img src="/2022/03/31/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day04/image-20220331221207799.png" class="" title="image-20220331221207799"></li><li><p>编写close方法和上传成功的办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">close</span>(<span class="params"></span>)</span> &#123; <span class="comment">// 关闭上传头像弹窗的方法</span></span><br><span class="line">            <span class="built_in">this</span>.imagecropperShow=<span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="function"><span class="title">cropSuccess</span>(<span class="params">data</span>)</span> &#123; <span class="comment">// 上传成功的方法</span></span><br><span class="line">            <span class="built_in">this</span>.imagecropperShow=<span class="literal">false</span></span><br><span class="line">            <span class="comment">// 上传成功返回图片地址</span></span><br><span class="line">            <span class="built_in">this</span>.teacher.avatar=data.url</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="课程分类添加-—-使用-EasyExcel"><a href="#课程分类添加-—-使用-EasyExcel" class="headerlink" title="课程分类添加 — 使用 EasyExcel"></a>课程分类添加 — 使用 <code>EasyExcel</code></h3><h4 id="使用-EasyExcel-进行写操作"><a href="#使用-EasyExcel-进行写操作" class="headerlink" title="使用 EasyExcel 进行写操作"></a>使用 <code>EasyExcel</code> 进行写操作</h4><h4 id="使用-EasyExcel-进行读操作"><a href="#使用-EasyExcel-进行读操作" class="headerlink" title="使用 EasyExcel 进行读操作"></a>使用 <code>EasyExcel</code> 进行读操作</h4><ol><li><p>创建 excel 对应实体类</p><blockquote><p><code>entity/excel/ExcelSubjectData.java</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelSubjectData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String oneSubjectName;</span><br><span class="line">    <span class="meta">@ExcelProperty(index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String twoSubjectName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>Controller中添加方法</p><blockquote><p><code>EduSubjectController.java</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/eduservice/edu-subject&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduSubjectController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EduSubjectService subjectService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加课程分类</span></span><br><span class="line">    <span class="comment">// 获取上传的文件，把文件内容读取出来</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;addSubject&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">addSubject</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 上传过来的文件</span></span><br><span class="line">        subjectService.saveSubject(file,subjectService);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>完善Service接口</p><blockquote><p><code>EduSubjectService.java</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EduSubjectService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">EduSubject</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveSubject</span><span class="params">(MultipartFile file,EduSubjectService subjectService)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>EduSubjectServiceImpl.java</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduSubjectServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">EduSubjectMapper</span>, <span class="title">EduSubject</span>&gt; <span class="keyword">implements</span> <span class="title">EduSubjectService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加课程分类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveSubject</span><span class="params">(MultipartFile file,EduSubjectService subjectService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 文件输入流</span></span><br><span class="line">            InputStream in = file.getInputStream();</span><br><span class="line">            <span class="comment">// 调用方法进行读取</span></span><br><span class="line">            EasyExcel.read(in, ExcelSubjectData.class,<span class="keyword">new</span> SubjectExcelListener(subjectService)).sheet().doRead();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SelfExceptionHandler(<span class="number">20002</span>,<span class="string">&quot;课程分类添加失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>创建监听器</p><p><code>SubjectExcelListener</code>不能交给Spring管理，需要自己手动创建new,不能注入其他对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectExcelListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">ExcelSubjectData</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 因为SubjectExcelListener不能交给spring进行管理，需要自己new，不能注入其他对象</span></span><br><span class="line">    <span class="comment">// 不能进行数据库操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要手动注入</span></span><br><span class="line">    <span class="keyword">public</span> EduSubjectService subjectService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubjectExcelListener</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubjectExcelListener</span><span class="params">(EduSubjectService subjectService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subjectService = subjectService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取excel内容，一行一行读取</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(ExcelSubjectData excelSubjectData, AnalysisContext analysisContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(excelSubjectData==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SelfExceptionHandler(<span class="number">20001</span>,<span class="string">&quot;文件数据为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一行一行读取，每次读取两个值，第一个值一级分类，第二个值二级分类</span></span><br><span class="line">        <span class="comment">// 1.判断一级分类是否重复</span></span><br><span class="line">        EduSubject existOneSubject = <span class="keyword">this</span>.existOneSubject(subjectService, excelSubjectData.getOneSubjectName());</span><br><span class="line">        <span class="keyword">if</span>(existOneSubject == <span class="keyword">null</span>) &#123; <span class="comment">// 判断没有相同的一级分类，进行添加</span></span><br><span class="line">            existOneSubject = <span class="keyword">new</span> EduSubject();</span><br><span class="line">            existOneSubject.setParentId(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            existOneSubject.setTitle(excelSubjectData.getOneSubjectName());</span><br><span class="line">            subjectService.save(existOneSubject);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取一级分类id值</span></span><br><span class="line">        String pid = existOneSubject.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.判断二级分类是否重复</span></span><br><span class="line">        EduSubject existTwoSubject = <span class="keyword">this</span>.existTwoSubject(subjectService, excelSubjectData.getTwoSubjectName(), pid);</span><br><span class="line">        <span class="keyword">if</span>(existTwoSubject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            existTwoSubject = <span class="keyword">new</span> EduSubject();</span><br><span class="line">            existTwoSubject.setParentId(pid);</span><br><span class="line">            existTwoSubject.setTitle(excelSubjectData.getTwoSubjectName()); <span class="comment">// 二级分类名称</span></span><br><span class="line">            subjectService.save(existTwoSubject);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断一级分类不能重复</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> EduSubject <span class="title">existOneSubject</span><span class="params">(EduSubjectService subjectService,String name)</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;EduSubject&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;title&quot;</span>,name);</span><br><span class="line">        wrapper.eq(<span class="string">&quot;parent_id&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        EduSubject oneSubject = subjectService.getOne(wrapper);</span><br><span class="line">        <span class="keyword">return</span> oneSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断二级分类不能重复</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> EduSubject <span class="title">existTwoSubject</span><span class="params">(EduSubjectService subjectService,String name,String pid)</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;EduSubject&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;title&quot;</span>,name);</span><br><span class="line">        wrapper.eq(<span class="string">&quot;parent_id&quot;</span>,pid);</span><br><span class="line">        EduSubject TwoSubject = subjectService.getOne(wrapper);</span><br><span class="line">        <span class="keyword">return</span> TwoSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最终方法调用</p><p>在 <code>swagger</code> 中测试读取 <code>excel </code>文件，写入数据库的方法。</p></li></ol><hr><h3 id="课程分类展示"><a href="#课程分类展示" class="headerlink" title="课程分类展示"></a>课程分类展示</h3><h4 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h4><ol><li><p>创建 <strong>实体类</strong></p><blockquote><p><code>OneSubject.java</code> — 一级分类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneSubject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个一级分类有多个二级分类</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TwoSubject&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>TwoSubject.java</code> — 二级分类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSubject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>编写 <strong>接口</strong></p><blockquote><p><code>service</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;OneSubject&gt; <span class="title">getAllOneTwoSubject</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>impl</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OneSubject&gt; <span class="title">getAllOneTwoSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.查询所有的一级分类</span></span><br><span class="line">        QueryWrapper&lt;EduSubject&gt; wrapperOne = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapperOne.eq(<span class="string">&quot;parent_id&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        List&lt;EduSubject&gt; oneSubjectList = baseMapper.selectList(wrapperOne);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.查询所有的二级分类</span></span><br><span class="line">        QueryWrapper&lt;EduSubject&gt; wrapperTwo = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapperTwo.ne(<span class="string">&quot;parent_id&quot;</span>,<span class="string">&quot;0&quot;</span>); <span class="comment">// .ne 不等于</span></span><br><span class="line">        List&lt;EduSubject&gt; twoSubjectList = baseMapper.selectList(wrapperTwo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建list集合，用于存储最终封装数据</span></span><br><span class="line">        List&lt;OneSubject&gt; finalSubjectList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 前端要ArrayList&lt;OneSubject&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.封装一级分类</span></span><br><span class="line">        <span class="comment">// 查询出来的所有的一级分类list遍历集合，得到每一个一级分类对象，获取每一个一级分类对象值</span></span><br><span class="line">        <span class="comment">// 封装到要求的集合里面  List&lt;OneSubject&gt; finalSubjectList</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oneSubjectList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 得到oneSubjectList中的每个eduSubject对象</span></span><br><span class="line">            EduSubject eduSubject = oneSubjectList.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把eduSubject里面的值获取出来，放到oneSubject对象里面去</span></span><br><span class="line">            <span class="comment">// 多个OneSubject放到finalSubjectList里面</span></span><br><span class="line">            OneSubject oneSubject = <span class="keyword">new</span> OneSubject();</span><br><span class="line"><span class="comment">//            oneSubject.setId(eduSubject.getId());</span></span><br><span class="line"><span class="comment">//            oneSubject.setTitle(eduSubject.getTitle());</span></span><br><span class="line">            BeanUtils.copyProperties(eduSubject,oneSubject); <span class="comment">// 上面两行代码可用这行代码替换 前get后set</span></span><br><span class="line"></span><br><span class="line">            List&lt;TwoSubject&gt; twoFinalSubjectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">// 5.封装二级分类</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; twoSubjectList.size(); j++) &#123;</span><br><span class="line">                <span class="comment">// 获取每个二级分类</span></span><br><span class="line">                EduSubject tSubject = twoSubjectList.get(j);</span><br><span class="line">                <span class="comment">// 判断二级分类 parent_id 和一级分类id是否相同</span></span><br><span class="line">                <span class="keyword">if</span>(tSubject.getParentId().equals(eduSubject.getId())) &#123;</span><br><span class="line">                    TwoSubject twoSubject = <span class="keyword">new</span> TwoSubject();</span><br><span class="line">                    BeanUtils.copyProperties(tSubject,twoSubject);</span><br><span class="line">                    twoFinalSubjectList.add(twoSubject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把所有二级分类放入到一级分类下</span></span><br><span class="line">            oneSubject.setChildren(twoFinalSubjectList);</span><br><span class="line">            finalSubjectList.add(oneSubject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> finalSubjectList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><br><h4 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h4><ol><li><p>创建 <code>api</code></p><blockquote><p><code>src/api/edu/subject.js</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 1 课程分类列表</span></span><br><span class="line">    <span class="function"><span class="title">getSubjectList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/eduservice/subject/getAllSubject&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>创建 <code>list.vue</code></p><blockquote><p><code>src/views/edu/subject/list.vue</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;filterText&quot; placeholder=&quot;Filter keyword&quot; style=&quot;margin-bottom:30px;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-tree</span><br><span class="line">      ref=&quot;tree2&quot;</span><br><span class="line">      :data=&quot;data2&quot;</span><br><span class="line">      :props=&quot;defaultProps&quot;</span><br><span class="line">      :filter-node-method=&quot;filterNode&quot;</span><br><span class="line">      class=&quot;filter-tree&quot;</span><br><span class="line">      default-expand-all</span><br><span class="line">    /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import subject from &#x27;@/api/edu/subject&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      filterText: &#x27;&#x27;,</span><br><span class="line">      data2: [],</span><br><span class="line">      defaultProps: &#123;</span><br><span class="line">        children: &#x27;children&#x27;,</span><br><span class="line">        label: &#x27;title&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getAllSubject()</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    filterText(val) &#123;</span><br><span class="line">      this.$refs.tree2.filter(val)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    getAllSubject() &#123;</span><br><span class="line">      subject.getSubjectList()</span><br><span class="line">      .then(response =&gt; &#123;</span><br><span class="line">        this.data2 = response.data.list</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    filterNode(value, data) &#123;</span><br><span class="line">      if (!value) return true;</span><br><span class="line">      return data.title.toLowerCase().indexOf(value.toLowerCase()) !== -1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>实现 <strong>查询</strong> <font color=red>不区分大小写</font>效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">filterNode</span>(<span class="params">value, data</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> data.title.toLowerCase().indexOf(value.toLowerCase()) !== -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
    
    
    <summary type="html">学习开发在线学习网站项目第四天内容：阿里云oss的使用、Nginx。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>算法知识点</title>
    <link href="http://example.com/2022/03/31/%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2022/03/31/%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2022-03-31T03:02:16.000Z</published>
    <updated>2022-05-05T03:10:29.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法知识点记录"><a href="#算法知识点记录" class="headerlink" title="算法知识点记录"></a>算法知识点记录</h2><hr><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><h4 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h4><p>(1) 原理：对于 <strong>有向无环图(DAG)</strong> 的顶点进行排序，使得每一条有向边 (<em>u</em>,<em>v</em>) 均有 <em>u</em> 比 <em>v</em> 先出现。对某节点 <em>v</em> 而言，只有 <em>v</em> 的所有的源节点都出现了, <em>v</em> 才能出现。</p><p>(2) 特点：拓扑排序的 <strong>结果不唯一</strong> 。</p><p>(3) 代码思想：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(1) 新建 node类，包含节点数值和它的指向(这里直接用list集合替代链表了)</span><br><span class="line">(2) 一个数组包含node(这里默认编号较集中)。初始化，添加每个节点指向的时候同时被指的节点入度+1！(A—&gt;C)那么C的入度+1；</span><br><span class="line">(3) 扫描一遍所有node。将所有入度为0的点加入一个栈(队列)。</span><br><span class="line">(4) 当栈(队列)不空的时候，抛出其中任意一个node(栈就是尾，队就是头，顺序无所谓，上面分析了只要同时入度为零可以随便选择顺序)。将node输出，并且node指向的所有元素入度减一。如果某个点的入度被减为0，那么就将它加入栈(队列)。</span><br><span class="line">(5) 重复上述操作，直到栈为空。</span><br><span class="line"></span><br><span class="line">这里主要是利用栈或者队列储存入度只为0的节点，只需要初次扫描表将入度为0的放入栈(队列)中。</span><br><span class="line">这里你或许会问为什么。</span><br><span class="line">因为节点之间是有相关性的，一个节点若想入度为零，那么它的父节点(指向节点)肯定在它为0前入度为0，拆除关联箭头。从父节点角度，它的这次拆除联系，可能导致被指向的入读为0，也可能不为0(还有其他节点指向儿子)</span><br></pre></td></tr></table></figure><p>详解: <a href="https://www.cnblogs.com/bigsai/p/11489260.html">拓扑排序详解与实现 - bigsai - 博客园 (cnblogs.com)</a></p><br><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>方法所在的包名为 <code>java.util.Queue</code></p><ol><li><p>offer方法</p><p>将指定的元素插入到此队列中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.offer(<span class="number">1</span>); <span class="comment">// &#x27;1&#x27;就是插入到队列中的元素</span></span><br></pre></td></tr></table></figure></li><li><p>poll方法</p><p>获取并移除 <strong>队列的头</strong>，如果此时队列为空，则返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.poll(); <span class="comment">// 获取并移除队列的头</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><hr><h3 id="时间复杂度的计算方法？"><a href="#时间复杂度的计算方法？" class="headerlink" title="时间复杂度的计算方法？"></a>时间复杂度的计算方法？</h3><p>参考：<a href="https://www.cnblogs.com/lazyegg/p/12572421.html">时间复杂度到底怎么算 - 不假 - 博客园 (cnblogs.com)</a></p><hr>]]></content>
    
    
    <summary type="html">在刷算法的过程中，遇到的一些不太懂的概念的记录。</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/30】在线学习网站项目_day03</title>
    <link href="http://example.com/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/"/>
    <id>http://example.com/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/</id>
    <published>2022-03-30T06:03:10.000Z</published>
    <updated>2022-03-31T06:29:28.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day03-在线学习网站项目——教师管理系统前端部分"><a href="#Day03-在线学习网站项目——教师管理系统前端部分" class="headerlink" title="Day03_在线学习网站项目——教师管理系统前端部分"></a>Day03_在线学习网站项目——教师管理系统前端部分</h2><hr><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="准备前端模板"><a href="#准备前端模板" class="headerlink" title="准备前端模板"></a>准备前端模板</h4><p><code>vue-admin-template</code></p><p>一套后台管理系统基础模板（最少精简版），可作为模板进行二次开发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 解压压缩包</span><br><span class="line"># 进入目录</span><br><span class="line">cd vue-admin-template-master</span><br><span class="line"># 安装依赖</span><br><span class="line">npm install</span><br><span class="line"># 启动。执行后，浏览器自动弹出并访问http:<span class="comment">//localhost:9528/</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><br><h4 id="登录地址修改为本地地址"><a href="#登录地址修改为本地地址" class="headerlink" title="登录地址修改为本地地址"></a>登录地址修改为本地地址</h4><p><code>config/dev.env.js</code></p><ol><li><p>系统默认使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BASE_API: <span class="string">&#x27;&quot;https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin&quot;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>登录请求地址修改为 <strong>本地</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BASE_API: <span class="string">&#x27;&quot;http://localhost:8001&quot;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>测试登录调用的方法</p><p><code>login</code> 登录操作方法，<code>info</code>登录之后获取用户信息的方法，创建接口了两个方法实现登录。</p><ul><li><code>login</code> 返回 <code>token值</code></li><li><code>info</code> 返回 <code>roles name avator</code></li></ul><p>修改 <code>api/login.js</code> 中的 <font color=red>url</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.login中</span></span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;eduservice/user/login&#x27;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">// 2.info中</span></span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;eduservice/user/login&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>测试出现 <strong>跨域问题</strong></p><p>通过一个地址访问另外一个地址，这个过程中如果有三个位置中任意一个地方不一样会出现该问题。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问地址 http https</span><br><span class="line">ip地址 <span class="number">192.168.1.1</span> <span class="number">172.11.11.11</span></span><br><span class="line">端口号 <span class="number">9528 8001</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>解决方案</strong></p><ul><li><p>后端接口 <code>Controller</code> 中添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br></pre></td></tr></table></figure></li><li><p>使用网关解决问题</p></li></ul></li></ul></li></ol><br><h4 id="框架使用过程"><a href="#框架使用过程" class="headerlink" title="框架使用过程"></a>框架使用过程</h4><ol><li><p>添加 <strong>路由</strong></p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220330154426645.png" class="" title="image-20220330154426645"></li><li><p>点击某个路由，显示路由对应页面的内容</p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220330155305726.png" class="" title="image-20220330155305726"></li><li><p>在 <code>api</code> 文件夹创建 <code>js</code> 文件，定义接口和参数。</p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220330155423189.png" class="" title="image-20220330155423189"></li><li><p>创建 <code>vue</code> 页面引入 <code>js</code> 文件，调用方法实现功能</p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220330155514466.png" class="" title="image-20220330155514466"></li></ol><hr><h3 id="讲师列表前端实现"><a href="#讲师列表前端实现" class="headerlink" title="讲师列表前端实现"></a>讲师列表前端实现</h3><h4 id="实现查询-返回所有教师信息"><a href="#实现查询-返回所有教师信息" class="headerlink" title="实现查询: 返回所有教师信息"></a>实现查询: 返回所有教师信息</h4><ol><li><p>修改 <strong>路由</strong></p><p><code>index.js</code>文件中，根据页面导航栏添加 <strong>讲师管理</strong> 模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/teacher&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: Layout,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;/teacher/table&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Example&#x27;</span>,</span><br><span class="line">  <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;讲师管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;example&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;table&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;讲师列表&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/teacher/list&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;讲师列表&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;save&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;添加讲师&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/teacher/save&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;添加讲师&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;tree&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>效果图:</p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220330195646297.png" class="" title="image-20220330195646297"></li><li><p>修改路由中对应的页面 – <code>component()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/teacher/list&#x27;</span>)</span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/teacher/save&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>在 <code>api</code> 文件夹创建 <code>js</code> 文件，定义接口和参数 — <code>src/edu/teacher.js</code></p><p>根据 <strong>后端</strong> 的 <code>controller</code> 中定义的方法，配置接口和参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 1.讲师列表(条件查询分页)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        current 当前页</span></span><br><span class="line"><span class="comment">        limit 每页记录数</span></span><br><span class="line"><span class="comment">        teacherQuery 条件对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="title">getTeacherListPage</span>(<span class="params">current,limit,teacherQuery</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/eduservice/teacher/pageTeacherCondition/&#x27;</span> + current + <span class="string">&#x27;/&#x27;</span> + limit,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="comment">// 后端使用requestBody获取数据</span></span><br><span class="line">            <span class="comment">// 前端中用data,表示把对象转换成json传递到接口中</span></span><br><span class="line">            <span class="attr">data</span>: teacherQuery</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>list.vue</code> 并引入 <code>js</code> 文件，调用方法实现功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 这里面放入前端的模板，再根据下面script中的数据源进行修改 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 1.先引入teacher.js</span><br><span class="line">import teacher from &#x27;@/api/edu/teacher&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    // 写核心代码部分</span><br><span class="line">    data() &#123; // 数据的变量和初始值</span><br><span class="line">        return &#123;</span><br><span class="line">            list:null,//查询之后接口返回集合</span><br><span class="line">            page:1,//当前页</span><br><span class="line">            limit:10,//每页显示的记录数</span><br><span class="line">            total:0,//总记录数</span><br><span class="line">            teacherQuery:&#123;&#125;//条件封装对象</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123; // 页面渲染之前执行，一般调用methods中的方法</span><br><span class="line">        this.getList()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123; // 创建具体的方法，调用teacher.js定义的方法</span><br><span class="line">        // 讲师列表的方法</span><br><span class="line">        getList() &#123;</span><br><span class="line">            teacher.getTeacherListPage(this.page,this.limit,this.teacherQuery)</span><br><span class="line">            .then(response =&gt;&#123;//请求成功</span><br><span class="line">                // response接口返回的数据</span><br><span class="line">                // console.log(response)</span><br><span class="line">                this.list = response.data.rows</span><br><span class="line">                this.total = response.data.total</span><br><span class="line">                console.log(this.list)</span><br><span class="line">                console.log(this.total)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(error=&gt;&#123;//请求失败</span><br><span class="line">                console.log(error)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>结果展示</p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220330200235389.png" class="" title="image-20220330200235389"></li></ol><br><h4 id="实现分页效果"><a href="#实现分页效果" class="headerlink" title="实现分页效果"></a>实现分页效果</h4><ol><li><p>效果演示</p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220330201036584.png" class="" title="image-20220330201036584"></li><li><p><code>list.vue</code>中添加 <strong>分页代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;!-- 分页 --&gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">      :current-page=&quot;page&quot;</span><br><span class="line">      :page-size=&quot;limit&quot;</span><br><span class="line">      :total=&quot;total&quot;</span><br><span class="line">      style=&quot;padding: 30px 0; text-align: center;&quot;</span><br><span class="line">      layout=&quot;total, prev, pager, next, jumper&quot;</span><br><span class="line">      @current-change=&quot;getList&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改获取讲师信息的方法 – -添加 <strong>页码参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 讲师列表的方法</span></span><br><span class="line">        <span class="function"><span class="title">getList</span>(<span class="params">page = <span class="number">1</span></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.page = page <span class="comment">// 获取每一页的数据</span></span><br></pre></td></tr></table></figure></li></ol><br><h4 id="教师信息的条件查询"><a href="#教师信息的条件查询" class="headerlink" title="教师信息的条件查询"></a>教师信息的条件查询</h4><ol><li><p>效果演示</p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220330202359187.png" class="" title="image-20220330202359187"></li><li><p><code>list.vue</code>中添加 <strong>查询表单代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--查询表单--&gt;</span><br><span class="line">&lt;el-form :inline=&quot;true&quot; class=&quot;demo-form-inline&quot;&gt;</span><br><span class="line">  &lt;el-form-item&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;teacherQuery.name&quot; placeholder=&quot;讲师名&quot;/&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;el-form-item&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;teacherQuery.level&quot; clearable placeholder=&quot;讲师头衔&quot;&gt;</span><br><span class="line">      &lt;el-option :value=&quot;1&quot; label=&quot;高级讲师&quot;/&gt;</span><br><span class="line">      &lt;el-option :value=&quot;2&quot; label=&quot;首席讲师&quot;/&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;el-form-item label=&quot;添加时间&quot;&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">      v-model=&quot;teacherQuery.begin&quot;</span><br><span class="line">      type=&quot;datetime&quot;</span><br><span class="line">      placeholder=&quot;选择开始时间&quot;</span><br><span class="line">      value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">      default-time=&quot;00:00:00&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">      v-model=&quot;teacherQuery.end&quot;</span><br><span class="line">      type=&quot;datetime&quot;</span><br><span class="line">      placeholder=&quot;选择截止时间&quot;</span><br><span class="line">      value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">      default-time=&quot;00:00:00&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">   </span><br><span class="line">&lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; @click=&quot;getList()&quot;&gt;查询&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;default&quot; @click=&quot;resetData()&quot;&gt;清空&lt;/el-button&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure></li></ol><br><h4 id="教师信息删除"><a href="#教师信息删除" class="headerlink" title="教师信息删除"></a>教师信息删除</h4><ol><li><p>每条记录后，添加 <strong>删除</strong> 按钮</p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220330204525429.png" class="" title="image-20220330204525429"></li><li><p>给 <strong>删除按钮</strong> 绑定 <strong>删除方法</strong> — <code>list.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=&quot;danger&quot; size=&quot;mini&quot; icon=&quot;el-icon-delete&quot; @click=&quot;removeDataById(scope.row.id)&quot;&gt;删除&lt;/el-button&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义 **删除方法 **— <code>teacher.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.删除讲师</span></span><br><span class="line">    <span class="function"><span class="title">deleteTeacherId</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/eduservice/teacher/&#x27;</span> + id,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>调用方法实现 <strong>删除功能</strong> — <code>list.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除讲师的方法</span></span><br><span class="line"><span class="function"><span class="title">removeDataById</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$confirm(<span class="string">&#x27;此操作将永久删除讲师记录, 是否继续?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function">() =&gt;</span> &#123;  <span class="comment">//点击确定，执行then方法</span></span><br><span class="line">        <span class="comment">//调用删除的方法</span></span><br><span class="line">        teacher.deleteTeacherId(id)</span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span>&#123;<span class="comment">//删除成功</span></span><br><span class="line">            <span class="comment">//提示信息</span></span><br><span class="line">            <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;删除成功!&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//回到列表页面</span></span><br><span class="line">            <span class="built_in">this</span>.getList()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;) <span class="comment">//点击取消，执行catch方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><br><h4 id="讲师添加功能"><a href="#讲师添加功能" class="headerlink" title="讲师添加功能"></a>讲师添加功能</h4><ol><li><p>效果展示</p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220331135415400.png" class="" title="image-20220331135415400"><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220331135424737.png" class="" title="image-20220331135424737"></li><li><p>修改 <code>save.vue</code> 中内容, 实现 <strong>表单提交</strong> 功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">     &lt;el-form label-width=&quot;120px&quot;&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师名称&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;teacher.name&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师排序&quot;&gt;</span><br><span class="line">        &lt;el-input-number v-model=&quot;teacher.sort&quot; controls-position=&quot;right&quot; min=&quot;0&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师头衔&quot;&gt;</span><br><span class="line">        &lt;el-select v-model=&quot;teacher.level&quot; clearable placeholder=&quot;请选择&quot;&gt;</span><br><span class="line">          &lt;el-option :value=&quot;1&quot; label=&quot;高级讲师&quot;/&gt;</span><br><span class="line">          &lt;el-option :value=&quot;2&quot; label=&quot;首席讲师&quot;/&gt;</span><br><span class="line">        &lt;/el-select&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师资历&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;teacher.career&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;讲师简介&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;teacher.intro&quot; :rows=&quot;10&quot; type=&quot;textarea&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 讲师头像：TODO --&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;saveOrUpdate&quot;&gt;保存&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>引入<code>js</code> 文件，实现 <strong>添加教师信息</strong> 的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> teacherApi <span class="keyword">from</span> <span class="string">&#x27;@/api/edu/teacher&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">teacher</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">sort</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">level</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">career</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">intro</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">avator</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">saveBtnDisabled</span>:<span class="literal">false</span>  <span class="comment">// 保存按钮是否禁用,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">//判断路径有id值,做修改</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.$route.params &amp;&amp; <span class="built_in">this</span>.$route.params.id) &#123;</span><br><span class="line">                <span class="comment">//从路径获取id值</span></span><br><span class="line">                <span class="keyword">const</span> id = <span class="built_in">this</span>.$route.params.id</span><br><span class="line">                <span class="comment">//调用根据id查询的方法</span></span><br><span class="line">                <span class="built_in">this</span>.getInfo(id)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//路径没有id值，做添加</span></span><br><span class="line">                <span class="comment">//清空表单</span></span><br><span class="line">                <span class="built_in">this</span>.teacher = &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">saveOrUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 判断是添加还是更新</span></span><br><span class="line">            <span class="built_in">this</span>.saveTeacher()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 添加讲师信息</span></span><br><span class="line">        <span class="function"><span class="title">saveTeacher</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            teacherApi.addTeacher(<span class="built_in">this</span>.teacher)</span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">// 添加成功</span></span><br><span class="line">                <span class="comment">// 提示信息</span></span><br><span class="line">                <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                    <span class="attr">message</span>: <span class="string">&#x27;添加成功!&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// 实现路由跳转</span></span><br><span class="line">                <span class="built_in">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">&#x27;/teacher/table&#x27;</span>&#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>teacher.js</code> 中定义的 <strong>添加讲师</strong> 的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.添加讲师</span></span><br><span class="line"><span class="function"><span class="title">addTeacher</span>(<span class="params">teacher</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&#x27;/eduservice/teacher/addTeacher&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:teacher</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><br><h4 id="讲师修改功能"><a href="#讲师修改功能" class="headerlink" title="讲师修改功能"></a>讲师修改功能</h4><ol><li><p>每条记录添加 <strong>修改按钮</strong></p><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220331140543741.png" class="" title="image-20220331140543741"></li><li><p>点击修改按钮，进入表单页面，进行 <strong>数据回显</strong></p><blockquote><p>根据讲师id查询数据显示 — save.vue</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据讲师id 查询的方法</span></span><br><span class="line">       <span class="function"><span class="title">getInfo</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">           teacherApi.getTeacherInfo(id)</span><br><span class="line">           .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.teacher = response.data.teacher</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过路由跳转，进入到回显页面，在路由index页面添加路由</p><blockquote><p>index.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;edit/:id&#x27;</span>,   </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;EduTeacherEdit&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/teacher/save&#x27;</span>),</span><br><span class="line">  <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;编辑讲师&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>list.vue</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#x27;/teacher/edit/&#x27;+scope.row.id&quot;&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; icon=&quot;el-icon-edit&quot;&gt;修改&lt;/el-button&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>在表单页面实现数据回显</p><blockquote><p><code>teacher.js</code> 中定义根据id查询接口</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.根据id查询讲师</span></span><br><span class="line"><span class="function"><span class="title">getTeacherInfo</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/eduservice/teacher/getTeacher/&#x27;</span> + id,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在页面调用接口实现数据回显</p></blockquote><img src="/2022/03/30/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day03/image-20220331140603383.png" class="" title="image-20220331140603383"><blockquote><p>save.vue — methods</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据讲师id 查询的方法</span></span><br><span class="line">      <span class="function"><span class="title">getInfo</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">          teacherApi.getTeacherInfo(id)</span><br><span class="line">          .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">this</span>.teacher = response.data.teacher</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用 根据id查询的方法</p><p>(1) 添加和修改都是用sava页面。</p><p>(2) 区别是: 只有修改时查询数据回显</p><p>(3) 判断路径中是否有讲师id值，有则修改，没有则添加</p><p>save.vue — methods</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//判断路径有id值,做修改</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.$route.params &amp;&amp; <span class="built_in">this</span>.$route.params.id) &#123;</span><br><span class="line">        <span class="comment">//从路径获取id值</span></span><br><span class="line">        <span class="keyword">const</span> id = <span class="built_in">this</span>.$route.params.id</span><br><span class="line">        <span class="comment">//调用根据id查询的方法</span></span><br><span class="line">        <span class="built_in">this</span>.getInfo(id)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//路径没有id值，做添加</span></span><br><span class="line">        <span class="comment">//清空表单</span></span><br><span class="line">        <span class="built_in">this</span>.teacher = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今日学习了使用vue对前后端分离项目，进行一个前后端数据交互。</p><p>在后端的 controller 开发完毕的基础上，前端调用方法，查询数据库中的数据，最终对数据进行一个增删改查的操作。</p><p>主要需要反复练习的是，在 <strong>前端页面怎么调用后端的接口</strong>。</p><p>大致分为 **<font color=red>四步走</font>**：</p><blockquote><p>(1) 添加路由。—<code>router</code></p><p>(2) 添加点击某个路由，跳转页面的路径</p><p>(3) <code>api</code> 文件夹下创建 <code> js</code> 文件，用于编写接口和参数 —<code>api</code></p><p>(4) 创建 <code>vue</code> 页面引入 <code>js</code> 文件，调用方法实现功能 —<code>views</code></p></blockquote><hr>]]></content>
    
    
    <summary type="html">学习开发在线学习网站项目第三天内容：讲师管理页面的前端模块开发内容。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/23】在线学习网站项目_day02</title>
    <link href="http://example.com/2022/03/23/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day02/"/>
    <id>http://example.com/2022/03/23/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day02/</id>
    <published>2022-03-23T10:23:47.000Z</published>
    <updated>2022-03-25T02:19:05.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day02-在线学习网站项目"><a href="#Day02-在线学习网站项目" class="headerlink" title="Day02_在线学习网站项目"></a>Day02_在线学习网站项目</h2><hr><h3 id="service-edu子模块开发"><a href="#service-edu子模块开发" class="headerlink" title="service_edu子模块开发"></a>service_edu子模块开发</h3><ol><li><p>教师查询</p></li><li><p>教师删除</p><ol><li><p>配置逻辑删除插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br></li><li><p><strong>逻辑删除属性</strong> 上添加 <strong><font color=red>注解</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(value = &quot;逻辑删除 1（true）已删除， 0（false）未删除&quot;)</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Boolean isDeleted;</span><br></pre></td></tr></table></figure></br></li><li><p>编写 <code>Controller</code> 中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span> <span class="comment">// 路径传递id值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeTeacher</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123; <span class="comment">// 得到路径中的id值</span></span><br><span class="line"><span class="keyword">boolean</span> flag = teacherService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br></li><li><p>如何测试</p><p><font color =red>Delete 提交</font></p><p>借助测试类：<font color=red>Swagger</font></p><ul><li><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化<code>RESTful</code>风格的 Web 服务。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 及时性 (接口变更后，能够及时准确地通知相关前后端开发人员)</span><br><span class="line"><span class="bullet">2.</span> 规范性 (并且保证接口的规范性，如接口的地址，请求方式，参数及响应格式和错误信息)</span><br><span class="line"><span class="bullet">3.</span> 一致性 (接口信息一致，不会出现因开发人员拿到的文档版本不一致，而出现分歧)</span><br><span class="line"><span class="bullet">4.</span> 可测性 (直接在接口文档上进行测试，以方便理解业务)</span><br></pre></td></tr></table></figure></li><li><p>配置 Swagger 2</p><ol><li><p>创建一个 <code>common</code> 模块</p><ol><li><p>在 <code>guli-online</code> 下创建 <code>common</code>模块</p></li><li><p>修改 <code>common</code> 模块中的 <code>pom.xml</code> 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">    <span class="comment">&lt;!-- spring2.X集成redis所需common-pool2 </span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.6.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;--&gt;</span></span><br><span class="line">              </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></br></li></ol></li><li><p><code>common</code> 作为父工程，在创建 <code>service-base</code></p><ol><li><p>创建 Swagger的配置类 <code> SwaggerConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">webApiConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line"><span class="comment">//                .paths(Predicates.not(PathSelectors.regex(&quot;/admin/.*&quot;)))</span></span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">webApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;网站-课程中心API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;fanpeng&quot;</span>, <span class="string">&quot;http://fanpeng.com&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;843511468@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br></li></ol></li></ol></li><li><p>使用 Swagger 2</p><ol><li><p>在 service 的 <code>pom.xml</code> 文件中添加如下代码: 引入 <code>service-base</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fanpeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>service_edu</code> 启动类 <font color=red><strong>EduApplication.java</strong></font> 上添加扫描包注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.fanpeng&quot;&#125;)</span> <span class="comment">// 添加扫描包的路径，目的是能扫描到common下的swagger配置</span></span><br></pre></td></tr></table></figure></li><li><p>访问 <strong>Swagger</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8001</span>/swagger-ui.html</span><br></pre></td></tr></table></figure></br></li></ol></li><li><p>对 Swagger 中的测试项目添加 “<strong>信息描述</strong>”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(description=&quot;讲师管理&quot;)</span></span><br></pre></td></tr></table></figure><img src="/2022/03/23/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day02/image-20220323102239196.png" class="" title="image-20220323102239196"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;所有讲师列表&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;根据ID删除讲师&quot;)</span></span><br></pre></td></tr></table></figure><img src="/2022/03/23/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day02/image-20220323102901987.png" class="" title="image-20220323102901987"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)</span></span><br></pre></td></tr></table></figure><img src="/2022/03/23/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day02/image-20220323102934570.png" class="" title="image-20220323102934570"></li></ul></li></ol></li></ol><hr><h3 id="统一数据格式"><a href="#统一数据格式" class="headerlink" title="统一数据格式"></a>统一数据格式</h3><p>项目中我们会将响应封装成 <code>json</code> 返回，一般我们会将 <strong>所有接口的数据格式统一</strong>， 使前端(iOS Android, Web)对数据的操作更一致、轻松。 </p><p>一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。但是一般会包含**<font color=red>状态码、返回消息、数据</font>**这几部分内容</p><h4 id="常用的统一数据格式"><a href="#常用的统一数据格式" class="headerlink" title="常用的统一数据格式"></a><strong><font color=red>常用的统一数据格式</font></strong></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;success&quot;</span>: 布尔, <span class="comment">//响应是否成功</span></span><br><span class="line"> <span class="attr">&quot;code&quot;</span>: 数字, <span class="comment">//响应码</span></span><br><span class="line"> <span class="attr">&quot;message&quot;</span>: 字符串, <span class="comment">//返回消息</span></span><br><span class="line"> <span class="attr">&quot;data&quot;</span>: HashMap <span class="comment">//返回数据，放在键值对中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="创建统一返回结果类"><a href="#创建统一返回结果类" class="headerlink" title="创建统一返回结果类"></a>创建统一返回结果类</h4><ol><li><p>在 <code>common</code> 模块下创建子模块 <code>common-utils</code></p></li><li><p>创建接口 <code>ResultCode.java</code> 定义返回码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultCode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer SUCCESS = <span class="number">20000</span>; <span class="comment">//成功</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer ERROR = <span class="number">20001</span>; <span class="comment">//失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建结果类 <code>R.java</code></p><ul><li><strong>构造方法私有化。在外使用不能创建该类的对象。</strong></li><li><strong>使用static，别人可以用到该方法。(成功/失败)</strong></li><li><strong><font color=red>链式编程</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.commonutils;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;是否成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把构造方法私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">R</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">        r.setCode(ResultCode.SUCCESS);</span><br><span class="line">        r.setMessage(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(<span class="keyword">false</span>);</span><br><span class="line">        r.setCode(ResultCode.ERROR);</span><br><span class="line">        r.setMessage(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">success</span><span class="params">(Boolean success)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">message</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">code</span><span class="params">(Integer code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">data</span><span class="params">(String key, Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">data</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><br><h4 id="统一返回结果使用"><a href="#统一返回结果使用" class="headerlink" title="统一返回结果使用"></a>统一返回结果使用</h4><ol><li><p>service的 <code>pom.xml</code> 文件中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fanpeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common_utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改 <code>Controller</code> 中的返回结果</p><ul><li><p>列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;所有讲师列表&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Teacher&gt; list = teacherService.list(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;items&quot;</span>, list); <span class="comment">// 链式编程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;根据ID删除讲师&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span> <span class="comment">// 路径传递id值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">removeTeacher</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@PathVariable</span> String id)</span> </span>&#123; <span class="comment">// 得到路径中的id值</span></span><br><span class="line">    teacherService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ol><li><p>配置分页插件 <code>xxxConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分页插件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分页 <strong>Controller</strong> 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;分页查询讲师列表&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&#123;page&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">pageList</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true)</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@PathVariable</span> Long page,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true)</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@PathVariable</span> Long limit</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建page对象</span></span><br><span class="line">    Page&lt;EduTeacher&gt; pageParam = <span class="keyword">new</span> Page&lt;&gt;(page, limit);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 调用方法实现分页</span></span><br><span class="line">    <span class="comment">// 调用方法时，底层封装，将分页所有数据封装到pageParam对象中</span></span><br><span class="line">    teacherService.page(pageParam,<span class="keyword">null</span>); <span class="comment">// wrapper表示条件</span></span><br><span class="line">   </span><br><span class="line">    List&lt;EduTeacher&gt; records = pageParam.getRecords(); <span class="comment">// 数据list集合</span></span><br><span class="line">    <span class="keyword">long</span> total = pageParam.getTotal(); <span class="comment">// 总记录数</span></span><br><span class="line">   </span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;total&quot;</span>,total);</span><br><span class="line">    map.put(<span class="string">&quot;rows&quot;</span>,records);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="多条件组合查询-结合分页"><a href="#多条件组合查询-结合分页" class="headerlink" title="多条件组合查询(结合分页)"></a>多条件组合查询(结合分页)</h3><ol><li><p>创建查询对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.eduservice.entity.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ApiModel(value = &quot;Course查询对象&quot;, description = &quot;课程查询对象封装&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherQuery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private static final long serialVersionUID = 1L;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;教师名称,模糊查询&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;头衔 1高级讲师 2首席讲师&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;查询开始时间&quot;, example = &quot;2019-01-01 10:10:10&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String begin;<span class="comment">//注意，这里使用的是String类型，前端传过来的数据无需进行类型转换</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;查询结束时间&quot;, example = &quot;2019-12-01 10:10:10&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>完善 <code>service</code>, 添加 <code>pageQuery</code></p><ul><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多条件查询讲师带分页</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(Page&lt;EduTeacher&gt; pageParam, TeacherQuery teacherQuery)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(Page&lt;EduTeacher&gt; pageParam, TeacherQuery teacherQuery)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.构造条件</span></span><br><span class="line">    QueryWrapper&lt;EduTeacher&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 2.取出值</span></span><br><span class="line">    String name = teacherQuery.getName();</span><br><span class="line">    Integer level = teacherQuery.getLevel();</span><br><span class="line">    String begin = teacherQuery.getBegin();</span><br><span class="line">    String end = teacherQuery.getEnd();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 3.判断值是否为空，如果不为空则拼接 查询条件</span></span><br><span class="line">    <span class="comment">// 3.1 判断是否存在教师姓名</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(name)) &#123;</span><br><span class="line">        wrapper.like(<span class="string">&quot;name&quot;</span>,name); <span class="comment">// 参数1: 数据库字段名; 参数2: 模糊查询值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.2 判断是否存入老师的头衔</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(level)) &#123;</span><br><span class="line">        wrapper.eq(<span class="string">&quot;level&quot;</span>,level); <span class="comment">// eq: 等于</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.3 判断是否存在开始时间</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(begin)) &#123;</span><br><span class="line">        wrapper.ge(<span class="string">&quot;gmt_create&quot;</span>,begin); <span class="comment">// ge: 大于等于</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.4 判断是否存在修改时间</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(end)) &#123;</span><br><span class="line">        wrapper.le(<span class="string">&quot;gmt_modified&quot;</span>,end); <span class="comment">// le: 小于等于</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    wrapper.orderByDesc(<span class="string">&quot;gmt_create&quot;</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//带上门判断后的条件进行分页查询</span></span><br><span class="line">    baseMapper.selectPage(pageParam, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li></ul></li><li><p>Controller中添加方法</p><p><strong>RequestBody</strong> : 使用 json 传送数据，把 json 数据封装到对应对象中。</p><p><strong>ResponseBody</strong> : 返回 json 数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;多条件分页查询讲师列表&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/pageTeacherCondition/&#123;page&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">pageTeacherCondition</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true)</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@PathVariable</span> Long page,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true)</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@PathVariable</span> Long limit,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@RequestBody(required = false)</span> TeacherQuery teacherQuery</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建page对象</span></span><br><span class="line">    Page&lt;EduTeacher&gt; pageParam = <span class="keyword">new</span> Page&lt;&gt;(page, limit);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 调用方法实现多条件分页查询</span></span><br><span class="line">    teacherService.pageQuery(pageParam,teacherQuery);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取查询到的数据</span></span><br><span class="line">    List&lt;EduTeacher&gt; records = pageParam.getRecords();</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取总记录数</span></span><br><span class="line">    <span class="keyword">long</span> total = pageParam.getTotal();</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;total&quot;</span>,total).data(<span class="string">&quot;rows&quot;</span>,records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><ol><li><p><strong>需要自动添加字段</strong> 的配置</p><p>由于是个通用的方法，直接添加在 <code>common/service-base/.../handler/MyMetaObjectHandler.java</code></p><blockquote><p>记得添加 @Component注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;gmtCreate&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实体类中的相应属性添加注解</p><blockquote><p>@TableField注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtCreate;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtModified;</span><br></pre></td></tr></table></figure></li><li><p>Controller中添加方法</p><blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">addTeacher</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加讲师</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;addTeacher&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">addTeacher</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@ApiParam(value = &quot;新增讲师&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@RequestBody</span> EduTeacher eduTeacher</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = teacherService.save(eduTeacher);</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><img src="/2022/03/23/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day02/image-20220324164523291.png" class="" title="image-20220324164523291"></li></ol><hr><h3 id="修改讲师功能"><a href="#修改讲师功能" class="headerlink" title="修改讲师功能"></a>修改讲师功能</h3><ol><li><p>根据讲师id查询(回显数据)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据讲师id进行查询</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;根据id查询到讲师&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;getTeacher/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getTeacher</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@PathVariable</span> String id</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">    EduTeacher eduTeacher = teacherService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;teacher&quot;</span>,eduTeacher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br></li><li><p>更新信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改讲师功能</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;修改讲师&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;updateTeacher&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">updateTeacher</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@RequestBody</span> EduTeacher eduTeacher</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = teacherService.updateById(eduTeacher);</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="统一异常处理的方法"><a href="#统一异常处理的方法" class="headerlink" title="统一异常处理的方法"></a>统一异常处理的方法</h3><ol><li><p>在<code>common/service_edu</code> 下创建 <strong><font color=red>处理全局异常</font></strong> 的类 <code>GlobalExceptionHandler.java</code></p><ul><li><font color=red>@ResponseBody : 为了能够返回数据</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.exceptionHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fanpeng.commonutils.R;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.指定当出现什么异常时，会执行该方法</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="comment">// 2.为了能够返回数据</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> R.error().message(<span class="string">&quot;执行了全局异常...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意在 service_edu下的pom.xml文件中添加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fanpeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common_utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Controller中定义一个异常，抛出后结果如下</p><img src="/2022/03/23/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day02/image-20220324192103731.png" class="" title="image-20220324192103731"></li></ol><br><h3 id="特殊异常处理"><a href="#特殊异常处理" class="headerlink" title="特殊异常处理"></a>特殊异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 特定异常处理</span></span><br><span class="line"><span class="meta">@ExceptionHandler(ArithmeticException.class)</span> <span class="comment">// 根据不同种类的异常进行修改</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(ArithmeticException e)</span> </span>&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> R.error().message(<span class="string">&quot;执行了全局异常...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h3><img src="/2022/03/23/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day02/image-20220324202503776.png" class="" title="image-20220324202503776"><hr><h3 id="统一日志处理"><a href="#统一日志处理" class="headerlink" title="统一日志处理"></a>统一日志处理</h3><ol><li><p>日志级别</p><p><font color=red><strong>ERROR、WARN、INFO、DEBUG</strong></font></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置日志级别</span></span><br><span class="line"><span class="meta">logging.level.root</span> = <span class="string">WARN</span></span><br></pre></td></tr></table></figure><br></li><li><p>日志工具</p><ul><li><p><strong>Logback</strong></p><ol><li><p>删除 <code>application.properties</code> 中的日志配置信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置日志级别</span></span><br><span class="line"><span class="comment">#logging.level.root=INFO</span></span><br><span class="line"><span class="comment">#mybatis日志</span></span><br><span class="line"><span class="comment">#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li><li><p><code>resources</code> 中新建 <font color=red><code>logback-spring.xml</code></font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;D:/guli_1010/edu&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;仅有一个name属性，</span></span><br><span class="line"><span class="comment">        一个可选的level和一个可选的addtivity属性。</span></span><br><span class="line"><span class="comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="comment">        第一种把&lt;root level=&quot;INFO&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="comment">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.guli&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span></span><br><span class="line"><span class="comment">            可以包含零个或多个appender元素。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将日志信息输出到文件中</p><p>GlobalExceptionHandler.java中的异常类上加上注解 <font color=red><code>@Slf4j</code></font></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br></pre></td></tr></table></figure><p>异常输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.error(e.getMessage());</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol><hr><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><p>本日的内容为完善开发 service_edu 子模块的功能。</p><ul><li>主要学习了使用 <strong><font color=red>Swagger</font></strong> 进行方法的测试。</li><li>学习了 <strong>统一数据返回格式</strong> 的思想。</li><li>完成了 <strong>查询用户、添加用户、更新用户、删除用户、分页查询</strong> 功能。</li><li>学习了 <strong>统一异常处理</strong> 的思想。</li></ul><hr>]]></content>
    
    
    <summary type="html">学习开发在线学习网站项目第二天内容：对子模块service_edu进行完善开发。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/22】在线学习网站项目_day01</title>
    <link href="http://example.com/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/"/>
    <id>http://example.com/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/</id>
    <published>2022-03-22T08:53:26.000Z</published>
    <updated>2022-03-22T10:26:27.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day01-在线学习网站项目"><a href="#Day01-在线学习网站项目" class="headerlink" title="Day01_在线学习网站项目"></a>Day01_在线学习网站项目</h2><hr><h3 id="项目背景分析"><a href="#项目背景分析" class="headerlink" title="项目背景分析"></a>项目背景分析</h3><p><code>B2C</code>模式在线教育系统，分为 <strong>前台用户系统</strong> 和 <strong>后台运营平台</strong> 。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)两种角色：管理员和普通用户</span><br><span class="line"><span class="bullet">*</span> 管理员： 添加、修改、删除</span><br><span class="line"><span class="bullet">*</span> 用户： 查询</span><br><span class="line"></span><br><span class="line">(2)核心模块：课程模块</span><br></pre></td></tr></table></figure><hr><h4 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h4><ol><li><p>系统后台—<strong>管理员</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)讲师管理模块</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)课程分类管理模块</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)课程管理模块</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)统计分析模块</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>)订单管理模块</span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>)banner管理</span><br><span class="line"></span><br><span class="line">(<span class="number">7</span>)权限管理</span><br></pre></td></tr></table></figure></li><li><p>系统前台—用户</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(1)</span>首页数据展示</span><br><span class="line"></span><br><span class="line"><span class="comment">(2)</span>讲师列表和详情</span><br><span class="line"></span><br><span class="line"><span class="comment">(3)</span>课程列表和课程详情</span><br><span class="line"></span><br><span class="line"><span class="comment">(4)</span>登录和注册功能</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><ol><li><p>后端技术</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">springboot springcloud mybatis-plus spring security </span></span><br><span class="line"><span class="attribute">redis maven</span> </span><br></pre></td></tr></table></figure></li><li><p>前端技术</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Vue element-ui axios nodejs</span></span><br></pre></td></tr></table></figure></li><li><p>其他技术</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">阿里云oss</span><br><span class="line">阿里云视频点播</span><br><span class="line">阿里云短信服务</span><br><span class="line">微信支付和登录</span><br><span class="line">docker</span><br><span class="line">git</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h4><img src="/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/image-20220320172727369.png" class="" title="image-20220320172727369"><hr><h3 id="项目工程结构搭建"><a href="#项目工程结构搭建" class="headerlink" title="项目工程结构搭建"></a>项目工程结构搭建</h3><ol><li><p>创建<strong>父工程</strong> <code>guli_online</code></p><ul><li><p>使用IDEA中的<font color=red> Spring Initializr </font> 快速初始化一个 Spring Boot 模块，版本使用：<code>2.2.1.RELEASE</code></p><img src="/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/image-20220322171550382.png" class="" title="image-20220322171550382"></li><li><p>修改父工程 <code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- SpringBoot版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>    </span><br><span class="line">     </span><br><span class="line"><span class="comment">&lt;!-- 确定依赖的版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">guli.version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">guli.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun.oss.version</span>&gt;</span>2.8.3<span class="tag">&lt;/<span class="name">aliyun.oss.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">jodatime.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">jodatime.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">poi.version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">poi.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-java-sdk-core.version</span>&gt;</span>4.3.3<span class="tag">&lt;/<span class="name">aliyun-java-sdk-core.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-sdk-oss.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">aliyun-sdk-oss.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-java-vod-upload.version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">aliyun-java-vod-upload.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.28<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">json.version</span>&gt;</span>20170516<span class="tag">&lt;/<span class="name">json.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">commons-dbutils.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">commons-dbutils.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">canal.client.version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">canal.client.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>zx<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">cloud-alibaba.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">cloud-alibaba.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">   <span class="comment">&lt;!--依赖管理，锁定依赖的版本--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--Spring Cloud--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;velocity.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">           <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--swagger ui--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--aliyunOSS--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--日期时间工具--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jodatime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--xls--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--xlsx--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--commons-io--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--httpclient--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;httpclient.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;gson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--aliyun--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-sdk-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-sdk-oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-vod<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-sdk-vod.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-vod-upload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-sdk-vod-upload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;json.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-dbutils.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;canal.client.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>搭建 <strong>service 模块</strong></p><ul><li><p>在父工程下创建一个 <font color=red>Maven</font> 工程</p><img src="/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/image-20220322172754248.png" class="" title="image-20220322172754248"><img src="/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/image-20220322172820358.png" class="" title="image-20220322172820358"></li><li><p>添加项目的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;hystrix依赖，主要是用 @HystrixCommand &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;服务注册&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;服务调用&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--xls--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--httpclient--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--commons-io--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 <code>service</code> 下再创建子项目 <code>service_edu</code></p><ul><li><p>创建service_edu</p><img src="/2022/03/22/%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE-day01/image-20220322181935675.png" class="" title="image-20220322181935675"></li><li><p><code>service_edu</code> 下的 <code>resource</code>文件夹下创建 <font color=red>配置文件application.properties</font></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-edu</span></span><br><span class="line"><span class="comment"># 环境设置：dev、test、prod</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"># mysql数据库连接</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#mybatis日志</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><p>至此，整体的项目结构已经搭建完毕。接下来就是对<font color=red> <code>service_edu</code>模块</font>进行完善开发。</p>]]></content>
    
    
    <summary type="html">学习开发在线学习网站项目第一天内容：介绍整体项目的背景，以及项目的结构。</summary>
    
    
    
    <category term="SpringBoot" scheme="http://example.com/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/18】Mybatis-plus笔记</title>
    <link href="http://example.com/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-18T08:40:32.000Z</published>
    <updated>2022-03-22T09:00:41.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mybatis-plus"><a href="#Mybatis-plus" class="headerlink" title="Mybatis-plus"></a>Mybatis-plus</h2><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/relationship-with-mybatis-16479396398741.png" class="" title="img"><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><hr><h3 id="项目中的应用"><a href="#项目中的应用" class="headerlink" title="项目中的应用"></a>项目中的应用</h3><ol><li><p><code>pom.xml</code> 中引入依赖库 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></br></li><li><p><code>application.properties</code> 文件中添加</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#mysql数据库连接</span><br><span class="line">spring<span class="selector-class">.datasource</span>.driver-class-name=com<span class="selector-class">.mysql</span><span class="selector-class">.cj</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></span><br><span class="line">spring<span class="selector-class">.datasource</span>.url=jdbc:mysql:<span class="comment">//localhost:3306/mybatis_plus</span></span><br><span class="line">spring<span class="selector-class">.datasource</span>.username=root</span><br><span class="line">spring<span class="selector-class">.datasource</span>.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">#mybatis日志</span><br><span class="line">mybatis-plus<span class="selector-class">.configuration</span>.log-impl=org<span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.logging</span><span class="selector-class">.stdout</span>.StdOutImpl</span><br></pre></td></tr></table></figure></br></li><li><p>测试 <strong>查询</strong> 方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> testSelectList() &#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;------------查询所有的用户信息------------&quot;);</span><br><span class="line">    List&lt;<span class="keyword">User</span>&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : users) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220318165032911.png" class="" title="image-20220318165032911"></br></li><li><p>测试 <strong>插入</strong> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userMapper.insert(user);</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span>  insertUser() &#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;----------完成插入用户操作------------&quot;);</span><br><span class="line">    <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">    <span class="keyword">user</span>.setName(&quot;小王&quot;);</span><br><span class="line">    <span class="keyword">user</span>.setAge(<span class="number">19</span>);</span><br><span class="line">    <span class="keyword">user</span>.setEmail(&quot;123456@163.com&quot;);</span><br><span class="line">   </span><br><span class="line">    <span class="type">int</span> result = userMapper.<span class="keyword">insert</span>(<span class="keyword">user</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(result);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220318165206923.png" class="" title="image-20220318165206923"><ul><li><p>**执行插入操作的 <font color=red>特性</font> **</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(1)</span> 不需要设置id值<span class="comment">(主键)</span></span><br><span class="line"><span class="comment">(2)</span> mp会自动生成id值</span><br></pre></td></tr></table></figure></br></li></ul></li><li><p>测试 <strong>更新</strong> 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userMapper.updateById(user);</span><br><span class="line">==&gt; UPDATE user SET age=? WHERE id=?</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------完成修改用户操作------------&quot;</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>);</span><br><span class="line">    user.setAge(<span class="number">120</span>);</span><br><span class="line">    <span class="keyword">int</span> row = userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数:&quot;</span> + row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br></li><li><p><strong>自动添加</strong> 功能(创建时间、更新时间)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.对需要添加“自动添加”功能的属性加注解</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure><p><font color=red>注意：不要忘记添加 @Component 注解</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 编写Handler处理类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------完成修改用户操作------------&quot;</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">4L</span>);</span><br><span class="line">        user.setAge(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">int</span> row = userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数:&quot;</span> + row);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220319161054448.png" class="" title="image-20220319161054448"><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220319161137373.png" class="" title="image-20220319161137373"></br></li><li><p>测试 <strong>乐观锁</strong> 机制</p><ol><li><p>先在数据表中增加 <code>vesion</code> 字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `user` ADD COLUMN `version` INT</span><br></pre></td></tr></table></figure></li><li><p>在实体类中增加 <code>version</code> 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure></li><li><p>配置 <strong><font color=red>乐观锁组件</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 乐观锁插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 测试乐观锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------测试 乐观锁 操作------------&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.先查询</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1505114640969801729L</span>);</span><br><span class="line">    <span class="comment">// 2.再修改</span></span><br><span class="line">    user.setAge(<span class="number">77</span>);</span><br><span class="line">    <span class="keyword">int</span> row = userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数:&quot;</span> + row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220319173724087.png" class="" title="image-20220319173724087"></br></li></ol></li><li><p>多种 <strong>查询</strong> 方式</p><ol><li><p>查询多条数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试查询多条数据(批量查询)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过Map查询数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 测试通过map方式查询数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">50</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color=red>分页</font></strong> 查询</p><ol><li><p>配置分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试分页查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.创建 page对象</span></span><br><span class="line"><span class="comment">     * 传入两个参数: 当前页 和 每页显示的记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">         </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.调用mp分页查询的方法</span></span><br><span class="line"><span class="comment">     * 调用 mp分页查询过程中，底层封装</span></span><br><span class="line"><span class="comment">     * 把分页所有数据封装到page对象中去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">         </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一些分页查询常用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(page.getCurrent()); <span class="comment">// 获取当前页</span></span><br><span class="line">    System.out.println(page.getRecords()); <span class="comment">// 获取当前页的记录</span></span><br><span class="line">    System.out.println(page.getPages()); <span class="comment">// 每页显示的记录数</span></span><br><span class="line">    System.out.println(page.hasNext()); <span class="comment">// 是否具有下一页</span></span><br><span class="line">    System.out.println(page.hasPrevious()); <span class="comment">// 是否具有上一页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br></li></ol></li></ol></li><li><p><strong>删除</strong> 操作</p><ol><li><p>单条记录删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除单条记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>批量删除</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除批量数据</span></span><br><span class="line">@Test</span><br><span class="line">public void delete<span class="constructor">BatchIds()</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> result = userMapper.delete<span class="constructor">BatchIds(Arrays.<span class="params">asList</span>(1505088456118714369l, 1505114640969801729l)</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color=red>逻辑删除</font></strong></p><p>**<font color=red>假删除</font>**，将对应数据中代表是否被删除字段状态修改为“被删除状态”，之后在数据库中仍 旧能看到此条数据记录。</p><ol><li><p>数据库中新建一列<code>deleted</code>，用于存储数据是否被删除的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `user` ADD COLUMN `deleted` boolean</span><br></pre></td></tr></table></figure></li><li><p>实体类中添加 <code>deleted</code> 字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure></li><li><p>元对象处理接口添加 <code>deleted</code> 的 <code>insert</code> 值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line"> ......</span><br><span class="line"><span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;deleted&quot;</span>, <span class="number">0</span>, metaObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>config类中添加 <strong>逻辑删除插件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑删除插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除结果</p><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220320160312345.png" class="" title="image-20220320160312345"></li></ol></li></ol></br></li><li><p><strong>MP的复杂查询</strong> (<font color=red><strong>条件构造器</strong></font>)</p></li></ol><img src="/2022/03/18/Mybatis-plus%E7%AC%94%E8%AE%B0/image-20220320165312742.png" class="" title="image-20220320165312742"><ol><li><p><code>QueryWrapper</code> </p><p>通过 <code>queryWrapper</code> 设置条件</p><ul><li><p>ge gt le lt: 大于等于, 大于, 小于等于, 小于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.ge(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>)</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>eq ne: 等于/不等于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>between: 在范围之间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure></li><li><p>like: 模糊查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.Like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>orderByDesc: 降序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>last: 添加到最后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.last(<span class="string">&quot;limit 1&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>select: 指定要查询的列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="Mybatis-Plus特性"><a href="#Mybatis-Plus特性" class="headerlink" title="Mybatis-Plus特性"></a>Mybatis-Plus特性</h3><ol><li><p>主键策略</p><ul><li><code>ID_WORKER</code> : 全局唯一ID.<ul><li> Mybatis-plus<strong>默认采用的策略</strong>。</li><li>snowflake算法: 雪花算法</li></ul></li><li>自增策略: AutoIncrement</li><li>UUID: 每次生成唯一的值(但是排序不方便)</li><li>redis实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用自定义主键策略: 在实体类中的主键上加@TableId注解</span></span><br><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">// AUTO(自增),INPUT(设置id值),NONE(输入),UUID(随机唯一值),ID_WORKER/ID_WORKER_STR(mp自带策略)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure></li><li><p>锁机制</p><ul><li><p>读问题(不考虑事务隔离性，产生读问题)</p><ul><li><p>脏读</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>读取到未提交的数据</span><br><span class="line">如果事务发生回滚，则第二个事务就读到了 脏数据。</span><br></pre></td></tr></table></figure></li><li><p>幻读</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行；</span><br><span class="line"><span class="comment">(1)</span> 第一个事务进行查询，读取到一行数据。</span><br><span class="line"><span class="comment">(2)</span> 第二个事务添加一行数据。</span><br><span class="line"><span class="comment">(3)</span> 第一个事务再查询，读取到两行数据。【幻影行】</span><br></pre></td></tr></table></figure></li><li><p>不可重复读</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 同一个事务中，对于同一数据，执行完全相同的select语句时可能看到不一样的结果</span><br><span class="line"><span class="comment">(1)</span> 第一个事务进行查询，得到结果<span class="number">1.</span></span><br><span class="line"><span class="comment">(2)</span> 第二个事务进行更新，修改了数据。</span><br><span class="line"><span class="comment">(3)</span> 第一个事务再次查询，得到结果<span class="number">2.</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>写问题( <strong>锁机制</strong> )</p><ul><li><p>丢失更新问题</p><ul><li><p>悲观锁</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>串行处理业务。</span><br><span class="line">多个人对一条数据进行操作时，其中一个进入业务处理，当业务处理未完成时，其余用户需要等待该业务处理完成，才能够进入处理业务中。</span><br></pre></td></tr></table></figure></li><li><p><strong>乐观锁</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>引入 版本号</span><br><span class="line">在进入到业务处理中时，会检查该业务的版本号，若版本号一直则进行处理，不一致则不处理。</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ol>]]></content>
    
    
    <summary type="html">Mybatis-plus学习笔记。</summary>
    
    
    
    <category term="Mybatis" scheme="http://example.com/categories/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/15】Linux学习笔记</title>
    <link href="http://example.com/2022/03/15/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/15/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-15T08:43:04.000Z</published>
    <updated>2022-03-16T12:03:04.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>需要安装：</p><ol><li><p>VMware: 虚拟机软件。</p></li><li><p>CentOS: Linux操作系统。</p></li><li><p>CRT: 远程连接软件。[建议使用xshell]</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)快速连接</span><br><span class="line">* 填写Linux的<span class="built_in">ip</span>地址</span><br><span class="line">- Linux操作系统中: # ifconfig 查询虚拟机<span class="built_in">ip</span>地址</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Linux的常用命令"><a href="#Linux的常用命令" class="headerlink" title="Linux的常用命令"></a>Linux的常用命令</h3><ol><li><p>切换目录</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cd</span></span><br><span class="line">目录名: 进入某目录</span><br><span class="line">..: 返回 上一级 目录</span><br><span class="line"><span class="symbol">~</span>: 进入到root用户目录</span><br><span class="line">-: 返回 上一次 的目录</span><br></pre></td></tr></table></figure></li><li><p>列出文件列表</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ls</span><br><span class="line">-<span class="ruby">a : 列举所有文件(包括隐藏文件)</span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby">l : 列举文件的详细信息(可简写为 <span class="comment"># ll)</span></span></span><br></pre></td></tr></table></figure></li><li><p>创建目录和移除目录</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># mkdir</span></span><br><span class="line">目录名: 创建一个目录</span><br><span class="line"></span><br><span class="line"><span class="meta"># rmdir</span></span><br><span class="line">目录名: 移除一个目录</span><br></pre></td></tr></table></figure></li><li><p>浏览文件</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cat</span></span><br><span class="line">文件名: 查看文件的所有内容</span><br><span class="line"></span><br><span class="line"><span class="meta"># more</span></span><br><span class="line"><span class="meta"># less</span></span><br><span class="line">都是查看文件的内容，可以分页。</span><br><span class="line"></span><br><span class="line"><span class="meta"># tail</span></span><br><span class="line">文件名: 看文件最后十行内容</span><br></pre></td></tr></table></figure></li><li><p>文件操作</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># cp : 复制</span><br><span class="line"></span><br><span class="line"># mv : 剪切</span><br><span class="line"></span><br><span class="line"># rm : 删除文件</span><br><span class="line">-rf : 不询问，直接删除</span><br><span class="line"></span><br><span class="line"># tar : 打包或者压缩</span><br><span class="line">-cvf 文件名 : 打包</span><br><span class="line">-zcvf 文件名 : 打包并压缩</span><br><span class="line">-zxvf 文件名 : 解压</span><br><span class="line"></span><br><span class="line"># find : 查找符合条件的文件的位置</span><br><span class="line">-name : 根据文件名</span><br><span class="line"></span><br><span class="line"># gref : 查找文件中符合条件的内容</span><br><span class="line"><span class="comment">--color : 对查询结果进行高亮显示</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>其他常用操作</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pwd : 显示当前所在目录</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># touch : 创建一个空文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># clear : 清屏</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># vim : 使用vim编辑器编辑文件。</span></span><br><span class="line">* esc + :wq 保存文件</span><br><span class="line">* i,o,a执行不同的操作</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重定向 &gt;[覆盖], &gt;&gt;[追加]</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 进程相关: ps[查看进程] kill[杀死进程] kill -9[强制杀死进程]</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 管道 : | [将一个命令的输出当作另一个命令的输入] 例如: ls --help | more</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Linux的权限"><a href="#Linux的权限" class="headerlink" title="Linux的权限"></a>Linux的权限</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">----------</span><br><span class="line">1234</span><br><span class="line"></span><br><span class="line">(1)代表文件类型</span><br><span class="line"><span class="comment">* -表示文件</span></span><br><span class="line"><span class="comment">* d表示文件夹</span></span><br><span class="line"><span class="comment">* l表示连接</span></span><br><span class="line"></span><br><span class="line">(2)当前用户具有该文件的权限</span><br><span class="line"><span class="comment">* r read 读文件4</span></span><br><span class="line"><span class="comment">* w write 写文件2</span></span><br><span class="line"><span class="comment">* x excute 执行1</span></span><br><span class="line"></span><br><span class="line">(3)当前组内其他用户具有该文件的权限</span><br><span class="line"><span class="comment">* 同上</span></span><br><span class="line"></span><br><span class="line">(4)其他组的用户具有该文件的权限</span><br><span class="line"><span class="comment">* 同上</span></span><br></pre></td></tr></table></figure><p><strong>修改权限</strong></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span> <span class="comment">chmod</span> <span class="comment">u=</span>--<span class="literal">-</span> <span class="comment">g=</span>--<span class="literal">-</span> <span class="comment">o=</span>--<span class="literal">-</span></span><br></pre></td></tr></table></figure><p><strong>防火墙</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># service iptables stop : 关闭防火墙</span></span><br><span class="line"><span class="bullet">*</span> 在安装软件的时候可能要用到</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Linux学习笔记。</summary>
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/04】JavaWebServlet笔记</title>
    <link href="http://example.com/2022/03/04/JavaWeb-Servlet%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/04/JavaWeb-Servlet%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-04T14:06:04.000Z</published>
    <updated>2022-03-11T06:57:30.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</span><br><span class="line"><span class="bullet">2.</span> 查找web.xml文件，是否有对应的<span class="xml"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span></span>标签体内容。</span><br><span class="line"><span class="bullet">3.</span> 如果有，则在找到对应的<span class="xml"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span>全类名</span><br><span class="line"><span class="bullet">4.</span> tomcat会将字节码文件加载进内存，并且创建其对象</span><br><span class="line"><span class="bullet">5.</span> 调用其方法</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a><strong>生命周期</strong></h3><ol><li>被创建：执行<code>init方法</code>,只执行一次。<ul><li>Servlet的<code>init方法</code>，只执行一次，说明一个Servlet在内存中只存在一个对象，<strong>Servlet是单例的</strong>。</li><li>多个用户同时访问时，可能存在线程安全问题。</li><li>尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值。</li></ul></li><li>提供服务：执行service方法，执行多次。<ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul></li><li>被销毁：执行destroy方法，只执行一次。<ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁。</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源。</li></ul></li></ol><h3 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Servlet -- 接口</span><br><span class="line"><span class="code">|</span></span><br><span class="line"><span class="code">GenericServlet -- 抽象类</span></span><br><span class="line"><span class="code">|</span></span><br><span class="line"><span class="code">HttpServlet  -- 抽象类</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</span><br><span class="line"><span class="bullet">*</span> 将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> HttpServlet：对http协议的一种封装，简化操作</span><br><span class="line"><span class="bullet">1.</span> 定义类继承HttpServlet</span><br><span class="line"><span class="bullet">2.</span> 复写doGet/doPost方法</span><br></pre></td></tr></table></figure><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>Hyper Text Transfer Protocol 超文本传输协议.</p>]]></content>
    
    
    <summary type="html">JavaWeb中Servlet相关知识点复习记录。</summary>
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/02】JavaScript笔记</title>
    <link href="http://example.com/2022/03/02/JavaScript%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/02/JavaScript%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-02T01:47:20.000Z</published>
    <updated>2022-03-23T01:41:54.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript笔记"><a href="#JavaScript笔记" class="headerlink" title="JavaScript笔记"></a>JavaScript笔记</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ol><li><strong>概念</strong>：一门客户端脚本语言。<ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎。</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了。</li></ul></li><li><strong>功能</strong>：<ul><li>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li></ul></li><li><strong>JavaScript</strong> = <strong>ECMAScript</strong> + JavaScript自己特有的东西(<strong>BOM+DOM</strong>)</li></ol><hr><h3 id="ECMAScript：客户端脚本语言的标准"><a href="#ECMAScript：客户端脚本语言的标准" class="headerlink" title="ECMAScript：客户端脚本语言的标准"></a>ECMAScript：客户端脚本语言的标准</h3><ol><li><p><strong>基本语法</strong></p><ol><li><p>与html结合的方式</p><pre><code>1. 内部JS：* 定义&lt;script&gt;，标签体内容就是js代码2. 外部JS：* 定义&lt;script&gt;，通过src属性引入外部的js文件</code></pre></li></ol></li><li><p><strong>数据类型</strong></p><ol><li><strong>原始数据类型</strong><ul><li><code>number</code>：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)</li><li><code>string</code>：字符串。 字符串  “abc” “a” ‘abc’</li><li><code>boolean</code>: true和false</li><li><code>null</code>：一个对象为空的占位符</li><li><code>undefined</code>：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li></ul></li><li>引用数据类型：对象</li></ol></li><li><p><strong>变量</strong></p><ul><li><p>一小块存储数据的内存空间</p></li><li><p><font color=red>Java语言是<strong>强类型</strong>语言，而JavaScript是弱类型语言。</font></p><ul><li><strong>强类型</strong>：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据。</li><li><strong>弱类型</strong>：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 语法： */</span></span><br><span class="line"><span class="comment">/* var 变量名 = 初始化值; */</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>运算符</strong></p><ul><li><p>一元运算符：只有一个运算数的运算符</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* 一元运算符</span><br><span class="line">    ++，<span class="comment">-- ， +(正号)  </span></span><br><span class="line">    ++ <span class="comment">--: 自增(自减)</span></span><br><span class="line">    ++(<span class="comment">--) 在前，先自增(自减)，再运算</span></span><br><span class="line">    ++(<span class="comment">--) 在后，先运算，再自增(自减)</span></span><br><span class="line">    +(-)：正负号</span><br><span class="line"></span><br><span class="line">* 注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换</span><br><span class="line"></span><br><span class="line">* 其他类型转<span class="built_in">number</span>：</span><br><span class="line"><span class="built_in">string</span>转<span class="built_in">number</span>：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）</span><br><span class="line"><span class="built_in">boolean</span>转<span class="built_in">number</span>：<span class="literal">true</span>转为<span class="number">1</span>，<span class="literal">false</span>转为<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>算数运算符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> - <span class="emphasis">* / % ...</span></span><br></pre></td></tr></table></figure></li><li><p>赋值运算符</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">= += -+....</span></span><br></pre></td></tr></table></figure></li><li><p>比较运算符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; &lt; &gt;= &lt;= == ===(全等于)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 比较方式</span><br><span class="line"><span class="bullet">    1.</span> 类型相同：直接比较</span><br><span class="line"><span class="bullet">    *</span> 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</span><br><span class="line"><span class="bullet">    2.</span> 类型不同：先进行类型转换，再比较</span><br><span class="line"><span class="bullet">    *</span> ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; || !</span><br><span class="line"></span><br><span class="line">* 其他类型转<span class="built_in">boolean</span>：</span><br><span class="line">    <span class="number">1.</span> <span class="built_in">number</span>：<span class="number">0</span>或<span class="literal">NaN</span>为假，其他为真</span><br><span class="line">    <span class="number">2.</span> <span class="built_in">string</span>：除了空字符串(<span class="string">&quot;&quot;</span>)，其他都是<span class="literal">true</span></span><br><span class="line">    <span class="number">3.</span> <span class="literal">null</span>&amp;<span class="literal">undefined</span>:都是<span class="literal">false</span></span><br><span class="line">    <span class="number">4.</span> 对象：所有对象都为<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>三元运算符</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? : 表达式</span><br><span class="line"></span><br><span class="line">* 语法：</span><br><span class="line">    * 表达式? 值<span class="number">1</span>:值<span class="number">2</span>;</span><br><span class="line">    * 判断表达式的值，如果是<span class="literal">true</span>则取值<span class="number">1</span>，如果是<span class="literal">false</span>则取值<span class="number">2</span>；</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>流程控制语句</strong></p><ul><li><p><code>if...else...</code></p></li><li><p><code>switch</code>:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 在java中，<span class="keyword">switch</span>语句可以接受的数据类型： <span class="keyword">byte</span> <span class="keyword">int</span> shor <span class="keyword">char</span>,枚举(<span class="number">1.5</span>),<span class="built_in"><span class="keyword">String</span></span>(<span class="number">1.7</span>)</span><br><span class="line"></span><br><span class="line">* <span class="built_in"><span class="keyword">switch</span></span>(变量):</span><br><span class="line"><span class="keyword">case</span> 值:</span><br><span class="line"></span><br><span class="line">* 在JS中,<span class="keyword">switch</span>语句可以接受任意的原始数据类型</span><br></pre></td></tr></table></figure></li><li><p><code>while</code></p></li><li><p><code>do...while</code></p></li><li><p><code>for</code></p></li></ul></li><li><p><strong>JS特殊语法</strong></p><ul><li>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</li><li>变量的定义使用var关键字，也可以不使用<ul><li>用： 定义的变量是局部变量</li><li>不用：定义的变量是全局变量(不建议)</li></ul></li></ul></li></ol><hr><h4 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h4><ol><li><p><code>Function</code>: 函数(方法)对象</p><ol><li><p>创建</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.第一种方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 方法名称(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.第二种方式</span></span><br><span class="line"><span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性：length:代表形参的个数</p></li><li><p>**<font color=red>特点</font>**：</p><ul><li>形参的类型不用写,返回值类型也不写。</li><li>方法是一个对象，如果定义名称相同的方法，会覆盖。【重写方法】</li><li>在JS中，方法的调用只与方法的名称有关，和参数列表无关。</li><li>在方法声明中有一个隐藏的内置对象（数组）<code>arguments</code> ,封装所有的实际参数。</li></ul></li><li><p>调用方式</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名称(实际参数列表)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>Array</code> : 数组对象</p><ol><li><p>创建</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="type">Array</span>(元素列表);</span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="type">Array</span>(默认长度);</span><br><span class="line"><span class="number">3.</span> <span class="keyword">var</span> arr = [元素列表];</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">join</span><span class="params">(参数)</span></span>:将数组中的元素按照指定的分隔符拼接为字符串</span><br><span class="line"><span class="function"><span class="title">push</span><span class="params">()</span></span>向数组的末尾添加一个或更多元素，并返回新的长度。</span><br></pre></td></tr></table></figure></li><li><p>属性：length:数组的长度</p></li><li><p>特点：</p><ul><li>JS中，数组<strong>元素的类型可变</strong>的。</li><li>JS中，<strong>数组长度可变</strong>的。</li></ul></li></ol></li><li><p><code>Date</code>: 日期对象</p><ol><li><p>创建</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">toLocaleString</span><span class="params">()</span></span>：返回当前date对象对应的时间本地字符串格式</span><br><span class="line"><span class="function"><span class="title">getTime</span><span class="params">()</span></span>:获取毫秒值。返回当前如期对象描述的时间到<span class="number">1970</span>年<span class="number">1</span>月<span class="number">1</span>日零点的毫秒值差</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>Math</code>: 数学对象</p><ol><li><p>创建</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Math</span>.方法名();</span><br><span class="line">* 特点：<span class="keyword">Math</span>对象不用创建，直接使用。</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">random</span><span class="params">()</span></span>:返回 <span class="number">0</span> ~ <span class="number">1</span> 之间的随机数。 含<span class="number">0</span>不含<span class="number">1</span>。(<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="title">ceil</span><span class="params">(x)</span></span>：对数进行上舍入。</span><br><span class="line"><span class="function"><span class="title">floor</span><span class="params">(x)</span></span>：对数进行下舍入。</span><br><span class="line"><span class="function"><span class="title">round</span><span class="params">(x)</span></span>：把数四舍五入为最接近的整数。</span><br></pre></td></tr></table></figure></li></ol></li><li><p><code>RegExp</code>：正则表达式对象</p><ol><li><p>创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;正则表达式&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> reg = <span class="regexp">/正则表达式/</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>正则表达式</strong></p><ul><li><p>单个字符:[]</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如： <span class="comment">[a]</span> <span class="comment">[ab]</span> <span class="comment">[a-zA-Z0-9_]</span></span><br><span class="line"></span><br><span class="line">* 特殊符号代表特殊含义的单个字符:</span><br><span class="line">\d:单个数字字符 <span class="comment">[0-9]</span></span><br><span class="line">\w:单个单词字符<span class="comment">[a-zA-Z0-9_]</span></span><br></pre></td></tr></table></figure></li><li><p>量词符号：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?：表示出现<span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">*：表示出现<span class="number">0</span>次或多次</span><br><span class="line">+：出现<span class="number">1</span>次或多次</span><br><span class="line">&#123;m,<span class="built_in">n</span>&#125;<span class="symbol">:</span>表示 m&lt;= 数量 &lt;= <span class="built_in">n</span></span><br><span class="line">* m如果缺省： &#123;,<span class="built_in">n</span>&#125;<span class="symbol">:</span>最多<span class="built_in">n</span>次</span><br><span class="line">* <span class="built_in">n</span>如果缺省：&#123;m,&#125; 最少m次</span><br></pre></td></tr></table></figure></li><li><p>开始和结束符号</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>^:开始</span><br><span class="line"><span class="bullet">* </span>$:结束</span><br></pre></td></tr></table></figure></li></ul></li><li><p>正则对象方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">test</span><span class="params">(参数)</span></span>:验证指定的字符串是否符合正则定义的规范</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Global对象</p><ol><li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名()<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>():<span class="built_in">url</span>编码</span><br><span class="line"><span class="built_in">decodeURI</span>():<span class="built_in">url</span>解码</span><br><span class="line"></span><br><span class="line"><span class="built_in">encodeURIComponent</span>():<span class="built_in">url</span>编码,编码的字符更多</span><br><span class="line"><span class="built_in">decodeURIComponent</span>():<span class="built_in">url</span>解码</span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>():将字符串转为数字</span><br><span class="line">* 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> num = str1.parseInt();</span><br><span class="line">* <span class="keyword">var</span> --&gt; <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>():判断一个值是否是<span class="literal">NaN</span></span><br><span class="line">* <span class="literal">NaN</span>六亲不认，连自己都不认。<span class="literal">NaN</span>参与的==比较全部问<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>():讲 JavaScript 字符串，并把它作为脚本代码来执行。</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>Browser Object Model 浏览器对象模型。</p><ol><li><p>组成</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Window：窗口对象</span><br><span class="line"><span class="bullet">* </span>Navigator：浏览器对象</span><br><span class="line"><span class="bullet">* </span>Screen：显示器屏幕对象</span><br><span class="line"><span class="bullet">* </span>History：历史记录对象</span><br><span class="line"><span class="bullet">* </span>Location：地址栏对象</span><br></pre></td></tr></table></figure></li><li><p>Window：窗口对象</p><ol><li><p>创建</p></li><li><p>方法</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 与弹出框有关的方法：</span><br><span class="line">    <span class="function"><span class="title">alert</span>()显示带有一段消息和一个确认按钮的警告框。</span></span><br><span class="line"><span class="function">    <span class="title">confirm</span>()显示带有一段消息以及确认按钮和取消按钮的对话框。</span></span><br><span class="line"><span class="function">        * 如果用户点击确定按钮，则方法返回<span class="variable"><span class="literal">true</span></span></span></span><br><span class="line"><span class="function">        * 如果用户点击取消按钮，则方法返回<span class="variable"><span class="literal">false</span></span></span></span><br><span class="line"><span class="function">    <span class="title">prompt</span>()显示可提示用户输入的对话框。</span></span><br><span class="line"><span class="function">        * 返回值：获取用户输入的值</span></span><br><span class="line"><span class="function">                </span></span><br><span class="line"><span class="function"><span class="number">2</span>. 与打开关闭有关的方法：</span></span><br><span class="line"><span class="function">    <span class="title">close</span>()关闭浏览器窗口。</span></span><br><span class="line"><span class="function">        * 谁调用我 ，我关谁</span></span><br><span class="line"><span class="function">    <span class="title">open</span>()打开一个新的浏览器窗口</span></span><br><span class="line"><span class="function">        * 返回新的<span class="variable">Window</span>对象</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="number">3</span>. 与定时器有关的方式</span></span><br><span class="line"><span class="function">    <span class="title">setTimeout</span>()在指定的毫秒数后调用函数或计算表达式。</span></span><br><span class="line"><span class="function">        * 参数：</span></span><br><span class="line"><span class="function">            <span class="number">1</span>. js代码或者方法对象</span></span><br><span class="line"><span class="function">            <span class="number">2</span>. 毫秒值</span></span><br><span class="line"><span class="function">        * 返回值：唯一标识，用于取消定时器</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">clearTimeout</span>()取消由 <span class="title">setTimeout</span>() 方法设置的 <span class="variable">timeout</span>。</span></span><br><span class="line"><span class="function">    <span class="title">setInterval</span>()按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line"><span class="function">    <span class="title">clearInterval</span>()取消由 <span class="title">setInterval</span>() 设置的 <span class="variable">timeout</span>。</span></span><br></pre></td></tr></table></figure></li><li><p>属性</p><ol><li><p>获取其他<strong>BOM对象</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history</span><br><span class="line"><span class="keyword">location</span></span><br><span class="line"><span class="title">Navigator</span></span><br><span class="line">Screen</span><br></pre></td></tr></table></figure></li><li><p>获取<strong>DOM对象</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong><font color=red>特点</font></strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* <span class="built_in">Window</span>对象不需要创建可以直接使用 <span class="built_in">window</span>使用。</span><br><span class="line"><span class="built_in">window</span>.方法名();</span><br><span class="line"></span><br><span class="line">* <span class="built_in">window</span>引用可以省略。  </span><br><span class="line">方法名();</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Location：地址栏对象</p><ol><li><p>创建</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. window.<span class="keyword">location</span></span><br><span class="line"><span class="title">2</span>. location</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">reload</span><span class="params">()</span></span>重新加载当前文档。刷新</span><br></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">href设置或返回完整的 <span class="built_in">URL</span>。</span><br></pre></td></tr></table></figure></li></ol></li><li><p>History：历史记录对象</p><ol><li><p>创建</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> window.history</span><br><span class="line"><span class="bullet">2.</span> history</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> back():加载 history 列表中的前一个 URL。</span><br><span class="line"><span class="bullet">*</span> forward():加载 history 列表中的下一个 URL。</span><br><span class="line"><span class="bullet">*</span> go(参数):加载 history 列表中的某个具体页面。</span><br><span class="line"><span class="bullet">    *</span> 参数：</span><br><span class="line"><span class="bullet">    *</span> 正数：前进几个历史记录</span><br><span class="line"><span class="bullet">    *</span> 负数：后退几个历史记录</span><br></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">length</span>返回当前窗口历史列表中的 <span class="built_in">URL</span> 数量。</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>Document Object Model 文档对象模型。</p><ol><li><p>DOM的三个部分</p><ol><li><p>核心DOM[针对任何结构化文档的标准模型]</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Document：文档对象</span><br><span class="line"><span class="bullet">* </span>Element：元素对象</span><br><span class="line"><span class="bullet">* </span>Attribute：属性对象</span><br><span class="line"><span class="bullet">* </span>Text：文本对象</span><br><span class="line"><span class="bullet">* </span>Comment:注释对象</span><br><span class="line"><span class="bullet">* </span>Node：节点对象，其他5个的父对象</span><br></pre></td></tr></table></figure></li><li><p>XML DOM[针对 <strong>XML 文档</strong>的标准模型]</p></li><li><p>HTML DOM[针对 <strong>HTML 文档</strong>的标准模型]</p></li></ol></li><li><p><strong><font color =red>核心DOM模型</font></strong></p><ol><li><p><strong>Document：文档对象</strong></p><ol><li><p>创建</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">window</span>.<span class="built_in">document</span></span><br><span class="line"><span class="number">2.</span> <span class="built_in">document</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 获取Element对象：</span><br><span class="line">    <span class="number">1.</span> get<span class="constructor">ElementById()</span>： 根据id属性值获取元素对象。id属性值一般唯一</span><br><span class="line">    <span class="number">2.</span> get<span class="constructor">ElementsByTagName()</span>：根据元素名称获取元素对象们。返回值是一个数组</span><br><span class="line">    <span class="number">3.</span> get<span class="constructor">ElementsByClassName()</span>:根据Class属性值获取元素对象们。返回值是一个数组</span><br><span class="line">    <span class="number">4.</span> get<span class="constructor">ElementsByName()</span>: 根据name属性值获取元素对象们。返回值是一个数组</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> 创建其他DOM对象：</span><br><span class="line">    create<span class="constructor">Attribute(<span class="params">name</span>)</span></span><br><span class="line">    create<span class="constructor">Comment()</span></span><br><span class="line">    create<span class="constructor">Element()</span></span><br><span class="line">    create<span class="constructor">TextNode()</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>Element：元素对象</strong></p><ol><li><p>创建</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过<span class="built_in">document</span>来获取和创建</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="comment">removeAttribute()：删除属性</span></span><br><span class="line"><span class="number">2</span>. setAttribute()：设置属性</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>Node节点对象</strong></p><p>所有dom对象都可以被认为是一个节点。</p><ol><li><p>方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> CRUD dom树：</span><br><span class="line"><span class="bullet">    *</span> appendChild()：向节点的子节点列表的结尾添加新的子节点。</span><br><span class="line"><span class="bullet">    *</span> removeChild()：删除（并返回）当前节点的指定子节点。</span><br><span class="line"><span class="bullet">    *</span> replaceChild()：用新节点替换一个子节点。</span><br></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>parentNode 返回节点的父节点。</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><hr><h3 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h3><ol><li><p>概念</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line"><span class="bullet">*</span> 事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</span><br><span class="line"><span class="bullet">*</span> 事件源：组件。如： 按钮 文本输入框...</span><br><span class="line"><span class="bullet">*</span> 监听器：代码。</span><br><span class="line"><span class="bullet">*</span> 注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</span><br></pre></td></tr></table></figure></li><li><p>常见的事件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 点击事件：</span><br><span class="line"><span class="bullet">1.</span> onclick：单击事件</span><br><span class="line"><span class="bullet">2.</span> ondblclick：双击事件</span><br><span class="line"><span class="bullet">2.</span> 焦点事件</span><br><span class="line"><span class="bullet">1.</span> onblur：失去焦点</span><br><span class="line"><span class="bullet">2.</span> onfocus:元素获得焦点。</span><br><span class="line">   </span><br><span class="line"><span class="bullet">3.</span> 加载事件：</span><br><span class="line"><span class="bullet">1.</span> onload：一张页面或一幅图像完成加载。</span><br><span class="line">   </span><br><span class="line"><span class="bullet">4.</span> 鼠标事件：</span><br><span class="line"><span class="bullet">1.</span> onmousedown鼠标按钮被按下。</span><br><span class="line"><span class="bullet">2.</span> onmouseup鼠标按键被松开。</span><br><span class="line"><span class="bullet">3.</span> onmousemove鼠标被移动。</span><br><span class="line"><span class="bullet">4.</span> onmouseover鼠标移到某元素之上。</span><br><span class="line"><span class="bullet">5.</span> onmouseout鼠标从某元素移开。</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
    
    
    <summary type="html">JavaScript笔记。</summary>
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【22/03/01】HTML笔记</title>
    <link href="http://example.com/2022/03/01/HTML%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/03/01/HTML%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-01T10:57:33.000Z</published>
    <updated>2022-03-11T06:56:06.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML笔记"><a href="#HTML笔记" class="headerlink" title="HTML笔记"></a>HTML笔记</h2><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><h4 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h4><p><strong>Input</strong>: 可以通过type属性值，改变元素展示的样式</p><ul><li><p><code>type</code>属性</p><ul><li><p><code>text</code> ：文本输入框[<strong>默认值</strong>]</p><ul><li>placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息。</li></ul></li><li><p><code>password</code> ：密码输入框</p></li><li><p><code>radio</code> :单选框</p><ul><li>要想让多个单选框实现单选的效果，<strong>则多个单选框的name属性值必须一样</strong>。</li><li> 一般会给每一个单选框提供value属性，指定其被选中后提交的值。</li><li> checked属性，可以指定默认值。</li></ul></li><li><p><code>checkbox</code>: 复选框</p></li><li><p><code>hidden</code>: 隐藏域[<strong>常用于提交信息</strong>]</p></li></ul></li></ul><hr><h2 id="CSS笔记"><a href="#CSS笔记" class="headerlink" title="CSS笔记"></a>CSS笔记</h2><p><code>CSS</code>： Cascading Style Sheets 层叠样式表。[<strong>将内容展示和样式控制分离</strong>]</p><h3 id="CSS的使用"><a href="#CSS的使用" class="headerlink" title="CSS的使用"></a>CSS的使用</h3><ol><li><p>内联样式[<strong>不推荐使用</strong>]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在标签内使用style属性指定css代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内部样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在head标签内，定义style标签，style标签的标签体内容就是css代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.定义css资源文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.在head标签内，定义link标签，引入外部的资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/a.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="selector-tag">a</span><span class="selector-class">.css</span>文件 --&gt;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="CSS的语法"><a href="#CSS的语法" class="headerlink" title="CSS的语法"></a>CSS的语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    属性名<span class="number">1</span>:属性值<span class="number">1</span>;</span><br><span class="line">    属性名<span class="number">2</span>:属性值<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择器:筛选具有相似特征的元素 */</span></span><br><span class="line"><span class="comment">/* 每一对属性需要使用；隔开，最后一对属性可以不加； */</span></span><br></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>筛选具有相似特征的元素。</p><ol><li><p>基础选择器</p><ol><li><p>id选择器: 选择具体的id属性值的元素.建议在一个html页面中id值唯一。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>属性值&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>元素选择器: 选择具有相同标签名称的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签名称&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>类选择器: 选择具有相同的class属性值的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span>属性值&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>扩展选择器</p><p>选择所有元素<code>*&#123;&#125;</code>、并集选择器<code>选择器1,选择器2&#123;&#125;</code>、子选择器<code>筛选选择器1元素下的选择器2元素--选择器1 选择器2&#123;&#125;</code>、属性选择器<code>元素名称[属性名=&quot;属性值&quot;]&#123;&#125;</code>等。</p></li></ol><hr><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ol><li><p><code>get</code> 和 <code>post</code> 的区别</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.get：</span><br><span class="line"><span class="bullet">1.</span> 请求参数会在地址栏中显示。会封装到请求行中(HTTP协议后讲解)。</span><br><span class="line"><span class="bullet">2.</span> 请求参数大小是有限制的。</span><br><span class="line"><span class="bullet">3.</span> 不太安全。</span><br><span class="line">2.post：</span><br><span class="line"><span class="bullet">1.</span> 请求参数不会再地址栏中显示。会封装在请求体中(HTTP协议后讲解)</span><br><span class="line"><span class="bullet">2.</span> 请求参数的大小没有限制。</span><br><span class="line"><span class="bullet">3.</span> 较为安全。</span><br><span class="line"><span class="bullet">*</span> 注意：</span><br><span class="line"><span class="code">表单项中的数据要想被提交：必须指定其name属性。</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">HTML笔记。</summary>
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="html" scheme="http://example.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>【22/02/26】mysql复习</title>
    <link href="http://example.com/2022/02/26/mysql%E5%A4%8D%E4%B9%A0-1/"/>
    <id>http://example.com/2022/02/26/mysql%E5%A4%8D%E4%B9%A0-1/</id>
    <published>2022-02-26T07:17:44.000Z</published>
    <updated>2022-06-14T02:03:40.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL复习笔记-一"><a href="#MySQL复习笔记-一" class="headerlink" title="MySQL复习笔记(一)"></a>MySQL复习笔记(一)</h2><h3 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL: 查询语句"></a>DQL: 查询语句</h3><hr><h4 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h4><ul><li>语法：<code>order by</code></li><li>排序方式:<ul><li>升序：<code>ASC</code></li><li>降序：<code>DESC</code></li></ul></li><li><strong>多条件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 只有当第一条件值相同时，才会判断第二条件。</span><br><span class="line">SELECT * FROM student3 ORDER BY math ASC, english ASC;</span><br></pre></td></tr></table></figure><hr><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>将一列数据作为一个整体，进行纵向的计算。<strong>聚合函数的计算，排除null值。</strong></p><ul><li>count[计算个数]<ul><li>一般选择非空的列：主键</li></ul></li><li>max[计算最大值] </li><li>min[计算最小值] </li><li>sum[计算和] </li><li>avg[计算平均值]</li></ul><hr><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><ul><li><p>语法：<code>group by</code></p></li><li><p><strong>注意：</strong></p><ul><li>分组之后的查询的字段：分组字段、聚合函数</li><li><code>where</code>和<code>having</code>的区别：<ul><li>where 在<strong>分组之前</strong>进行限定，如果不满足条件，则不参与分组。having在<strong>分组之后</strong>进行限定，如果不满足结果，则不会被查询出来。</li><li>where 后不可以跟<strong>聚合函数</strong>，having可以进行聚合函数的判断。</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT sex 性别, avg(math) 数学平均成绩, count(id) 人数 FROM student3 WHERE math &gt; 70 GROUP BY sex HAVING count(id) &gt; 2;</span><br></pre></td></tr></table></figure><hr><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><ul><li>语法：<code>limit</code> 开始的索引，每一页查询的条数。</li><li>公式：<strong>开始的索引 = （当前的页码 - 1） * 每页显示的条数</strong></li><li><strong>方言：</strong>在MySQL中才生效。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 每页显示3条记录 </span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 0,3; -- 第1页</span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 3,3; -- 第2页</span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 6,3; -- 第3页</span><br></pre></td></tr></table></figure><hr><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul><li><p>概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。    </p></li><li><p>分类：</p><ul><li><p><strong>主键约束</strong>：<code>primary key</code></p><ul><li>含义：非空且唯一</li><li>一张表<strong>只能有一个</strong>字段为主键</li><li>主键就是表中记录的<strong>唯一标识</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 1. 在创建表时，添加主键约束</span><br><span class="line">create table stu(</span><br><span class="line">id int primary key,-- 给id添加主键约束</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 2. 删除主键</span><br><span class="line"># 错误 alter table stu modify id int ;</span><br><span class="line">ALTER TABLE stu DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">      # 3. 创建完表后，添加主键</span><br><span class="line">      ALTER TABLE stu MODIFY id INT PRIMARY KEY;</span><br></pre></td></tr></table></figure><ul><li>自增 <code>AUTO_INCREMENT</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1. 在创建表时，添加主键约束，并且完成主键自增长</span><br><span class="line">create table stu(</span><br><span class="line">id int primary key auto_increment,-- 给id添加主键约束</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 2. 删除自动增长</span><br><span class="line">ALTER TABLE stu MODIFY id INT;</span><br><span class="line"></span><br><span class="line"># 3. 添加自动增长</span><br><span class="line">ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>非空约束</strong>：<code>not null</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1. 创建表时添加约束</span><br><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT,</span><br><span class="line">NAME VARCHAR(20) NOT NULL -- name为非空</span><br><span class="line">);</span><br><span class="line"># 2. 创建表完后，添加非空约束</span><br><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</span><br><span class="line">    </span><br><span class="line"># 3. 删除name的非空约束</span><br><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20);</span><br></pre></td></tr></table></figure></li><li><p><strong>唯一约束</strong>：<code>unique</code></p><p>某一列的值<strong>不能重复</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1. 注意：</span><br><span class="line">#* 唯一约束可以有NULL值，但是只能有一条记录为null</span><br><span class="line"># 2. 在创建表时，添加唯一约束</span><br><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT,</span><br><span class="line">phone_number VARCHAR(20) UNIQUE -- 手机号</span><br><span class="line">);</span><br><span class="line"># 3. 删除唯一约束</span><br><span class="line">ALTER TABLE stu DROP INDEX phone_number;</span><br><span class="line"># 4. 在表创建完后，添加唯一约束</span><br><span class="line">ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</span><br></pre></td></tr></table></figure></li><li><p><strong>外键约束</strong>：<code>foreign key</code></p><ul><li><p>让表于表产生关系，从而保证数据的正确性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 1. 在创建表时，可以添加外键</span><br><span class="line"># 语法：</span><br><span class="line">create table 表名(</span><br><span class="line">....</span><br><span class="line">外键列</span><br><span class="line">constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</span><br><span class="line">);</span><br><span class="line">      </span><br><span class="line"># 2. 删除外键</span><br><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span><br><span class="line">      </span><br><span class="line"># 3. 创建表之后，添加外键</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</span><br></pre></td></tr></table></figure></li><li><p>级联操作</p><ul><li><code>on update cascade</code> ：级联更新</li><li><code> on delete cascade</code>： 级联删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 创建外键约束</span><br><span class="line">constraint emp_depid_fk foreign key (dep_id) references</span><br><span class="line"> department(id) on update cascade on delete cascade</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h3></li><li><p><strong>多表之间的关系</strong></p><ul><li><p><strong>分类</strong></p><ul><li><p>一对一</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个人只有一个身份证，一个身份证只能对应一个人</span><br></pre></td></tr></table></figure></li><li><p>多对一</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个部门有多个员工，一个员工只能对应一个部门</span><br></pre></td></tr></table></figure></li><li><p>多对多</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个学生可以选择很多门课程，一个课程也可以被很多学生选择</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>实现关系</strong></p><ul><li><p>一对多(多对一)</p><p>实现方式：在多的一方建立外键，指向一的一方的主键。</p></li><li><p>多对多</p><p>实现方式： 多对多关系实现需要借助<strong>第三张中间表</strong>。中间表至少包含两个字段，这两个字段作为中间表的外键，分别指向两张表的主键。</p></li></ul></li></ul></li><li><p><strong>范式</strong></p><ul><li>第一范式：每一列都是不可分割的原子数据项。</li><li>第二范式：在满足<strong>第一范式</strong>的基础上，消除非主属性对主码的<strong>部分函数依赖</strong>。</li><li>第三范式：在满足<strong>第二范式</strong>的基础上，消除<strong>传递依赖</strong>。</li></ul></li></ul><hr><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ul><li><p><strong>笛卡尔积</strong></p><ul><li>有两个集合A,B .取这两个集合的所有组成情况。</li><li>要完成多表查询，需要消除无用的数据。</li></ul></li><li><p><strong>分类</strong></p><ul><li><p><strong>内连接查询</strong></p><ul><li><p>隐式内连接：使用where条件消除无用数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</span><br></pre></td></tr></table></figure></li><li><p>显式内连接：select 字段列表 from 表名1 [inner] join 表名2 on 条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`;</span><br><span class="line">SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>外连接查询</strong></p><ul><li><p>**<font color=red>左外连接</font>**：select 字段列表 from 表1 left [outer] join 表2 on 条件</p><p>查询的是<strong>左表所有数据</strong>以及其交集部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span><br><span class="line">SELECT t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li><li><p>右外连接：select 字段列表 from 表1 right [outer] join 表2 on 条件；</p><p>查询的是右表所有数据以及其交集部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>子查询</strong></p><p><strong>查询中嵌套查询</strong>，称嵌套查询为子查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 查询工资最高的员工信息</span><br><span class="line"># 1 单行单列</span><br><span class="line">SELECT * FROM emp WHERE emp.`salary` = (SELECT MAX(salary) FROM emp);</span><br><span class="line"></span><br><span class="line"># 2 多行单列：子查询可以作为条件，使用运算符in来判断</span><br><span class="line"># 查询&#x27;财务部&#x27;和&#x27;市场部&#x27;所有的员工信息</span><br><span class="line">-- 子查询</span><br><span class="line">SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = &#x27;财务部&#x27; OR NAME = &#x27;市场部&#x27;);</span><br><span class="line"></span><br><span class="line"># 多行多列</span><br><span class="line"># 子查询可以作为一张虚拟表参与查询</span><br><span class="line"># 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span><br><span class="line">SELECT </span><br><span class="line">*</span><br><span class="line">FROM </span><br><span class="line">dept t1,</span><br><span class="line">(SELECT * FROM emp WHERE emp.join_date &gt; &#x27;2011-11-11&#x27;) t2</span><br><span class="line">WHERE</span><br><span class="line">t1.id = t2.dept_id</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="多表查询练习"><a href="#多表查询练习" class="headerlink" title="多表查询练习"></a>多表查询练习</h4><ul><li><p>建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 1.部门表</span><br><span class="line">CREATE TABLE dept (</span><br><span class="line">    id INT PRIMARY KEY PRIMARY KEY, -- 部门id</span><br><span class="line">    dname VARCHAR(50), -- 部门名称</span><br><span class="line">    loc VARCHAR(50) -- 部门所在地</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 2.职务表</span><br><span class="line">CREATE TABLE job (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    jname VARCHAR(20), -- 职务名称</span><br><span class="line">    description VARCHAR(50) -- 职务描述</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 3.员工表</span><br><span class="line">CREATE TABLE emp (</span><br><span class="line">    id INT PRIMARY KEY, -- 员工id</span><br><span class="line">    ename VARCHAR(50), -- 员工姓名</span><br><span class="line">    job_id INT, -- 职务id</span><br><span class="line">    mgr INT , -- 上级领导</span><br><span class="line">    joindate DATE, -- 入职日期</span><br><span class="line">    salary DECIMAL(7,2), -- 工资</span><br><span class="line">    bonus DECIMAL(7,2), -- 奖金</span><br><span class="line">    dept_id INT, -- 所在部门编号</span><br><span class="line">    CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),</span><br><span class="line">    CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 4.工资表</span><br><span class="line">CREATE TABLE salarygrade (</span><br><span class="line">    grade INT PRIMARY KEY,   -- 级别</span><br><span class="line">    losalary INT,  -- 最低工资</span><br><span class="line">    hisalary INT -- 最高工资</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 1.部门表：添加4个部门</span><br><span class="line">INSERT INTO dept(id,dname,loc) VALUES </span><br><span class="line">(10,&#x27;教研部&#x27;,&#x27;北京&#x27;),</span><br><span class="line">(20,&#x27;学工部&#x27;,&#x27;上海&#x27;),</span><br><span class="line">(30,&#x27;销售部&#x27;,&#x27;广州&#x27;),</span><br><span class="line">(40,&#x27;财务部&#x27;,&#x27;深圳&#x27;);</span><br><span class="line"></span><br><span class="line"># 2.职务表：添加4个职务</span><br><span class="line">INSERT INTO job (id, jname, description) VALUES</span><br><span class="line">(1, &#x27;董事长&#x27;, &#x27;管理整个公司，接单&#x27;),</span><br><span class="line">(2, &#x27;经理&#x27;, &#x27;管理部门员工&#x27;),</span><br><span class="line">(3, &#x27;销售员&#x27;, &#x27;向客人推销产品&#x27;),</span><br><span class="line">(4, &#x27;文员&#x27;, &#x27;使用办公软件&#x27;);</span><br><span class="line"></span><br><span class="line"># 3.员工表：添加员工</span><br><span class="line">INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES </span><br><span class="line">(1001,&#x27;孙悟空&#x27;,4,1004,&#x27;2000-12-17&#x27;,&#x27;8000.00&#x27;,NULL,20),</span><br><span class="line">(1002,&#x27;卢俊义&#x27;,3,1006,&#x27;2001-02-20&#x27;,&#x27;16000.00&#x27;,&#x27;3000.00&#x27;,30),</span><br><span class="line">(1003,&#x27;林冲&#x27;,3,1006,&#x27;2001-02-22&#x27;,&#x27;12500.00&#x27;,&#x27;5000.00&#x27;,30),</span><br><span class="line">(1004,&#x27;唐僧&#x27;,2,1009,&#x27;2001-04-02&#x27;,&#x27;29750.00&#x27;,NULL,20),</span><br><span class="line">(1005,&#x27;李逵&#x27;,4,1006,&#x27;2001-09-28&#x27;,&#x27;12500.00&#x27;,&#x27;14000.00&#x27;,30),</span><br><span class="line">(1006,&#x27;宋江&#x27;,2,1009,&#x27;2001-05-01&#x27;,&#x27;28500.00&#x27;,NULL,30),</span><br><span class="line">(1007,&#x27;刘备&#x27;,2,1009,&#x27;2001-09-01&#x27;,&#x27;24500.00&#x27;,NULL,10),</span><br><span class="line">(1008,&#x27;猪八戒&#x27;,4,1004,&#x27;2007-04-19&#x27;,&#x27;30000.00&#x27;,NULL,20),</span><br><span class="line">(1009,&#x27;罗贯中&#x27;,1,NULL,&#x27;2001-11-17&#x27;,&#x27;50000.00&#x27;,NULL,10),</span><br><span class="line">(1010,&#x27;吴用&#x27;,3,1006,&#x27;2001-09-08&#x27;,&#x27;15000.00&#x27;,&#x27;0.00&#x27;,30),</span><br><span class="line">(1011,&#x27;沙僧&#x27;,4,1004,&#x27;2007-05-23&#x27;,&#x27;11000.00&#x27;,NULL,20),</span><br><span class="line">(1012,&#x27;李逵&#x27;,4,1006,&#x27;2001-12-03&#x27;,&#x27;9500.00&#x27;,NULL,30),</span><br><span class="line">(1013,&#x27;小白龙&#x27;,4,1004,&#x27;2001-12-03&#x27;,&#x27;30000.00&#x27;,NULL,20),</span><br><span class="line">(1014,&#x27;关羽&#x27;,4,1007,&#x27;2002-01-23&#x27;,&#x27;13000.00&#x27;,NULL,10);</span><br><span class="line"></span><br><span class="line"># 4.工资表：添加5个工资等级</span><br><span class="line">INSERT INTO salarygrade(grade,losalary,hisalary) VALUES </span><br><span class="line">(1,7000,12000),</span><br><span class="line">(2,12010,14000),</span><br><span class="line">(3,14010,20000),</span><br><span class="line">(4,20010,30000),</span><br><span class="line">(5,30010,99990);</span><br></pre></td></tr></table></figure></li><li><p>练习需求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</span><br><span class="line">SELECT </span><br><span class="line">t1.ename, -- 员工编号</span><br><span class="line">t1.id, -- 员工姓名</span><br><span class="line">t1.salary, -- 工资</span><br><span class="line">t2.jname, -- 职务名称</span><br><span class="line">t2.description -- 职务描述</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">job t2</span><br><span class="line">WHERE</span><br><span class="line">t1.job_id = t2.id;</span><br><span class="line"></span><br><span class="line"># 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</span><br><span class="line">SELECT </span><br><span class="line">t1.ename, -- 员工编号</span><br><span class="line">t1.id, -- 员工姓名</span><br><span class="line">t1.salary, -- 工资</span><br><span class="line">t2.jname, -- 职务名称</span><br><span class="line">t2.description, -- 职务描述</span><br><span class="line">t3.dname, -- 部门名称</span><br><span class="line">t3.loc -- 部门位置</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">job t2,</span><br><span class="line">dept t3</span><br><span class="line">WHERE</span><br><span class="line">t1.dept_id = t3.id AND t1.job_id = t2.id;</span><br><span class="line"></span><br><span class="line"># 3.查询员工姓名，工资，工资等级</span><br><span class="line">SELECT</span><br><span class="line">t1.ename, -- 员工姓名</span><br><span class="line">t1.salary, -- 工资</span><br><span class="line">t2.grade -- 工资等级</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">salarygrade t2</span><br><span class="line">WHERE</span><br><span class="line">t1.salary BETWEEN t2.losalary AND t2.hisalary;</span><br><span class="line"></span><br><span class="line"># 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</span><br><span class="line">SELECT</span><br><span class="line">t1.ename, -- 员工姓名</span><br><span class="line">t1.salary, -- 工资</span><br><span class="line">t2.jname, -- 职务名称</span><br><span class="line">t2.description, -- 职务描述</span><br><span class="line">t3.dname, -- 部门名称</span><br><span class="line">t3.loc, -- 部门位置</span><br><span class="line">t4.grade -- 工资等级</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">job t2,</span><br><span class="line">dept t3,</span><br><span class="line">salarygrade t4</span><br><span class="line">WHERE</span><br><span class="line">t1.dept_id = t3.id AND</span><br><span class="line">t1.job_id = t2.id AND</span><br><span class="line">t1.salary BETWEEN t4.losalary AND t4.hisalary;</span><br><span class="line"></span><br><span class="line"># 5.查询出部门编号、部门名称、部门位置、部门人数</span><br><span class="line">SELECT</span><br><span class="line">t1.id, -- 部门编号</span><br><span class="line">t1.dname, -- 部门名称</span><br><span class="line">t1.loc, -- 部门位置</span><br><span class="line">t2.total</span><br><span class="line">FROM</span><br><span class="line">dept t1,</span><br><span class="line">(SELECT dept_id, COUNT(id) total FROM emp GROUP BY dept_id) t2</span><br><span class="line">WHERE</span><br><span class="line">t1.id = t2.dept_id;</span><br><span class="line"></span><br><span class="line"># 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询</span><br><span class="line">SELECT</span><br><span class="line">t1.ename,</span><br><span class="line">t1.mgr,</span><br><span class="line">t2.id,</span><br><span class="line">t2.ename</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">emp t2</span><br><span class="line">WHERE</span><br><span class="line">t1.mgr = t2.id;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li><p><strong>概念</strong>：如果一个包含多个步骤的业务操作，被<strong>事务管理</strong>，那么这些操作要么同时成功，要么同时失败。</p></li><li><p> 操作：</p></li><li><p>开启事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br></pre></td></tr></table></figure></li><li><p>回滚：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure></li><li><p>提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color=red>事务的四大特征</font></strong></p><ul><li><strong>原子性</strong>: 是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li><strong>持久性</strong>: 当事务提交或回滚后，数据库会持久化的保存数据。</li><li><strong>隔离性</strong>: 多个事务之间。相互独立。</li><li><strong>一致性</strong>: 事务操作前后，数据总量不变。</li></ul></li><li><p><strong>事务的隔离级别</strong></p><ul><li>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</li><li><strong>存在问题</strong><ul><li><strong>脏读</strong>: 一个事务，读取到另一个事务中还没有提交的数据。</li><li><strong>不可重复读</strong>: 在同一个事务中，两次读取的数据不一样。</li><li><strong>幻读</strong>: 一个事务操作(DML)数据表中的所有记录，另一个事务添加了一条数据，则第一个事务查询不道自己的修改。</li></ul></li><li>隔离级别：从上到下<strong>安全性越来越高，效率越来越低</strong>。<ul><li><code>read uncommitted</code> : 读未提交。【脏读、不可重复读、幻读】</li><li><code>read committed</code>: 读已提交。【不可重复读、幻读】</li><li><code>repeatable read</code>: 可重复读。【幻读】</li><li><code>serializable</code>: 串行化。【无问题】</li></ul></li></ul></li></ul><hr>]]></content>
    
    
    <summary type="html">mysql复习。</summary>
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
</feed>
