<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Annoy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-18T13:58:08.776Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Annoy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【21/12/12】23_Java_序列化流</title>
    <link href="http://example.com/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/"/>
    <id>http://example.com/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/</id>
    <published>2021-12-18T13:55:04.606Z</published>
    <updated>2021-12-18T13:58:08.776Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h2><img src="/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/1639295964257.png" class="" width="1639295964257"><h3 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a><code>ObjectOutputStream</code></h3><p>对象的<code>序列化流</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo17_ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.ObjectOutputStream extends OutputStream</span></span><br><span class="line"><span class="comment">*   ObjectOutputStream:对象的序列化流</span></span><br><span class="line"><span class="comment">*   作用: 把对象以流的方式写入到文件中保存。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       ObjectOutputStream(OutputStream out) 创建指定写入OutputStream的ObjectOutputStream</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           OutputStream out: 字节输出流</span></span><br><span class="line"><span class="comment">*       特有的成员方法：</span></span><br><span class="line"><span class="comment">*           void writeObject(Object obj) 将指定的对象写入ObjectOutputStream</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建一个ObjectOutputStream对象，构造方法中传递字节输出流。</span></span><br><span class="line"><span class="comment">*       2. 使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中。</span></span><br><span class="line"><span class="comment">*       3. 释放资源</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_ObjectOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        write_person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_person</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个ObjectOutputStream对象，构造方法中传递字节输出流。</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo17_ObjectStream\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 2. 使用ObjectOutputStream对象中的方法writeObject,把对象写入到文件中。</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;小美女&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo17_ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   序列化和反序列化的时候，会抛出NotSerializableException没有序列化异常。</span></span><br><span class="line"><span class="comment">*   类通过实现java.io.Serializable接口启用序列化功能。</span></span><br><span class="line"><span class="comment">*   未实现该接口的类将无法使其任何状态序列化或反序列化。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   Serializable接口称为标记接口</span></span><br><span class="line"><span class="comment">*       要实现序列化和反序列化的时候，就会检测类上是否有这个标记。</span></span><br><span class="line"><span class="comment">*       有：进行序列化和反序列化。</span></span><br><span class="line"><span class="comment">*       没有：抛出NotSerializableException没有序列化异常。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>序列化结果：</p><img src="/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/1639299515522.png" class="" width="1639299515522"><hr><h3 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a><code>ObjectInputStream</code></h3><p>对象的<code>反序列化流</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo17_ObjectStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.ObjectInputStream extends InputStream</span></span><br><span class="line"><span class="comment">*   ObjectInputStream:对象的反序列化流</span></span><br><span class="line"><span class="comment">*   作用：把文件中保存的对象，以流的方式读取出来并使用。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       ObjectInputStream(InputStream in) 创建从指定InputStream读取的ObjectInputStream.</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           InputStream in 字节输入流</span></span><br><span class="line"><span class="comment">*   特有的成员方法:</span></span><br><span class="line"><span class="comment">*       Object readObject() 从ObjectInputStream读取对象。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建ObjectInputStream对象，构造方法中传递字节输入流。</span></span><br><span class="line"><span class="comment">*       2. 使用ObjectInputStream对象方法中的readObject读取保存对象的文件。</span></span><br><span class="line"><span class="comment">*       3. 释放资源</span></span><br><span class="line"><span class="comment">*       4. 使用读取出的对象（打印）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_ObjectInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        person_read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">person_read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建ObjectInputStream对象，构造方法中传递字节输入流。</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo17_ObjectStream\\person.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 2. 使用ObjectInputStream对象方法中的readObject读取保存对象的文件。</span></span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   readObject方法声明抛出异常，ClassNotFoundException(class文件找不到异常)</span></span><br><span class="line"><span class="comment">        *   当不存在对象的class文件时，抛出异常。</span></span><br><span class="line"><span class="comment">        *   反序列化的前提：</span></span><br><span class="line"><span class="comment">        *       1. 类必须实现Serializable.</span></span><br><span class="line"><span class="comment">        *       2. 必须存在类对应的class文件。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="comment">// 4. 使用读取出的对象（打印）</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反序列化结果：</p><img src="/2021/12/18/24_%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/1639299599991.png" class="" width="1639299599991"><p><strong>transient关键字：瞬态关键字</strong></p><p>被序列化的都是对象。被transient修饰成员变量，不能被序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure><hr><p><code>InvalidClassException</code><strong>异常</strong></p><p><code>.java</code>文件编译成<code>.class</code>文件后，如果类进行序列化，则会生成一个序列化编号。</p><p>如果<code>.java</code>文件在编译后进行修改，则其再编译时，序列号会发生变化。再对该类进行反序列化时，会出现<code>InvalidClassException</code> 异常。（两次序列号判断不一致）</p><p><strong>解决方案：</strong></p><p>手动给类添加一个序列号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可序列化类可以通过声明名为&quot;serialVersionUID&quot;的字段，(该字段必须是静态的(static)、最终的(final)的long型字段)显式声明其自己的serialVersionUID</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> seriaVersionUID = <span class="number">42L</span>;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中IO流操作相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/11】22_Java_缓冲流与转换流</title>
    <link href="http://example.com/2021/12/18/23_%E7%BC%93%E5%86%B2%E6%B5%81%E5%92%8C%E8%BD%AC%E6%8D%A2%E6%B5%81/"/>
    <id>http://example.com/2021/12/18/23_%E7%BC%93%E5%86%B2%E6%B5%81%E5%92%8C%E8%BD%AC%E6%8D%A2%E6%B5%81/</id>
    <published>2021-12-18T13:51:07.840Z</published>
    <updated>2021-12-18T13:54:33.256Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="缓冲流和转换流"><a href="#缓冲流和转换流" class="headerlink" title="缓冲流和转换流"></a>缓冲流和转换流</h2><h3 id="缓冲流-Buffered"><a href="#缓冲流-Buffered" class="headerlink" title="缓冲流[Buffered]"></a>缓冲流[Buffered]</h3><p>给基本的字节输入流增加一个缓冲区(数组)提高基本的字节输入流的读取效率。</p><p><code>BufferedInputStream(new FileInputStream())</code></p><img src="/2021/12/18/23_%E7%BC%93%E5%86%B2%E6%B5%81%E5%92%8C%E8%BD%AC%E6%8D%A2%E6%B5%81/1639127602631.png" class="" width="1639127602631"><h4 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a><code>BufferedInputStream</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo15_Buffered;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   java.io.BufferedInputStream extends InputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   继承自父类的方法：</span></span><br><span class="line"><span class="comment"> *       int read() 从输入流中读取数据的下一个字节。</span></span><br><span class="line"><span class="comment"> *       int read(byte[] b) 从输入流中读取一定数量的字节，并存储在缓冲区数组b中。</span></span><br><span class="line"><span class="comment"> *       void close() 关闭此输入流并释放与该流关联的所有系统资源。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   构造方法：</span></span><br><span class="line"><span class="comment"> *       BufferedOutputStream(InputStream in) 创建一个BufferedOutputStream并保存参数即输入流in，供将来使用。</span></span><br><span class="line"><span class="comment"> *       BufferedOutputStream(InputStream in, int size)创建一个指定缓冲区大小的BufferedOutputStream并保存参数即输入流in，供将来使用。</span></span><br><span class="line"><span class="comment"> *       参数：读取文件的数据源。</span></span><br><span class="line"><span class="comment"> *           InputStream in:字节输入流。</span></span><br><span class="line"><span class="comment"> *           int size: 指定缓冲流内部缓冲n区的大小，不指定则默认。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   使用步骤(重点)：</span></span><br><span class="line"><span class="comment"> *       1.创建一个FileInputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"><span class="comment"> *       2.创建BufferedInputStream对象，构造方法中传递FileInputStream对象对象，提高FileInputStream对象读取效率。</span></span><br><span class="line"><span class="comment"> *       3.使用BufferedInputStream对象中的方法read,读取文件。</span></span><br><span class="line"><span class="comment"> *       4.释放资源(会先调用flush方法刷新数据，则第四步可省略)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BufferedInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo15_Buffered\\a.txt&quot;</span>);</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line"><span class="comment">//        int len = 0;</span></span><br><span class="line"><span class="comment">//        while ((len = bis.read())!= -1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(len);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len2 = fis.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a><code>BufferedOutputStream</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo15_Buffered;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.BufferedOutputStream extends OutputStream</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   继承自父类的共性成员方法:</span></span><br><span class="line"><span class="comment">*       - public void close(): 关闭该输出流并释放与该流相关联的任何系统资源。</span></span><br><span class="line"><span class="comment">*       - public void flush(): 刷新此输出流，并强制任何缓冲的输出字节被写出。</span></span><br><span class="line"><span class="comment">*       - public void write(byte[] b): 将b.length字节从指定的字节数组写入此输出流。</span></span><br><span class="line"><span class="comment">*       - public void write(byte[] b, int off, int len): 从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。</span></span><br><span class="line"><span class="comment">*       - public abstract void write(int b): 将指定的字节输出流。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       BufferedOutputStream(OutputStream out) 创建一个新的缓冲输出流，以将数据写入指定的底层输出流。</span></span><br><span class="line"><span class="comment">*       BufferedOutputStream(OutputStream out, int size)创建一个新的缓冲输出流，以将指定缓冲区大小的数据写入指定的底层输出流。</span></span><br><span class="line"><span class="comment">*       参数：写入的目的地。</span></span><br><span class="line"><span class="comment">*               OutputStream out: 字节输出流。</span></span><br><span class="line"><span class="comment">*               int size: 指定缓冲流内部缓冲区的大小，不指定则默认。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用步骤(重点)：</span></span><br><span class="line"><span class="comment">*       1.创建一个FileOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line"><span class="comment">*       2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象对象，提高FileOutputStream对象效率</span></span><br><span class="line"><span class="comment">*       3.使用BufferedOutputStream对象中的方法write,将数据写入到内部缓冲区中。</span></span><br><span class="line"><span class="comment">*       4.使用BufferedOutputStream对象中的方法flush,把内部缓冲区中的数据，刷新到文件中。</span></span><br><span class="line"><span class="comment">*       5.释放资源(会先调用flush方法刷新数据，则第四步可省略)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BufferedOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建一个BufferedOutputStream对象，构造方法中绑定要输出的目的地。</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo15_Buffered\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象对象，提高FileOutputStream对象效率</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">        <span class="comment">// 3.使用BufferedOutputStream对象中的方法write,将数据写入到内部缓冲区中。</span></span><br><span class="line">        bos.write(<span class="string">&quot;写入数据&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 4.使用BufferedOutputStream对象中的方法flush,把内部缓冲区中的数据，刷新到文件中。</span></span><br><span class="line">        bos.flush();</span><br><span class="line">        <span class="comment">// 5.释放资源(会先调用flush方法刷新数据，则第四步可省略)</span></span><br><span class="line">        bos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title=" BufferedReader"></a><code> BufferedReader</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo15_Buffered;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*    java.io.BufferedReader extends Reader</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*    继承自父类的方法：</span></span><br><span class="line"><span class="comment">*       int read() 读取单个字符并返回</span></span><br><span class="line"><span class="comment">*       int read(char[] cbuf) 一次读取多个字符，将字符读取数组。</span></span><br><span class="line"><span class="comment">*       void close() 关闭该流并释放与之相关的所有资源。</span></span><br><span class="line"><span class="comment">*    构造方法：</span></span><br><span class="line"><span class="comment">*       BufferedReader(Reader in) 创建一个使用默认大小输入缓冲区的缓冲字符输入流。</span></span><br><span class="line"><span class="comment">*       BufferedReader(Reader in， int sz) 创建一个使用指定大小输入缓冲区的缓冲字符输入流。</span></span><br><span class="line"><span class="comment">*   参数：</span></span><br><span class="line"><span class="comment">*       Reader in 字符输入流</span></span><br><span class="line"><span class="comment">*           可以传递给FileReader,缓冲流会给FileReader增加一个缓冲区，提高FileReader的读取效率。</span></span><br><span class="line"><span class="comment">*   特有的成员方法：</span></span><br><span class="line"><span class="comment">*       String readLine() 读取一个文本行。读取一行数据。</span></span><br><span class="line"><span class="comment">*           行的终止符号：通过以下字符之一即可认为某行已经终止。换行(&#x27;\n&#x27;)、回车(&#x27;\r&#x27;)或者回车之后直接接着换行(\r\n).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04BufferedReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo15_Buffered\\buf.txt&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a><code>BufferedWriter</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo15_Buffered;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.BufferedWriter extends Writer</span></span><br><span class="line"><span class="comment">*   BufferedWriter: 字符缓冲输出流</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   共性的方法：</span></span><br><span class="line"><span class="comment">*       - void write(int c) 写入单个字符。</span></span><br><span class="line"><span class="comment">*       - void write(char[] cbuf)写入字符数组</span></span><br><span class="line"><span class="comment">*       - abstract void write(char[] cbuf, int off, int len)写入字符数组的一部分，off是数组的开始索引，len写的是字符个数</span></span><br><span class="line"><span class="comment">*       - void write(String str)写入字符串</span></span><br><span class="line"><span class="comment">*       - void write(String str, int off, int len)写入字符串的某一部分，off字符串的开始索引，len写的字符个数</span></span><br><span class="line"><span class="comment">*       - void flush()刷新该流的缓冲</span></span><br><span class="line"><span class="comment">*       - void close()关闭该流，但是要先刷新它</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       BufferedWriter(Writer out) 创建一个使用默认大小缓冲区的缓冲字符输出流。</span></span><br><span class="line"><span class="comment">*       BufferedWriter(Writer out, int sz) 创建一个使用给定大小缓冲区的新缓冲字符输出流。</span></span><br><span class="line"><span class="comment">*   特有的成员方法：</span></span><br><span class="line"><span class="comment">*       void newLine() 写入一个行分隔符。会根据操作系统获取不同的行分隔符。</span></span><br><span class="line"><span class="comment">*       换行：换行符号</span></span><br><span class="line"><span class="comment">*       windows: \r\n</span></span><br><span class="line"><span class="comment">*       linux:/n</span></span><br><span class="line"><span class="comment">*       mac:/r</span></span><br><span class="line"><span class="comment">*   使用步骤:</span></span><br><span class="line"><span class="comment">*       1.创建字符缓冲输出流对象，构造方法中传递字符输出流。</span></span><br><span class="line"><span class="comment">*       2.调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中。</span></span><br><span class="line"><span class="comment">*       3.调用flush，将内存缓冲区中的数据刷新到文件。</span></span><br><span class="line"><span class="comment">*       4.释放资源</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03BufferedWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建字符缓冲输出流对象，构造方法中传递字符输出流。</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo15_Buffered\\buf.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;这是一个测试&quot;</span>);</span><br><span class="line"><span class="comment">//            bw.write(&quot;\r\n&quot;);</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.调用flush，将内存缓冲区中的数据刷新到文件。</span></span><br><span class="line">        bw.flush();</span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><p><code>java.io.InputStreamReader</code> 是Reader的子类，是从<strong>字节流到字符流</strong>的桥梁。它读取字节，并使用<strong>指定的字符集</strong>将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><p><code>java.io.OutputStreamWriter</code> 是Writer的子类，是从<strong>字符流到字节流</strong>的桥梁。读取字符，并使用指定得字符集将其解码为字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo16_ReverseStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.io.OutputStreamWriter extends Writer</span></span><br><span class="line"><span class="comment">*   OutputStreamWriter: 字符流通向字节流的桥梁，可以使用指定得charset将要写入流中的字符编码成字节。(编码：把看得懂的转化成看不懂的)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   继承来自父类的共性成员方法：</span></span><br><span class="line"><span class="comment">*       - void write(int c) 写入单个字符。</span></span><br><span class="line"><span class="comment">*       - void write(char[] cbuf)写入字符数组</span></span><br><span class="line"><span class="comment">*       - abstract void write(char[] cbuf, int off, int len)写入字符数组的一部分，off是数组的开始索引，len写的是字符个数</span></span><br><span class="line"><span class="comment">*       - void write(String str)写入字符串</span></span><br><span class="line"><span class="comment">*       - void write(String str, int off, int len)写入字符串的某一部分，off字符串的开始索引，len写的字符个数</span></span><br><span class="line"><span class="comment">*       - void flush()刷新该流的缓冲</span></span><br><span class="line"><span class="comment">*       - void close()关闭该流，但是要先刷新它</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   构造方法：</span></span><br><span class="line"><span class="comment">*       OutputStreamWriter(OutputStream out) 创建使用默认字符编码的 OutputStreamWriter</span></span><br><span class="line"><span class="comment">*       OutputStreamWriter(OutputStream out， String charsetName) 创建使用指定字符集的OutputStreamWriter.默认UTF-8</span></span><br><span class="line"><span class="comment">*       参数：</span></span><br><span class="line"><span class="comment">*           OutputStream out: 字节输出流，可以用来写转换之后的字节到文件中。</span></span><br><span class="line"><span class="comment">*           String charsetName: 指定编码表名称，不区分大小写。</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建OutputStreamWriter对象，构造方法中传递字节输出流和指定的编码表名称。</span></span><br><span class="line"><span class="comment">*       2. 使用OutputStreamWriter对象中的方法write，把字符转换成字节存储在缓冲区中。</span></span><br><span class="line"><span class="comment">*       3. 使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中。(使用字节流写字节的过程)</span></span><br><span class="line"><span class="comment">*       4. 释放资源</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01OutputStreamWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        write_utf_8();</span><br><span class="line">        write_gbk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_gbk</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建OutputStreamWriter对象，构造方法中传递字节输出流和指定的编码表名称。</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo16_ReverseStream\\gbk.txt&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 使用OutputStreamWriter对象中的方法write，把字符转换成字节存储在缓冲区中。</span></span><br><span class="line">        osw.write(<span class="string">&quot;你好呀&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中。(使用字节流写字节的过程)</span></span><br><span class="line">        osw.flush();</span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_utf_8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建OutputStreamWriter对象，构造方法中传递字节输出流和指定的编码表名称。</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo16_ReverseStream\\utf_8.txt&quot;</span>),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 使用OutputStreamWriter对象中的方法write，把字符转换成字节存储在缓冲区中。</span></span><br><span class="line">        osw.write(<span class="string">&quot;你好呀&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 使用OutputStreamWriter对象中的方法flush,把内存缓冲区中的字节刷新到文件中。(使用字节流写字节的过程)</span></span><br><span class="line">        osw.flush();</span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中缓冲流(Buffered)和转换流(InputStrea/OutputStream)相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/10】21_Java_Properties</title>
    <link href="http://example.com/2021/12/18/22_Properties/"/>
    <id>http://example.com/2021/12/18/22_Properties/</id>
    <published>2021-12-18T13:47:12.506Z</published>
    <updated>2021-12-18T13:50:51.792Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Properties属性类"><a href="#Properties属性类" class="headerlink" title="Properties属性类"></a>Properties属性类</h2><h3 id="Properties集合"><a href="#Properties集合" class="headerlink" title="Properties集合"></a>Properties集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.util.Properties集合 extends Hashtable&lt;k,v&gt; implements Map&lt;k,v&gt;</span></span><br><span class="line"><span class="comment">*   Properties类表示一个持久的属性集。Properties 可保存在流中，或从流中加载。</span></span><br><span class="line"><span class="comment">*   Properties集合是一个唯一和IO流相结合的集合。</span></span><br><span class="line"><span class="comment">*       (1)store方法，把集合中的临时数据，持久化写入到硬盘存储。</span></span><br><span class="line"><span class="comment">*       (2)load方法，把硬盘中保存的文件(键值对)，读取到集合中使用。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   属性列表中每个键与其对应值都是一个字符串。</span></span><br><span class="line"><span class="comment">*       Properties集合是一个双列集合，key和value默认为字符串。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><code>store</code>方法的Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1 创建Properties集合对象，添加数据</span></span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    prop.setProperty(<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;182&quot;</span>);</span><br><span class="line">    prop.setProperty(<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;160&quot;</span>);</span><br><span class="line">    prop.setProperty(<span class="string">&quot;Golang&quot;</span>,<span class="string">&quot;175&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 创建字节输出流/字符输出流，构造方法中绑定要输出的目的地。</span></span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo14_Properties\\prop.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</span></span><br><span class="line">    <span class="comment">// 字符流可以写中文，字节流不能写中文。</span></span><br><span class="line">    prop.store(fw,<span class="string">&quot;Sava Data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 释放资源</span></span><br><span class="line">    fw.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/12/18/22_Properties/1639126443616.png" class="" width="1639126443616"><p><code>load</code>方法的Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   使用Properties集合中的方法load,把硬盘中保存的文件(键值对),读取到集合中使用</span></span><br><span class="line"><span class="comment">    *   void load(InputStream inStream)</span></span><br><span class="line"><span class="comment">    *   void load(Reader reader)</span></span><br><span class="line"><span class="comment">    *   参数：</span></span><br><span class="line"><span class="comment">    *       InputStream inStream:字节输入流，不能读取含有中文的键值对</span></span><br><span class="line"><span class="comment">    *       Reader reader：字符输入流，可以读取含有中文的键值对。</span></span><br><span class="line"><span class="comment">    *   使用步骤：</span></span><br><span class="line"><span class="comment">    *       1.创建Properties集合对象。</span></span><br><span class="line"><span class="comment">    *       2.使用Properties集合对象中的方法load读取保存键值对的文件.</span></span><br><span class="line"><span class="comment">    *       3.遍历Properties集合</span></span><br><span class="line"><span class="comment">    *   注意：</span></span><br><span class="line"><span class="comment">    *       1.存储键值对的文件中，键与值默认的连接符号可以是=，空格（其他符号）</span></span><br><span class="line"><span class="comment">    *       2.存储键值对的文件中，可以使用#进行注释，被注释的键值对不会被读取</span></span><br><span class="line"><span class="comment">    *       3.存在键值对的文件中，键与值默认都是字符串，不用再加引号。</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    prop.load(<span class="keyword">new</span> FileReader(<span class="string">&quot;G:\\1_JAVA\\java\\demo\\basic-code\\day1-code\\src\\com\\fanpeng\\day06\\Demo14_Properties\\prop.txt&quot;</span>));</span><br><span class="line">    Set&lt;String&gt; set = prop.stringPropertyNames();</span><br><span class="line">    <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">        String value = prop.getProperty(key);</span><br><span class="line">        System.out.println(key + <span class="string">&#x27;=&#x27;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中Properties属性类相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/08】19_Java_File</title>
    <link href="http://example.com/2021/12/18/19_File%E7%B1%BB/"/>
    <id>http://example.com/2021/12/18/19_File%E7%B1%BB/</id>
    <published>2021-12-18T13:30:41.581Z</published>
    <updated>2021-12-18T13:42:25.688Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p><code>java.io.File</code>类：主要用于文件和目录的创建、查找和删除等操作。</p><hr><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>(1) 绝对路径: 完整的路径。</p><p>​    以盘符(c:, D:)开始的路径。</p><p>(2) 相对路径: 简化的路径。</p><p>​    相对指的是相对于当前项目的根目录。如果使用当前项目的根目录，可以简化书写。</p><p>注意：</p><ol><li>路径不区分大小写。</li><li>路径中的文件名称分隔符windows使用反斜杠，反斜杠是转义字符，两个反斜杠代表一个普通的反斜杠。</li></ol><hr><h3 id="File类的方法"><a href="#File类的方法" class="headerlink" title="File类的方法"></a>File类的方法</h3><h4 id="File类获取功能的方法"><a href="#File类获取功能的方法" class="headerlink" title="File类获取功能的方法"></a>File类获取功能的方法</h4><p><code>public String getAbsolutePath()</code>: 返回此File的绝对路径名字符串</p><p><code>public String getPath()</code>: 将此File转换为路径名字符串</p><p><code>public String getName()</code>: 返回此文件或是目录的名称</p><p><code>public long length()</code>: 返回由此File表示的文件的大小(以字节为单位)。如果路径文件不存在，length方法返回的是0.</p><h4 id="File类判断功能的方法："><a href="#File类判断功能的方法：" class="headerlink" title="File类判断功能的方法："></a>File类判断功能的方法：</h4><p><code>public boolean exists()</code>: 此File表示的文件或目录是否实际存在</p><p><code>public boolean isDirectory()</code>: 此File表示的是否是目录</p><p><code>public boolean isFile()</code>: 此File表示的是否是文件</p><h4 id="File类创建删除功能的方法："><a href="#File类创建删除功能的方法：" class="headerlink" title="File类创建删除功能的方法："></a>File类创建删除功能的方法：</h4><p><code>public boolean createNewFile()</code>: 当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。</p><p><code>public boolean delete()</code>: 删除由此File表示的文件或目录。文件夹中有内容，不删除返回false。</p><p><code>public boolean mkdir()</code>: 创建由此File表示的目录，只能创建单级文件夹。</p><p><code>public boolean mkdirs()</code>: 创建由此File表示的目录，包括任何必需但不存在的父目录。可创建单级，也可创建多级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   注意：</span></span><br><span class="line"><span class="comment">*       1. 创建文件/文件夹的路径一定要是存在的，否则会抛出异常。</span></span><br><span class="line"><span class="comment">*       2. 文件/文件夹不存在，创建文件/文件夹，返回true.</span></span><br><span class="line"><span class="comment">*       3. 文件/文件夹存在，不创建，返回false.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="File类遍历-文件夹-目录功能："><a href="#File类遍历-文件夹-目录功能：" class="headerlink" title="File类遍历(文件夹)目录功能："></a>File类遍历(文件夹)目录功能：</h4><p><code>public String[] list()</code>:</p><p>(1) 返回一个String数组，表示该file目录中的所有子文件或目录。</p><p>(2) 返回String数组。</p><p>(3) 遍历构造方法中给出的目录，会获取目录中所有文件/文件夹名称，然后存入到一个String类型的数组中。</p><p><code>public File[] listFile()</code>: </p><p>(1) 返回一个File数组，表示该File目录中的所有子文件或目录。</p><p>(2) 返回一个File数组。</p><p>(3) 遍历构造方法中给出的目录，会获取目录中所有文件/文件夹名称，然后封装为File对象，多个File对象存储到File数组中。</p><hr>]]></content>
    
    
    <summary type="html">Java中File类知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/08】18_Java_Lambda(函数式编程)</title>
    <link href="http://example.com/2021/12/18/18_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2021/12/18/18_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2021-12-18T13:28:53.866Z</published>
    <updated>2021-12-18T13:30:34.064Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><h4 id="函数式编程思想"><a href="#函数式编程思想" class="headerlink" title="函数式编程思想"></a>函数式编程思想</h4><p>(1) 面向对象的思想：强调“必须通过对线的形式来做事情”。做一件事情，找一个能解决这个事情的对象，调用这个对象的方法，完成事情。</p><p>(2) 函数式编程的思想：只要能获取到结果，谁去做的，怎么做的都不重要，重视的是结果，不重视过程。</p><hr><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><p>用简单的代码编写方式实现程序功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo10_Lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   Lambda表达式的标准格式：</span></span><br><span class="line"><span class="comment">*       由三部分组成：</span></span><br><span class="line"><span class="comment">*           (1)一些参数</span></span><br><span class="line"><span class="comment">*           (2)一个箭头</span></span><br><span class="line"><span class="comment">*           (3)一段代码</span></span><br><span class="line"><span class="comment">*       格式：</span></span><br><span class="line"><span class="comment">*           (参数列表) -&gt; &#123;一些重写方法的代码&#125;;</span></span><br><span class="line"><span class="comment">*       解释：</span></span><br><span class="line"><span class="comment">*           ():接口中抽象方法的参数列表，没有参数就空着；有参数就写出参数，多个参数用逗号隔开。</span></span><br><span class="line"><span class="comment">*           -&gt;:传递的意思，将参数传递给方法体。</span></span><br><span class="line"><span class="comment">*           &#123;&#125;:重写接口的抽象方法的方法体。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用匿名内部类实现多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程被创建！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用lambda表达式实现相同的功能</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程被创建！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        ).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo10_Lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数无返回值的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02_LambdaParameter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用数组存储多个Person对象</span></span><br><span class="line">        Person[] arr = &#123;</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>,<span class="number">20</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;Wolf&quot;</span>,<span class="number">18</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;Skin&quot;</span>,<span class="number">37</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对数组中的成员通过年龄大小进行排序</span></span><br><span class="line"><span class="comment">//        Arrays.sort(arr, new Comparator&lt;Person&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(Person o1, Person o2) &#123;</span></span><br><span class="line"><span class="comment">//                return o1.getAge()-o2.getAge();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Lambda表达式</span></span><br><span class="line">        Arrays.sort(arr, (Person o1,Person o2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 优化Lambda表达式(参数类型 return 大括号一同省略)</span></span><br><span class="line">        Arrays.sort(arr, (o1,o2) -&gt; o1.getAge()-o2.getAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印输出结果</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : arr) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Lambda使用前提</strong></p><ol><li>Lambda必须有接口，并且要求接口中<strong>有且仅有一个抽象方法</strong>。</li><li>使用Lambda必须具有<strong>上下文推断</strong>。</li></ol><hr>]]></content>
    
    
    <summary type="html">Java中函数式编程知识点。(Lambda)</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/07】17_Java_Thread</title>
    <link href="http://example.com/2021/12/18/17_%E7%BA%BF%E7%A8%8B/"/>
    <id>http://example.com/2021/12/18/17_%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-12-18T13:15:29.461Z</published>
    <updated>2021-12-18T13:28:01.230Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h3><p>并发：指两个或多个事件在同一时间段内发生。</p><p>【单CPU】</p><img src="/2021/12/18/17_%E7%BA%BF%E7%A8%8B/1638498784162.png" class="" width="1638498784162"><p>并行：指两个或多个事件在同一时刻发生。(同时发生) — 速度快</p><p>【多CPU】</p><img src="/2021/12/18/17_%E7%BA%BF%E7%A8%8B/1638498816822.png" class="" width="1638498816822"><hr><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p><strong>进程</strong>：进入到内存中的程序。</p><p>内存：所有的应用程序都需要进入到内存中才能执行，临时存储RAM。</p><p><strong>线程</strong>：线程是进程中的一个执行单元，负责当前进程中程序的执行。一个进程至少有一个线程。一个进程中可以有多个线程，这个应用称为多线程。</p><p>CPU：中央处理器，对数据进行计算，指挥电脑中的软件和硬件干活。</p><p>线程属于进程，是进程中的一个执行单元，负责程序的执行。</p><img src="/2021/12/18/17_%E7%BA%BF%E7%A8%8B/1638502593883.png" class="" width="1638502593883"><p><strong>线程调度</strong>：</p><ol><li>分时调度：所有线程轮流使用CPU。</li><li>抢占式调度：按照优先级，分配CPU。</li></ol><p><strong>主线程</strong></p><p>执行主方法(main)的线程。</p><p>单线程程序：Java程序中只有一个线程。执行从main方法开始，从上到下依次执行。</p><p><strong>JVM执行main方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   JVM执行main方法，main方法会进入到栈内存。</span></span><br><span class="line"><span class="comment">*   JVM会找操作系统开辟一条main方法通向cpu的执行路径。</span></span><br><span class="line"><span class="comment">*   cpu就可以通过这个路径执行main方法。</span></span><br><span class="line"><span class="comment">*   这个路径的名字就叫主线程。</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><hr><h4 id="创建多线程的方法"><a href="#创建多线程的方法" class="headerlink" title="创建多线程的方法"></a>创建多线程的方法</h4><p>方法1：<code>Thread</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   创建多线程的方法1：创建Thread类的子类。</span></span><br><span class="line"><span class="comment">*   java.lang.Thread类：描述线程的类，想要实现多线程程序，必须继承Thread类。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建一个Thread类的子类对象。</span></span><br><span class="line"><span class="comment">*       2. 在Thread类的子类中重写Thread类的run方法，设置线程任务。</span></span><br><span class="line"><span class="comment">*       3. 创建Thread类的子类对象。</span></span><br><span class="line"><span class="comment">*       4. 调用Thread类中的方法start，开启新的线程，执行run方法。</span></span><br><span class="line"><span class="comment">*           void strat() 使得该线程开始执行; JVM调用线程的run方法。</span></span><br><span class="line"><span class="comment">*           结果：两个线程并发执行。</span></span><br><span class="line"><span class="comment">*   java程序属于抢占式调度，哪个线程优先级高，先执行哪个线程；同一优先级，随机执行。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3. 创建Thread类的子类对象。</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">// 4. 调用Thread类中的方法start，开启新的线程，执行run方法。</span></span><br><span class="line">        mt.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyThread.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个Thread类的子类对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">// 2. 在Thread类的子类中重写Thread类的run方法，设置线程任务。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：<code>Runnable</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo05Thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   创建多线程的第二种方式：实现Runnable接口。</span></span><br><span class="line"><span class="comment">*   java.lang.Runnable</span></span><br><span class="line"><span class="comment">*           Runnable接口应当由打算通过某一线程执行其实例的类来实现。类必须定义一个run的无参构造方法。</span></span><br><span class="line"><span class="comment">*   java.lang.Thread类的构造方法：</span></span><br><span class="line"><span class="comment">*           Thread(Runnable target) 分配新的Thread对象。</span></span><br><span class="line"><span class="comment">*           Thread(Runnable target, String name) 分配新的Thread对象。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1. 创建一个Runnable接口的实现类。</span></span><br><span class="line"><span class="comment">*       2. 在实现类中重写Runnable接口的run方法，设置线程任务。</span></span><br><span class="line"><span class="comment">*       3. 创建一个Runnable接口的实现类对象。</span></span><br><span class="line"><span class="comment">*       4. 创建Thread类对象，构造方法中传递Runnable接口的实现类对象。</span></span><br><span class="line"><span class="comment">*       5. 调用Thread类中的start方法，开启新线程执行run方法。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   实现Runnable接口创建多线程程序的好处：</span></span><br><span class="line"><span class="comment">*       1. 避免了单继承的局限性</span></span><br><span class="line"><span class="comment">*           一个类只能继承一个类，类继承了Thread就不能再继承别的类。</span></span><br><span class="line"><span class="comment">*           实现了Runnable接口，还可以继承其他的类，实现了其他的接口。</span></span><br><span class="line"><span class="comment">*       2. 增强了程序的扩展性，降低了程序的耦合性。</span></span><br><span class="line"><span class="comment">*           实现Runnable接口的方式，把设置线程的任务与开始新线程进行分离(解耦)。</span></span><br><span class="line"><span class="comment">*           实现类中，重写了run方法：用来设置线程任务。</span></span><br><span class="line"><span class="comment">*           创建Thread类对象，调用start方法：用来开启新线程。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3. 创建一个Runnable接口的实现类对象。</span></span><br><span class="line">        MyThread01 run = <span class="keyword">new</span> MyThread01();</span><br><span class="line">        <span class="comment">// 4. 创建Thread类对象，构造方法中传递Runnable接口的实现类对象。</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        <span class="comment">// 5. 调用Thread类中的start方法，开启新线程执行run方法。</span></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MyThread01.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo05Thread;</span><br><span class="line"><span class="comment">// 1. 创建一个Runnable接口的实现类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread01</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 在实现类中重写Runnable接口的run方法，设置线程任务。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>匿名内部类实现线程的创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo05Thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   匿名内部类方式实现线程的创建。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   匿名：没有名字</span></span><br><span class="line"><span class="comment">*   内部类：写在其他类内部的类。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   匿名内部类作用：简化代码</span></span><br><span class="line"><span class="comment">*       把子类继承父类，重写父类的方法，创建子类对象一步完成。</span></span><br><span class="line"><span class="comment">*       把实现类实现类接口，重写接口中的方法，创建实现类对象一步完成。</span></span><br><span class="line"><span class="comment">*   匿名内部类的产物：子类/实现类对象，而这个类没有名字。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   格式：</span></span><br><span class="line"><span class="comment">*       new 父类/接口()&#123;</span></span><br><span class="line"><span class="comment">*           重复父类/接口中的方法</span></span><br><span class="line"><span class="comment">*       &#125;;</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04InnerClassThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程的父类Thread</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="comment">// 重写run方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;匿名内部类调试&quot;</span>+<span class="string">&quot;---&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程的接口Runnable</span></span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;匿名内部类调试2&quot;</span>+<span class="string">&quot;---&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再简化</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;匿名内部类调试3&quot;</span>+<span class="string">&quot;---&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>多线程访问了共享的数据，会产生线程安全问题。</p><h4 id="解决线程安全—同步机制"><a href="#解决线程安全—同步机制" class="headerlink" title="解决线程安全—同步机制"></a>解决线程安全—同步机制</h4><p>三种方式：</p><ol><li><p>同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   解决线程安全问题的一种方法：使用同步代码块。</span></span><br><span class="line"><span class="comment">*   格式：</span></span><br><span class="line"><span class="comment">*       synchronized(锁对象) &#123;</span></span><br><span class="line"><span class="comment">*           可能出现线程安全问题的代码。</span></span><br><span class="line"><span class="comment">*       &#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   注意：</span></span><br><span class="line"><span class="comment">*       1. 通过代码块中的锁对象，可以使用任意的对象。</span></span><br><span class="line"><span class="comment">*       2. 必须保证多个线程使用的锁对象唯一。</span></span><br><span class="line"><span class="comment">*       3. 锁对象的作用：把同步代码块锁住，只有一个线程在同步代码中执行。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个票源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 创建一个锁对象</span></span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 循环卖票</span></span><br><span class="line">        <span class="keyword">while</span> (ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="comment">// ------------------同步代码块------------------------</span></span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="comment">// 判断是否有余票</span></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 存在票，ticket--</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在卖&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure></li><li><p>同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决线程安全问题的第二个方法：定义一个同步方法，同步方法也会把方法内部的代码锁住。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   使用步骤:</span></span><br><span class="line"><span class="comment">*       1. 把访问了共享数据的代码抽取出来，放到方法中。</span></span><br><span class="line"><span class="comment">*       2. 在方法上添加synchronized修饰符。</span></span><br><span class="line"><span class="comment">*   格式：</span></span><br><span class="line"><span class="comment">*   修饰符 synchronized 返回值类型 方法名(参数列表) &#123; //方法体&#125;</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">payTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否有余票</span></span><br><span class="line">    <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 存在票，ticket--</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在卖&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">        ticket--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>锁机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   解决线程安全问题的三种方法：使用锁机制(Lock锁)。</span></span><br><span class="line"><span class="comment">*   Lock锁提供了比synchronized方法和语句可获得的更广泛的锁定操作。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   Lock锁中的方法：</span></span><br><span class="line"><span class="comment">*       void lock()获取锁</span></span><br><span class="line"><span class="comment">*       void unlock()释放锁</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   使用步骤：</span></span><br><span class="line"><span class="comment">*       1. 在成员位置创建一个ReentrantLock对象。</span></span><br><span class="line"><span class="comment">*       2. 在可能发生线程安全问题的代码前调用Lock接口中的方法lock()获取锁。</span></span><br><span class="line"><span class="comment">*       3. 在可能发生线程安全问题的代码后调用Lock接口中的方法unlock()释放锁。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个票源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 1. 在成员位置创建一个ReentrantLock对象。</span></span><br><span class="line">    Lock l = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 循环卖票</span></span><br><span class="line">        <span class="keyword">while</span> (ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 2. 在可能发生线程安全问题的代码前调用Lock接口中的方法lock()获取锁。</span></span><br><span class="line">            l.lock();</span><br><span class="line">            <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    <span class="comment">// 存在票，ticket--</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在卖&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 3. 在可能发生线程安全问题的代码后调用Lock接口中的方法unlock()释放锁。</span></span><br><span class="line">                    l.unlock(); <span class="comment">// 无论是否出现异常，都会将锁释放</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>同步技术的原理</strong>：</p><p>使用一个锁对象，也叫同步锁、对象锁，或是对象监视器。</p><p><strong>同步中的线程，没有执行完毕不会释放锁，同步外的线程没有锁进不去同步。</strong></p><p>同步保证只有一个线程在同步中执行共享数据，保证安全。但是频繁的判断锁，获取锁，释放锁，程序的效率会降低。</p><hr><h4 id="等待唤醒-wait-＆-notify"><a href="#等待唤醒-wait-＆-notify" class="headerlink" title="等待唤醒(wait ＆ notify)"></a>等待唤醒(wait ＆ notify)</h4><p>线程之间的通信。有效的利用资源。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   等待唤醒案例：</span></span><br><span class="line"><span class="comment">*       顾客：创建一个消费者线程，调用wait方法，放弃cpu的执行，进入到Waiting状态(无限等待)。</span></span><br><span class="line"><span class="comment">*       商家：创建一个商家线程，完成顾客的需求之后，调用notify方法，唤醒顾客。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   注意：</span></span><br><span class="line"><span class="comment">*       顾客和商家线程必须使用同步代码块包裹起来，保证等待和唤醒只有一个在执行。</span></span><br><span class="line"><span class="comment">*       同步使用的锁对象必须是保证唯一。</span></span><br><span class="line"><span class="comment">*       只有锁对象才能调用wait和notify方法。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   Object中的类：</span></span><br><span class="line"><span class="comment">*       void wait():在其他线程调用此对象的notify()方法或notifyAll()方法前，导致当前的线程等待。</span></span><br><span class="line"><span class="comment">*       void notify():唤醒此对象监视器上等待的某个线程，会继续执行wait方法后面的代码。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建锁对象，保证唯一。</span></span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个顾客的线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客开始点餐&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// wait之后的执行的动作</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;开吃！&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="comment">// 创建一个商家线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;餐已做好！拿给顾客！&quot;</span>);</span><br><span class="line">                    obj.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用wait和notify方法时，需要注意的点:</strong></p><ol><li><p>wait方法和notify方法必须要由<strong>同一个锁对象</strong>调用。</p><p>对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</p></li><li><p>wait和notify方法是属于<strong>Object类</strong>的方法。</p><p>锁对象可以是任意类对象。所有类都是继承自Object类。</p></li><li><p>wait方法和notify方法必须要在同步代码块或是<strong>同步函数</strong>中使用。</p><p>必须要通过锁对象调用两个方法。</p></li></ol><hr><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>容器：集合(<code>ArrayList</code>,<code>HashSet</code>,<code>LinkedList&lt;Thread&gt;</code>,<code>HashMap</code>)</p><p>容纳多个线程的容器，其中的线程可以反复使用，无需反复创建线程耗费资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPool.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo09_ThreadPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   线程池</span></span><br><span class="line"><span class="comment">*   import java.util.concurrent.Executor;线程池的工厂类，用来生成线程池。</span></span><br><span class="line"><span class="comment">*   Executor类中的静态方法：</span></span><br><span class="line"><span class="comment">*       static ExecutorService newFixedThreadPool(int nThreads)</span></span><br><span class="line"><span class="comment">*       创建一个可重用固定线程数的线程池</span></span><br><span class="line"><span class="comment">*       参数：int nThreads 创建线程池中包含的线程数</span></span><br><span class="line"><span class="comment">*       返回值：ExecutorService接口，是ExecutorService接口的实现类对象，可以使用ExecutorService接口接收。(面象接口编程)</span></span><br><span class="line"><span class="comment">*   java.util.concurrent.ExecutorService:线程池接口</span></span><br><span class="line"><span class="comment">*       用来从线程池中获取线程，调用start方法，执行线程任务。</span></span><br><span class="line"><span class="comment">*           submit(Runnable task)提交一个Runnable任务用于执行。</span></span><br><span class="line"><span class="comment">*       关闭/销毁线程池：</span></span><br><span class="line"><span class="comment">*           void shutdown()</span></span><br><span class="line"><span class="comment">*   线程池的使用步骤:</span></span><br><span class="line"><span class="comment">*       1. 使用线程池的工厂类Executor里提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池</span></span><br><span class="line"><span class="comment">*       2. 创建一个类，实现Runnable接口，重写run方法，设置线程任务。</span></span><br><span class="line"><span class="comment">*       3. 调用ExecutorService中的方法submit，传递线程任务(实现类)，开启线程，执行run方法。</span></span><br><span class="line"><span class="comment">*       4. 调用ExecutorService中的方法shutdown销毁线程池。(不建议使用)</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 使用线程池的工厂类Executor里提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池</span></span><br><span class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 3. 调用ExecutorService中的方法submit，传递线程任务(实现类)，开启线程，执行run方法。</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池(一般不用)</span></span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RunnableImpl.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo09_ThreadPool;</span><br><span class="line"><span class="comment">// 2. 创建一个类，实现Runnable接口，重写run方法，设置线程任务。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行任务！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中线程知识点。(并发与并行、线程与进程、同步技术、线程池...)</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/02】16_Java_Exception</title>
    <link href="http://example.com/2021/12/18/16_%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2021/12/18/16_%E5%BC%82%E5%B8%B8/</id>
    <published>2021-12-18T13:08:36.924Z</published>
    <updated>2021-12-18T13:11:59.431Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>Java中异常本身就是一个类，产生异常就是创建异常对象并抛出一个异常对象。</p><p>Java处理异常的方式是中断处理。</p><p>程序在执行过程中，出现的非正常的情况，最终导致JVM的非正常停止。</p><hr><h4 id="throw关键字"><a href="#throw关键字" class="headerlink" title="throw关键字"></a>throw关键字</h4><p>在指定的方法里面抛出指定的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo04_Exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   throw关键字</span></span><br><span class="line"><span class="comment">*   作用: 可以使用throw关键字在指定的方法中抛出异常。</span></span><br><span class="line"><span class="comment">*   使用格式：throw new xxxException(&quot;异常产生的原因&quot;);</span></span><br><span class="line"><span class="comment">*   注意：</span></span><br><span class="line"><span class="comment">*       1. throw关键字必须写在方法的内部。</span></span><br><span class="line"><span class="comment">*       2. throw关键字后面new的对象必须是Exception或者Exception的子类对象。</span></span><br><span class="line"><span class="comment">*       3. throw关键字抛出指定的异常对象，我们就必须处理这个异常对象。</span></span><br><span class="line"><span class="comment">*           throw关键字后面创建的是RuntimeException或者是RuntimeException的子类对象，我们可以不处理，默认交给JVM处理。</span></span><br><span class="line"><span class="comment">*           throw关键字后面创建的是编译异常(写代码时报错),我们就必须处理这个异常，要么throws,要么try...catch。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Throw</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(getElement(a,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   首先必须对方法传递过来的参数进行合法性校验。</span></span><br><span class="line"><span class="comment">    *   如果传递的参数有问题，要使用抛出异常的方式，告知传递的参数有问题。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   定义空指针异常。</span></span><br><span class="line"><span class="comment">        *   如果传递的数组arr是null，就会报错&quot;传递的数组是空的！&quot;</span></span><br><span class="line"><span class="comment">        *   NullPointerException：是一个运行期异常。默认交给JVM处理。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;传递的数组是空的！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   定义数组索引越界异常。</span></span><br><span class="line"><span class="comment">        *   如果传递的数组索引不在范围之内，则抛出越界异常</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span> || index &gt;arr.length-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;传递的索引越界！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ele = arr[index];</span><br><span class="line">        <span class="keyword">return</span> ele;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="throws关键字"><a href="#throws关键字" class="headerlink" title="throws关键字"></a>throws关键字</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   throws关键字：异常处理的第一种方式，交给别人处理。</span></span><br><span class="line"><span class="comment">*   作用：</span></span><br><span class="line"><span class="comment">*       当方法内部抛出异常对象的时候，必须要处理这个异常对象。</span></span><br><span class="line"><span class="comment">*       可以使用throws关键字处理异常对象，会把异常对象声明抛出给方法的调用者处理(自己不处理)，最终交给JVM处理--&gt;中断处理</span></span><br><span class="line"><span class="comment">*   使用格式：</span></span><br><span class="line"><span class="comment">*       修饰符 返回值类型 方法名(参数列表) throws AAAException,BBBException...&#123;</span></span><br><span class="line"><span class="comment">*           throw new AAAException(&quot;产生原因&quot;);</span></span><br><span class="line"><span class="comment">*           throw new BBBException(&quot;产生原因&quot;);</span></span><br><span class="line"><span class="comment">*           ...</span></span><br><span class="line"><span class="comment">*       &#125;</span></span><br><span class="line"><span class="comment">*   注意：</span></span><br><span class="line"><span class="comment">*       1. throws关键字必须写在方法声明处。</span></span><br><span class="line"><span class="comment">*       2. throws关键字后面声明的异常必须是Exception或者Exception的子类。</span></span><br><span class="line"><span class="comment">*       3. 方法内部如果抛出了多个异常对象，那么throws后面必须也声明多个异常。</span></span><br><span class="line"><span class="comment">*           如果抛出的多个异常有父子类关系，那么直接声明父类异常即可。</span></span><br><span class="line"><span class="comment">*       4. 调用了一个声明抛出异常的方法，我们就必须处理声明的异常。</span></span><br><span class="line"><span class="comment">*           要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM。</span></span><br><span class="line"><span class="comment">*           要么try...catch自己处理异常。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Throws</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果抛出的多个异常有父子类关系，那么直接声明父类异常即可。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        readFile(<span class="string">&quot;c:\\a.tx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   定义一个方法，用于判断读取文件路径是否正确。</span></span><br><span class="line"><span class="comment">    *   如果路径不正确，抛出文件找不到异常对象，告知方法的调用者。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!filename.equals(<span class="string">&quot;c:\\a.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;文件路径找不到！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   如果传递的路径，不是.txt结尾</span></span><br><span class="line"><span class="comment">        *   抛出IO异常，告知方法的调用者。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">if</span>(!filename.endsWith(<span class="string">&quot;.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;文件后缀名不对！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;路径正确！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="异常捕获try…catch"><a href="#异常捕获try…catch" class="headerlink" title="异常捕获try…catch"></a>异常捕获try…catch</h4><p>概念：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   try...catch:异常处理的第二种方式，自己处理。</span></span><br><span class="line"><span class="comment">*   格式：</span></span><br><span class="line"><span class="comment">*       try&#123;</span></span><br><span class="line"><span class="comment">*           可能产生异常的代码</span></span><br><span class="line"><span class="comment">*       &#125; catch (定义一个异常变量，用来接收try中抛出的异常对象)&#123;</span></span><br><span class="line"><span class="comment">*               异常的处理逻辑。</span></span><br><span class="line"><span class="comment">*               一般会将异常的信息记录到一个日志中。</span></span><br><span class="line"><span class="comment">*           &#125;</span></span><br><span class="line"><span class="comment">*        ...</span></span><br><span class="line"><span class="comment">*          catch(异常类名 变量名)&#123;</span></span><br><span class="line"><span class="comment">*           &#125;</span></span><br><span class="line"><span class="comment">*   注意：</span></span><br><span class="line"><span class="comment">*       1. try中可能抛出多个异常对象，那么就可以使用多个catch来处理这些异常变量。</span></span><br><span class="line"><span class="comment">*       2. 如果try中产生了异常，那么就会执行catch中的异常处理逻辑，执行完毕catch中的处理逻辑，继续执行try...catch之后的代码。</span></span><br><span class="line"><span class="comment">*           如果try中没有产生异常，就不会执行catch中异常处理的内容，执行完try中的代码，继续执行try...catch之后的代码。</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04TryCatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            readFile(<span class="string">&quot;c:\\a.tx&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;传递的路径有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!filename.equals(<span class="string">&quot;c:\\a.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;文件路径找不到！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *   如果传递的路径，不是.txt结尾</span></span><br><span class="line"><span class="comment">         *   抛出IO异常，告知方法的调用者。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">if</span>(!filename.endsWith(<span class="string">&quot;.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;文件后缀名不对！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;路径正确！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="finally代码块"><a href="#finally代码块" class="headerlink" title="finally代码块"></a>finally代码块</h4><p>一些特定的代码无论异常是否发生，都需要执行。</p><p>异常会导致程序跳转，导致有些语句执行不到，finally就是解决这个问题。</p><p>finally代码块中存放的代码是一定会被执行的。</p><p>finally一般用于资源释放，无论程序是否出现异常，代码都需要释放。</p><hr><h4 id="多个异常处理"><a href="#多个异常处理" class="headerlink" title="多个异常处理"></a>多个异常处理</h4><p>一个try多个catch注意事项：</p><ol><li><p>多个异常分别处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>多个异常一次捕获，多次处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">catch</span>&#123;&#125;    </span><br></pre></td></tr></table></figure><p>catch里边定义的异常变量，如果有子父类关系，那么子类的异常变量必须写在上面，否则会报错。</p></li><li><p>多个异常一次捕获一次处理。</p></li></ol><hr><h4 id="子父类异常"><a href="#子父类异常" class="headerlink" title="子父类异常"></a>子父类异常</h4><p>父类异常什么样，子类异常就什么样。</p><hr><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>java提供的异常类不够使用时，需要自己定义一些异常类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxxException</span> <span class="keyword">extends</span> <span class="title">Exception</span> / <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1 一个空参数的构造方法</span></span><br><span class="line">    <span class="comment">// 2 一个带异常信息的构造方法</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>自定义异常一般都是Exception结尾，说明该类是一个异常类。</p></li><li><p>自定义异常类，必须是继承Exception或者RuntimeException</p><p>继承Exception：自定义的异常类就是一个编译期异常，如果该方法内部抛出了编译期异常，就必须处理这个异常，要么throws，要么try…catch。</p><p>继承RuntimeException：自定义的异常类就是一个运行期异常，无需处理，交给JVM(中断处理)。</p></li></ol><hr>]]></content>
    
    
    <summary type="html">Java中异常知识点。(throw,throws,try...catch...)</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/02】15_Java_Map</title>
    <link href="http://example.com/2021/12/18/15_Map/"/>
    <id>http://example.com/2021/12/18/15_Map/</id>
    <published>2021-12-18T12:46:49.109Z</published>
    <updated>2021-12-18T13:08:05.225Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>Map&lt;K,V&gt;：将键映射到值。</p><p><strong>特点：</strong></p><ol><li>键唯一。</li><li>键和值一一对应。一个键对应一个值。</li><li>靠键维护他们的关系。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   java.util.Map&lt;k,v&gt;集合</span></span><br><span class="line"><span class="comment">*   Map集合的特点:</span></span><br><span class="line"><span class="comment">*       1. Map集合是一个双列集合，一个元素包含两个值(一个key,一个value)</span></span><br><span class="line"><span class="comment">*       2. Map集合中的元素，key和value的数据类型可以是相同，也可以是不同。</span></span><br><span class="line"><span class="comment">*       3. Map集合中的元素，key不允许重复，value是可以重复的。</span></span><br><span class="line"><span class="comment">*       4. Map集合中的元素，key和value是一一对应的。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h4 id="Map集合的遍历"><a href="#Map集合的遍历" class="headerlink" title="Map集合的遍历"></a>Map集合的遍历</h4><p>(1) 第一种方式，通过键找值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   Map集合的第一种遍历的方式：通过键找值的方式。</span></span><br><span class="line"><span class="comment">*   Map集合中的方法：</span></span><br><span class="line"><span class="comment">*       Set&lt;K&gt; keySet() 返回此映射中包含的键的Set视图。</span></span><br><span class="line"><span class="comment">*   实现步骤：</span></span><br><span class="line"><span class="comment">*       1. 使用Map集合中的方法keySet(),把Map集合所有的key取出来，存储到一个Set集合中。</span></span><br><span class="line"><span class="comment">*       2. 遍历set集合，获取Map集合中的每一个key。</span></span><br><span class="line"><span class="comment">*       3. 通过Map集合中的方法get(key),通过key找到value。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p>(2) 第二种方式，通过Entry对象，查找键和值。</p><img src="/2021/12/18/15_Map/1638366507464.png" class="" width="1638366507464"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   Map.Entry&lt;K,V&gt;:在Map接口中有一个内部接口Entry</span></span><br><span class="line"><span class="comment">*   作用: 当Map集合一创建，就会在Map集合中创建一个Entry对象，用来记录键与值(键值对对象，键与值的映射关系)。</span></span><br><span class="line"><span class="comment">*   Map集合遍历的第二种方式：使用Entry对象遍历。</span></span><br><span class="line"><span class="comment">*   Map集合中的方法：</span></span><br><span class="line"><span class="comment">*       Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() 返回此映射中包含的映射关系的Set视图。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><hr><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>HashMap**&lt;**K,V&gt; implement Map&lt;k,v&gt;</p><p>特点：</p><ol><li><p>底层是哈希表，查询速度非常快。</p><p>JDK1.8之前：数组+单向链表。</p><p>JDK1.8之后：数组+单向链表/红黑树：提高查询的速度。</p></li><li><p>一个无序的集合。存储元素和取出元素的顺序有可能不一致。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo03_Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">*   Map集合保证key是唯一的：</span></span><br><span class="line"><span class="comment">*       作为key的元素，必须重写hashCode方法和equals方法，保证key唯一。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04HashMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用keySet和增强for遍历集合</span></span><br><span class="line">        show00();</span><br><span class="line">        <span class="comment">// 使用entrySet和增强for循环遍历Map集合</span></span><br><span class="line"><span class="comment">//        show01();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show00</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建HashMap集合</span></span><br><span class="line">        HashMap&lt;String,Person&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 往集合添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;英国&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;女王&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">&quot;俄罗斯&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;普京&quot;</span>,<span class="number">30</span>));</span><br><span class="line">        map.put(<span class="string">&quot;精灵国&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;女王&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">&quot;秦国&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;秦始皇&quot;</span>,<span class="number">17</span>));</span><br><span class="line">        <span class="comment">// 使用keySet和增强for遍历集合</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">            Person value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   HashMap存储自定义类型的键值。</span></span><br><span class="line"><span class="comment">     *   Key:Person类型</span></span><br><span class="line"><span class="comment">     *       Person类型就必须重写hashCode方法和equals方法，保证key唯一。</span></span><br><span class="line"><span class="comment">     *   Value:String类型</span></span><br><span class="line"><span class="comment">     *       可以重复。</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建HashMap集合</span></span><br><span class="line">        HashMap&lt;Person,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 往集合添加元素</span></span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;女王&quot;</span>,<span class="number">18</span>),<span class="string">&quot;英国&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;普京&quot;</span>,<span class="number">30</span>),<span class="string">&quot;俄罗斯&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;女王&quot;</span>,<span class="number">18</span>),<span class="string">&quot;精灵国&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;秦始皇&quot;</span>,<span class="number">17</span>),<span class="string">&quot;秦国&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用entrySet和增强for循环遍历Map集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Person,String&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Person,String&gt; entry:set) &#123;</span><br><span class="line">            Person key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;=&quot;</span>+value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>LinkedHashMap&lt;K,V&gt; extends HashMap&lt;K,V&gt;集合</p><p>特点：</p><ol><li>底层是哈希表+链表（保证了迭代的顺序）</li><li>是一个有序的集合，存储元素与取出元素的顺序是一致的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanpeng.day06.Demo03_Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   Map接口的哈希表和链表的实现，具有可预知的迭代顺序。</span></span><br><span class="line"><span class="comment">*   底层原理：</span></span><br><span class="line"><span class="comment">*       哈希表+链表（记录链表的顺序）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05LinkedHashMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用普通的HashMap</span></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(<span class="string">&quot;__________________________&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用LinkedHashMap,保证顺序</span></span><br><span class="line">        LinkedHashMap&lt;String,String&gt; map1 = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        System.out.println(map1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&#123;a=d, b=b, c=c&#125;</span><br><span class="line">__________________________</span><br><span class="line">&#123;a=d, c=c, b=b&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><ol><li><p>此类实现一个哈希表，该哈希表将键映射到相应的值，任何<strong>非null对象</strong>都可以用作键或者值。</p></li><li><p>被HashMap取代了。</p></li><li><p>Hashtable的Properties依旧使用。常用于IO流操作。</p></li></ol><hr><h3 id="JDK9新特性"><a href="#JDK9新特性" class="headerlink" title="JDK9新特性"></a>JDK9新特性</h3><p>List接口、Set接口、Map接口：增加一个静态的方法of,可以给集合一次性添加多个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;E&gt; <span class="function">list&lt;E&gt; <span class="title">of</span> <span class="params">(E... elements)</span></span>;</span><br></pre></td></tr></table></figure><p>使用前提：</p><ol><li>当集合中存储的元素的个数已经确定了，不在改变时使用。</li></ol><p>注意：</p><ol><li>of方法只适用于List接口，Set接口，Map接口，不适用于接口的实现类。</li><li>of方法的返回值是一个不可改变的集合，集合<strong>不再使用add，put方法</strong>添加元素，会抛出异常。</li><li>Set接口和Map接口在调用of方法的时候，<strong>不能有重复的元素</strong>，否则会抛出异常。</li></ol><hr>]]></content>
    
    
    <summary type="html">Java中Map接口知识点。(HashMap,LinkedHashMap,Hashtable)</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/01】14_Java_可变参数</title>
    <link href="http://example.com/2021/12/18/14_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    <id>http://example.com/2021/12/18/14_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</id>
    <published>2021-12-18T12:45:23.085Z</published>
    <updated>2021-12-18T13:04:49.826Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   使用前提：当方法的参数列表数据类型已经确定，参数的个数不能确定，就可以使用可变参数。</span></span><br><span class="line"><span class="comment">*   使用格式：</span></span><br><span class="line"><span class="comment">*           修饰符 返回值类型 方法名(数据类型...变量名)&#123;&#125;</span></span><br><span class="line"><span class="comment">*   可变参数的原理：</span></span><br><span class="line"><span class="comment">*           可变参数底层就是一个数组，根据传递参数的个数不同，会创建不同长度的数组，来存储这些参数。</span></span><br><span class="line"><span class="comment">*           传递的参数的个数，可以是0，1，2...多个</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01VarArgs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个累加变量，记录求和。</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历数组中的每一个元素。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>一个方法的参数列表，只能有一个可变参数。</li><li>如果方法的参数有多个，那么可变参数必须放在参数列表的末尾。</li></ol><hr>]]></content>
    
    
    <summary type="html">Java中可变参数知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/12/01】13_Java_List知识点</title>
    <link href="http://example.com/2021/12/18/13_List/"/>
    <id>http://example.com/2021/12/18/13_List/</id>
    <published>2021-12-18T12:39:17.826Z</published>
    <updated>2021-12-18T12:45:07.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><p>List接口的特点：</p><ol><li>有序的集合，存储元素与取出元素的顺序是一致的。</li><li>有索引，包含了一些带索引的方法。</li><li>允许存储重复的元素。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.list接口 extends Collection接口;</span><br></pre></td></tr></table></figure><h3 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.ArrayList;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>ArrayList集合数据存储的结构是<strong>数组结构</strong>。元素增删慢，查找快。</li><li>由于日常开发中使用最多的功能为查询数据、遍历数据，所以ArrayList是最常用的集合。</li></ol><h3 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.LinkedList</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>底层是一个链表结构，查询慢，增删快。</li><li>里面包含了大量操作首尾元素的方法。</li><li>使用LinkedList集合特有的方法，<strong>不能使用多态</strong>。</li></ol><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>继承Collection类。</p><p>特点：</p><ol><li>不包含重复元素。</li><li>没有索引。</li></ol><h4 id="HashSet集合-implements-Set接口"><a href="#HashSet集合-implements-Set接口" class="headerlink" title="HashSet集合 implements Set接口"></a>HashSet集合 implements Set接口</h4><p>特点：</p><ol><li>不允许存储重复的元素。</li><li>没有索引，没有带索引的方法。不能使用for循环遍历。</li><li>无序的集合，存储元素和取出元素的顺序不一致。</li><li>底层是一个哈希表结构(查询速度非常快)。</li></ol><h4 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h4><p>一个十进制的整数，由系统随机给出。（对象的地址，是一个逻辑地址，不是实际的存储的物理地址。）</p><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>HashSet集合存储的数据的结构。(哈希表)</p><p>JDK1.8之前：哈希表= 数组 + 链表。</p><p>JDK1.8之后：哈希表 = 数组 + 链表；哈希表 = 数组 + 红黑树(提升查询的速度)。</p><p><strong>哈希表的特点：速度快。</strong></p><img src="/2021/12/18/13_List/1638329190319.png" class="" width="1638329190319"><p><strong>使用HashSet存储自定义类型的元素。</strong></p><p>必须重写hashCode()方法和equals方法。</p><h4 id="LinkedHashSet集合"><a href="#LinkedHashSet集合" class="headerlink" title="LinkedHashSet集合"></a>LinkedHashSet集合</h4><p>继承自 HashSet集合。</p><p>特点：</p><ol><li>底层是一个<strong>哈希表</strong>(数组+链表/红黑树)+<strong>链表</strong>：多一条链表（记录元素的存储位置），保证元素有序。</li><li>不允许重复。</li></ol>]]></content>
    
    
    <summary type="html">Java中List集合相关内容。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/30】12_Java_数据结构基础知识点(一)</title>
    <link href="http://example.com/2021/12/18/12_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/12/18/12_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-12-18T12:31:04.494Z</published>
    <updated>2021-12-18T12:34:16.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1 栈"></a>1 栈</h3><p>特点：先进后出。</p><p>存储元素到集合：入栈、压栈。</p><p>取出集合中的元素：出栈。</p><img src="/2021/12/18/12_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1638262801017.png" class="" width="1638262801017"><h3 id="2-队列"><a href="#2-队列" class="headerlink" title="2 队列"></a>2 队列</h3><p>特点：先进先出。</p><p>入口和出口在集合的两侧。</p><img src="/2021/12/18/12_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1638263082522.png" class="" width="1638263082522"><h3 id="3-数组"><a href="#3-数组" class="headerlink" title="3 数组"></a>3 数组</h3><p>特点：查询快，增删慢。</p><p>查询快：数组的地址是连续的，根据数组的首地址可以找到数组，通过数组的索引可以快速查找某一个元素。</p><p>增删慢：数组的长度是固定的，要增加或删除一个元素，必须创建一个新数组，把源数组的数据复制过来。</p><h3 id="4-链表"><a href="#4-链表" class="headerlink" title="4 链表"></a>4 链表</h3><p>特点：查询慢，增删快。</p><p>查询慢：链表中的地址不是连续的，每次查询元素，都必须从头开始查询。</p><p>增删快：链表结构，增加删除一个元素，对链表的整体结构没有影响，所以增删快。</p><img src="/2021/12/18/12_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1638263702263.png" class="" width="1638263702263"><p>单向链表：链表中只有一条链子，不能保证元素的顺序（存储元素和取出元素的顺序有可能不一致）</p><p>双向链表：链表中有两条链，一条专门记录元素的顺序，是一个有序的集合。</p><img src="/2021/12/18/12_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1638264032742.png" class="" width="1638264032742"><h3 id="5-红黑树"><a href="#5-红黑树" class="headerlink" title="5 红黑树"></a>5 红黑树</h3><p>二叉树：分支不能超过两个。</p><p>排序树：在二叉树的基础上，元素有大小顺序。左子树小，右子树大。</p><p>平衡树：左子树与右子树相等。</p><p><strong>红黑树：</strong>趋近于平衡树，查询的速度非常快，查询叶子节点最大次数与最小次数不能超过2倍。</p><img src="/2021/12/18/12_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1638326408272.png" class="" title="label">]]></content>
    
    
    <summary type="html">数据结构中栈、队列、数组、链表、红黑树。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/30】11_Java_泛型</title>
    <link href="http://example.com/2021/12/17/11_%E6%B3%9B%E5%9E%8B/"/>
    <id>http://example.com/2021/12/17/11_%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-12-17T14:08:21.494Z</published>
    <updated>2021-12-17T14:12:37.132Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="1-泛型"><a href="#1-泛型" class="headerlink" title="1 泛型"></a>1 泛型</h3><p>一种不确定的数据类型，不知道使用什么数据类型的时候可以使用泛型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其中&lt;E&gt;代表泛型，不知道使用什么数据类型。</span></span><br></pre></td></tr></table></figure><p>创建对象的时候，就会确定泛型的数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会把数据类型当作参数传递，下列例子就是将String赋值给泛型E。</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2 Student类型的数据</span></span><br><span class="line">ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br></pre></td></tr></table></figure><hr><h3 id="2-创建集合对象，使用泛型"><a href="#2-创建集合对象，使用泛型" class="headerlink" title="2 创建集合对象，使用泛型"></a>2 创建集合对象，使用泛型</h3><p>好处：</p><ol><li>避免了类型转换的麻烦，存储的什么类型，取出的就是什么类型。</li><li>把运行期异常（代码运行之后抛出的异常），提升到编译器（写代码报错）。</li></ol><p>弊端：</p><ol><li>泛型是什么类型，就只能存储什么类型的数据。</li></ol><h4 id="定义含有泛型的类"><a href="#定义含有泛型的类" class="headerlink" title="定义含有泛型的类"></a>定义含有泛型的类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义格式</span></span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;泛型&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(E name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line">GenericClass&lt;Integer&gt; gc1 = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">gc1.setName(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Integer name = gc1.getName();</span><br><span class="line">System.out.println(name); </span><br></pre></td></tr></table></figure><h4 id="定义含有泛型的方法"><a href="#定义含有泛型的方法" class="headerlink" title="定义含有泛型的方法"></a>定义含有泛型的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义格式</span></span><br><span class="line">修饰符 &lt;泛型&gt; 返回值类型 方法名(参数列表(使用泛型)) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>含有泛型的方法，在调用的时候确定泛型的数据类型。</p><p>传递什么类型的数据，泛型就是什么类型。</p><h4 id="定义含有泛型的接口"><a href="#定义含有泛型的接口" class="headerlink" title="定义含有泛型的接口"></a>定义含有泛型的接口</h4><p>接口使用什么泛型，实现类就使用什么泛型，类跟着接口走。</p><p>相当于定义了一个含有泛型的类，创建对象的时候确定泛型的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl</span>&lt;<span class="title">I</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">publuc <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-泛型通配符"><a href="#3-泛型通配符" class="headerlink" title="3 泛型通配符"></a>3 泛型通配符</h3><p>当使用泛型类或接口的时候，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示。但是一旦使用通配符后，只能使用Object类中的共性方法，集合中元素自身的方法不可用。</p><p>泛型的通配符：不知道使用什么类型来接受的时候，此时可以使用?,?表示未知通配符。</p><p>此时只能接收数据，不可以往该集合中存储数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">泛型的通配符：</span></span><br><span class="line"><span class="comment">？：代表任意的数据类型</span></span><br><span class="line"><span class="comment">使用方式：</span></span><br><span class="line"><span class="comment">不能创建对象使用。</span></span><br><span class="line"><span class="comment">只能作为方法的参数使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="泛型通配符的高阶使用"><a href="#泛型通配符的高阶使用" class="headerlink" title="泛型通配符的高阶使用"></a>泛型通配符的高阶使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">泛型的上限限定：? extends E 代表使用的泛型只能是E类型的子类/本身</span></span><br><span class="line"><span class="comment">泛型的下限限定：? super E 代表使用的泛型只能是E类型的父类/本身</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">Java中泛型的知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】10_Java_Collection集合</title>
    <link href="http://example.com/2021/12/17/10_Collection/"/>
    <id>http://example.com/2021/12/17/10_Collection/</id>
    <published>2021-12-17T14:05:58.300Z</published>
    <updated>2021-12-18T12:30:36.892Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="集合Collection"><a href="#集合Collection" class="headerlink" title="集合Collection"></a>集合Collection</h2><p>Collection内存储<strong>对象的集合</strong>。</p><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><img src="/2021/12/17/10_Collection/1638240360794.png" class="" title="img"><h3 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h3><p>用于迭代访问Collection中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>; <span class="comment">// 获取集合对应的迭代器，用来遍历集合中的元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 判断集合中还有没有下一个元素，有就返回true,没有就返回false</span></span><br><span class="line">next(); <span class="comment">// 返回迭代的下一个元素</span></span><br></pre></td></tr></table></figure><p>Iterator迭代器是一个接口，无法直接使用，需要使用Iterator接口的实现类对象，获取实现类的方法。</p><p>Collection接口中有一个方法，叫iterator()，这个方法返回迭代器的实现类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>; <span class="comment">// 返回在此collection的元素上进行迭代的迭代器。</span></span><br></pre></td></tr></table></figure><h4 id="迭代器的使用【重点】"><a href="#迭代器的使用【重点】" class="headerlink" title="迭代器的使用【重点】"></a>迭代器的使用【重点】</h4><ol><li>使用集合中的方法iterator()获取迭代器的实现类对象，使用Iterator接口接收(多态)</li><li>使用Iterator接口中的方法hasNext判断还有没有下一个元素</li><li>使用Iterator接口中的方法next取出集合中的下一个元素</li></ol><h2 id="Collections集合工具类"><a href="#Collections集合工具类" class="headerlink" title="Collections集合工具类"></a>Collections集合工具类</h2><hr>]]></content>
    
    
    <summary type="html">Java中Collection集合的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】9_Java_包装类</title>
    <link href="http://example.com/2021/12/17/9_%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://example.com/2021/12/17/9_%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2021-12-17T14:03:39.288Z</published>
    <updated>2021-12-17T14:05:40.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>基本数据类型,使用起来非常方便,但是没有对应的方法来操作这些基本类型的数据。</p><p>可以使用一个类,把基本类型的数据装起来,在类中定义一些方法,这个类叫做包装类。</p><p>我们可以使用类中的方法来操作这些基本类型的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 装箱：把基本类型的数据，包装到包装类中（基本数据类型-&gt;包装类）</span></span><br><span class="line"><span class="comment">* 构造方法：</span></span><br><span class="line"><span class="comment">*   Integer(int value) 构造一个新的Integer对象，代表指定的int值。</span></span><br><span class="line"><span class="comment">*   Integer(String s) 构造一个新分配的Integer对象，表示String参数所指示的int值。</span></span><br><span class="line"><span class="comment">*   传递的字符串必须是基本类型的字符串，否则会抛出异常。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">Integer in1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(in1);</span><br><span class="line"></span><br><span class="line">Integer in2 = <span class="keyword">new</span> Integer(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(in2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 拆箱：在包装类中取出基本类型的数据。（包装类-&gt;基本类型的数据）</span></span><br><span class="line"><span class="comment">* 成员方法：</span></span><br><span class="line"><span class="comment">*   int intValue()以int类型返回该Integer的值。</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h4 id="基本类型与字符串类型的相互转换"><a href="#基本类型与字符串类型的相互转换" class="headerlink" title="基本类型与字符串类型的相互转换"></a>基本类型与字符串类型的相互转换</h4><p><strong>(1) 基本类型到字符串类型</strong></p><ol><li>基本类型的值+“ ” 【最简单的方法】。</li><li>包装类的静态方法toString(参数)，不是Object中的toString()重载。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 返回一个表示指定整数的String对象。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>String类的静态方法valueOf(参数)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 返回int参数的字符串表示形式。</span></span><br></pre></td></tr></table></figure><p><strong>(2) 字符串到基本类型</strong></p><p>使用包装类的静态方法parseXXX(“字符串”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Integer类</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s)</span></span>;</span><br><span class="line"><span class="comment">// Double类</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">parseDouble</span><span class="params">(String s)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中包装类的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】8_Java_StringBuilder类</title>
    <link href="http://example.com/2021/12/17/8_StringBuilder/"/>
    <id>http://example.com/2021/12/17/8_StringBuilder/</id>
    <published>2021-12-17T14:02:26.464Z</published>
    <updated>2021-12-17T14:03:28.800Z</updated>
    
    <content type="html"><![CDATA[<h3 id="StringBuilder类【字符串缓冲区】"><a href="#StringBuilder类【字符串缓冲区】" class="headerlink" title="StringBuilder类【字符串缓冲区】"></a>StringBuilder类【字符串缓冲区】</h3><p>可以解决字符串拼接问题。</p><h4 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h4><ol><li>字符串是常量，被定义后不能被改变。</li><li>字符串的底层是一个被final修饰的数组，不能改变，是一个常量。</li></ol><p>使用String进行字符串的相加，内存会有多个字符串，占用空间较多，效率低下。</p><h4 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h4><ol><li><p>是一个字符串缓冲区，提高字符串操作的效率。</p></li><li><p>底层是一个数组，但是<font color=red>没有被final修饰</font>，可以改变。</p></li><li><p>在内存中始终是一个数组，占用空间少，效率高。超出了StringBuilder的容量，会自动扩容。</p></li></ol><p><strong>1 构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 构造一个不带字符的字符串生成器，其容量为16个字符。</span></span><br><span class="line">StringBuilder bu1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">// 2 构造一个字符串生成器，并初始化为指定的字符串内容。</span></span><br><span class="line">StringBuilder(String str);</span><br></pre></td></tr></table></figure><p><strong>2 成员方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 添加任意类型数据的字符串形式，并返回当前对象自身。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(...)</span></span>;</span><br><span class="line"><span class="comment">// 2 将当前的StringBuilder对象转换为String对象。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中StringBuilder的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】7_Java_System类</title>
    <link href="http://example.com/2021/12/17/7_System%E7%B1%BB/"/>
    <id>http://example.com/2021/12/17/7_System%E7%B1%BB/</id>
    <published>2021-12-17T14:00:30.552Z</published>
    <updated>2021-12-17T14:01:36.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.System;</span><br></pre></td></tr></table></figure><p>提供了大量得静态方法，可以获取与系统相关的信息或者系统级操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 将数组中指定的数据拷贝到另外一个数组中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">src-源数组</span></span><br><span class="line"><span class="comment"> srcPos - 源数组中的起始位置（索引）</span></span><br><span class="line"><span class="comment"> dest - 目标数组</span></span><br><span class="line"><span class="comment"> destPos - 目标数组的起始位置</span></span><br><span class="line"><span class="comment"> length - 复制的数据元素的数量</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中System类的相关操作。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/28】5_Java_接口与多态</title>
    <link href="http://example.com/2021/12/17/5_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <id>http://example.com/2021/12/17/5_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81/</id>
    <published>2021-12-17T13:48:29.699Z</published>
    <updated>2021-12-17T14:02:12.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h3><p>一种公共的规范标准。</p><p>一种引用数据类型。最重要的内容就是：抽象方法。</p><h4 id="定义一个接口："><a href="#定义一个接口：" class="headerlink" title="定义一个接口："></a>定义一个接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// 接口内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译生成的字节码文件 .java-&gt;.class</span></span><br></pre></td></tr></table></figure><h4 id="接口中定义抽象方法："><a href="#接口中定义抽象方法：" class="headerlink" title="接口中定义抽象方法："></a>接口中定义抽象方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名称(参数列表);</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceAbstract</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>接口中的抽象方法，修饰符是两个固定的关键字:public abstract</li><li>两个关键字修饰符可以省略。</li><li>方法的三要素可以随意定义。</li></ol><h4 id="接口的使用："><a href="#接口的使用：" class="headerlink" title="接口的使用："></a>接口的使用：</h4><ol><li>接口不能直接使用，需要有一个”实现类“来”实现”该接口。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类名称 <span class="keyword">implements</span> 接口名称 </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>接口的实现必须覆盖重写(实现)接口中的<strong>所有的抽象方法</strong>。</li></ol><p>实现：去掉abstract关键字，加上方法体大括号。</p><ol start="3"><li>创建实现类的对象，进行使用。</li></ol><p><strong>注意事项</strong>：</p><p>如果实现类没有覆盖重写接口中的所有抽象方法，那么这个实现类自己就必须是抽象类。</p><h4 id="接口的默认方法："><a href="#接口的默认方法：" class="headerlink" title="接口的默认方法："></a>接口的默认方法：</h4><p>接口的默认方法，用来解决接口升级的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>接口的默认方法，可以通过接口实现类对象，直接调用。</li><li>接口的默认方法，也可以被接口实现类进行覆盖重写。</li></ol><h4 id="接口的静态方法"><a href="#接口的静态方法" class="headerlink" title="接口的静态方法"></a>接口的静态方法</h4><p>从Java 8开始，接口当中允许定义静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line"><span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：不能通过接口实现类的对象来调用接口当中的静态方法。</p><p><strong>正确用法</strong>：通过接口名称，直接调用其中的静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        MyInterfaceStaticImpl impl = <span class="keyword">new</span> MyInterfaceStaticImpl();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 错误写法</span></span><br><span class="line">        impl.methodStatic();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 正确写法</span></span><br><span class="line">        MyInterfaceStatic.methodStatic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的成员变量"><a href="#接口的成员变量" class="headerlink" title="接口的成员变量"></a>接口的成员变量</h4><p>接口中也是可以定义”成员变量“，但是必须使用public static final 三个关键字进行修饰。</p><p>从效果上来看，就是接口的【常量】。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 数据类型 常量名称 = 数据值；</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>一旦使用final关键词进行修饰，说明不可改变。</li><li>接口中的常量，可以省略public static final.</li><li>接口中的常量，必须赋值，不能不赋值。</li><li>接口中常量的名称，使用完全大写的字母，并且用下划线进行分隔。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceConst</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一旦赋值，不可改变</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_OF_MY_CLASS = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用接口的注意事项"><a href="#使用接口的注意事项" class="headerlink" title="使用接口的注意事项"></a>使用接口的注意事项</h4><ol><li><p>接口没有静态代码块和构造方法。</p></li><li><p>一个类的直接父类是唯一的，一个类可以同时实现多个接口。</p></li><li><p>如果实现类所实现的多个接口当中，存在<strong>重复的抽象方法</strong>，那么只需要覆盖重写一次即可。</p></li><li><p>如果实现类没有覆盖重写接口中的所有抽象方法，那么这个实现类自己就必须是抽象类。</p></li><li><p>如果实现类实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</p></li><li><p>一个类如果直接父类中的方法和接口中的默认方法产生了冲突，优先用父类中的方法。【继承优先级高于接口】</p></li></ol><h4 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h4><ol><li>类与类之间是单继承的，直接父类只有一个。</li><li>类与接口之间是多实现的，一个类可以实现多个接口。</li><li>接口与接口之间是多继承的。</li></ol><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>extends继承或者implements实现，是多态性的前提。</p><p>代码中体现多态性：<strong>父类引用指向子类对象。</strong></p><h4 id="访问成员变量的方法："><a href="#访问成员变量的方法：" class="headerlink" title="访问成员变量的方法："></a>访问成员变量的方法：</h4><ol><li>直接通过对象名称访问成员变量：等号左边是谁，优先用谁，没有则向上找。</li><li>间接通过成员方法访问成员变量：方法属于谁，优先用谁，没有则向上找。</li></ol><h4 id="多态中成员方法的使用："><a href="#多态中成员方法的使用：" class="headerlink" title="多态中成员方法的使用："></a>多态中成员方法的使用：</h4><ol><li>看new的是谁，优先用谁，没有就向上找。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MultiMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu obj = <span class="keyword">new</span> Zi(); <span class="comment">// 多态</span></span><br><span class="line">        </span><br><span class="line">        obj.method(); <span class="comment">// 父子都有，优先用子</span></span><br><span class="line">        obj.method(); <span class="comment">// 子类没有，父类有，向上找到父类</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// *编译看左边，运行看右边。*</span></span><br><span class="line">        <span class="comment">// 编译看左边，左边是父类，没有methondZi方法，所以编译报错。</span></span><br><span class="line">        obj.methodZi(); <span class="comment">// 错误！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>成员变量：编译看左边，运行也看左边。</p><p>成员方法：编译看左边，运行看右边。</p><hr><h3 id="对象的转型"><a href="#对象的转型" class="headerlink" title="对象的转型"></a>对象的转型</h3><ol><li>对象的向上转型，就是 <strong>多态</strong> 写法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类名称 对象名 = <span class="keyword">new</span> 子类名称();</span><br></pre></td></tr></table></figure><p>含义：右侧创建一个子类对象，把它当作父类看待。</p><p>注意事项： 向上转型一定是安全的。从小范围转到大范围。</p><ol start="2"><li>对象的向下转型，是一个 <strong>还原</strong> 动作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类名称 对象名 = (子类名称) 父类对象;</span><br></pre></td></tr></table></figure><p>含义：将父类对象还原成原来的子类对象。</p><p>注意事项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Cat(); <span class="comment">// 本来就是猫，向上转型成动物。</span></span><br><span class="line">Cat cat = (Cat) animal; <span class="comment">// 本来就是猫，被当作动物了，现在进行还原。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// 1. 必须保证对象本来创建的时候就是猫，才能向下转型成猫。</span></span><br><span class="line"><span class="comment">// 2. 如果对象创建的时候不是猫，现在非要向下转型成为猫，就会报错。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>判断父类引用对象，本来是什么子类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">对象 <span class="keyword">instanceof</span> 类名称;</span><br><span class="line"><span class="comment">// 得到的结果是一个boolean值</span></span><br><span class="line"><span class="comment">// 判断前面的对象能不能当作后面的实例。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断这个对象是否是Dog</span></span><br><span class="line"><span class="keyword">if</span> ( animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">    Dog dog = (Dog) animal;</span><br><span class="line">    <span class="comment">// 调用dog方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>代表不可改变的。</p><p>常见用法：</p><ol><li><p>修饰类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代表这个类不能有任何的子类。</span></span><br></pre></td></tr></table></figure><p>注意：如果一个类是final的，其中所有的成员方法都无法进行覆盖重写。</p></li><li><p>修饰方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// final关键字修饰一个方法的时候，这个方法就是最终的方法，不能被覆盖重写。</span></span><br></pre></td></tr></table></figure><p>注意：对于类、方法来说，abstract关键字和final关键字不能同时使用，因为矛盾。</p></li><li><p>修饰局部变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一旦使用final用来修饰局部变量，那么这个变量就不能进行更改。</span></span><br><span class="line"><span class="comment">// “一次赋值，终生不变。”</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>对于基本类型，不可变代表变量当中的 <strong>数据</strong> 不可变。</li><li>对于引用类型，不可变代表变量中的 <strong>地址值</strong> 不可变。</li></ol></li><li><p>修饰成员变量。</p><p>如果使用final关键字修饰，那么这个变量也照样是不可变的。</p><ol><li><p>对于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值了。</p></li><li><p>对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一。</p></li><li><p>必须保证类当中所有重载的构造方法，都最终对final的成员变量进行赋值。</p></li></ol></li></ol><hr><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>一个类内部包含另一个类。</p><p><strong>分类</strong></p><ol><li><p>成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 内部类名称 </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：内用外，随意访问；外用内，需要<strong>内部类对象</strong>。</p><p><strong>使用成员内部类</strong>：</p><ol><li><p>间接使用: 在外部类的方法中，使用内部类；然后main只是调用外部类的方法。</p></li><li><p>直接使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名 = <span class="keyword">new</span> 类名称();</span><br><span class="line">外部类名称.内部类名称 对象名 = <span class="keyword">new</span> 外部类名称().new 内部类名称();</span><br></pre></td></tr></table></figure></li><li><p>内部类重名访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类名称.<span class="keyword">this</span>.外部类成员变量名</span><br></pre></td></tr></table></figure></li></ol></li><li><p>局部内部类</p><p>如果一个类定义在一个方法内部，那么就是一个局部内部类。</p><p>局部：是由当前所属的方法可以使用它，出了这个方法就不能用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称(参数列表) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>定义一个类时的权限修饰符<ol><li>外部类：public default</li><li>成员内部类：public/protected/(default)/private</li><li>局部内部类：什么都不写</li></ol></li></ol><hr><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>如果接口的实现类只需要使用唯一的一次，那么这种情况下就可以省略该类的定义，而改为使用【匿名内部类】。</p><p><strong>匿名内部类的定义格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">接口名称 对象名 = <span class="keyword">new</span> 接口名称() &#123;</span><br><span class="line">    <span class="comment">// 覆盖重写所有的抽象方法</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1.new代表创建对象的动作</span></span><br><span class="line"><span class="comment">// 2.接口名称就是匿名内部类需要实现哪个接口</span></span><br><span class="line"><span class="comment">// &#123;...&#125;才是匿名内部类的内容</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><p>匿名内部类，在【创建对象】的时候，只能使用唯一一次。如果希望多次创建对象，而且类的内容一样，就需要使用单独定义的实现类。</p></li><li><p>匿名对象，在【调用方法】的时候，只能调用唯一一次。如果希望同一个对象，调用多次方法，那么必须给对象起个名字。</p></li><li><p>匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】。</p></li></ol>]]></content>
    
    
    <summary type="html">Java接口与多态相关知识点总结。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/29】6_Java_日期与时间的类</title>
    <link href="http://example.com/2021/12/17/6_%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E7%B1%BB/"/>
    <id>http://example.com/2021/12/17/6_%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E7%B1%BB/</id>
    <published>2021-12-17T13:47:34.324Z</published>
    <updated>2021-12-17T13:59:01.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="日期和时间类"><a href="#日期和时间类" class="headerlink" title="日期和时间类"></a>日期和时间类</h3><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date; <span class="comment">// 表示日期和时间的类</span></span><br><span class="line"><span class="comment">// 精确到毫秒，可以对时间和日期进行计算。</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date(); <span class="comment">// 获取当前系统的时间</span></span><br></pre></td></tr></table></figure><h4 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h4><p>格式化：日期-&gt;文本；解析：文本-》日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">format</span><span class="params">(Date date)</span></span>;  <span class="comment">// 日期转文本</span></span><br><span class="line"><span class="function">Date <span class="title">parse</span><span class="params">(String source)</span></span>; <span class="comment">// 文本解析成日期</span></span><br></pre></td></tr></table></figure><p>使用DateFormat类中的方法format，把日期格式转化为文本。</p><p>使用步骤:</p><ol><li>创建SimpleDateFormat对象，构造方法中传递指定的模式。</li><li>调用SimpleDateFormat对象中的format，按照构造方法中指定的模式，把Date日期格式化为符合模式的字符串（文本）。</li></ol><h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="comment">// 是一个抽象类，提供了一些操作日历字段的方法。</span></span><br><span class="line"><span class="comment">// Calendar类无法直接创建对象使用，里面有一个静态的方法getInstance()获取Calendar对象。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java中与日期时间相关的操作类。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/27】Java开发基础知识点(二)</title>
    <link href="http://example.com/2021/12/17/2_%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2021/12/17/2_%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-12-17T13:18:50.160Z</published>
    <updated>2021-12-17T13:35:07.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java知识点（二）"><a href="#Java知识点（二）" class="headerlink" title="Java知识点（二）"></a>Java知识点（二）</h1><p><strong>1 包装类型</strong></p><p> 基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。</p><hr><p><strong>2 缓存池：</strong></p><p>（1）new Integer(123)</p><p>每次都会<strong>新建一个对象</strong>。</p><p>（2）Integer.valueOf(123)</p><p>会<strong>使用缓存池中的对象</strong>，多次调用会取得同一个对象的引用。  </p><p>先<strong>判断值是否在缓存池中</strong>，如果在的话就直接返回缓存池的内容。</p><p> Java 8 中，Integer <strong>缓存池的大小</strong>默认为 -128~127 。</p><hr><p><strong>3  String：</strong></p><p>String被声明成<strong>final</strong>，因此它<strong>不可被继承</strong>。</p><p>内部<strong>使用char数组存储数据</strong>，该数组被声明成final，意味着value数组初始化之后就不能引用其他数组。并且String内部没有改变value数组的方法，可以保证String不可变。</p><p><strong>好处：</strong></p><p>​    (1) 可以用来缓存hash值</p><p>​        例如用String用作HashMap的key.</p><p>​    (2) String Pool</p><p>​        如果一个String对象已经被创建过了，就会从String Pool中取得引用。</p><p>​    (3)安全性</p><p>​        String经常作为参数，可以保证参数不变。</p><p>​    (4)线程安全</p><p>​        String的不变性可以在多个线程中安全地使用。</p><hr><p><strong>4 String【不可变】, StringBuffer and StringBuilder【可变】：</strong></p><p>(1)线程安全问题</p><p>String不可变【线程安全】</p><p>StringBuilder【不是线程安全的】</p><p>StringBuffer【线程安全，内部使用 <strong>synchronized</strong> 进行同步 】</p><hr><p><strong>5 String.intern()</strong></p><p> 使用 String.intern() 可以<strong>保证相同内容的字符串变量引用同一的内存对象</strong>。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用。</span></span><br><span class="line"><span class="comment">// intern() 首先把 s1 引用的对象放到 String Pool(字符串常量池)中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);           <span class="comment">// false</span></span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">System.out.println(s1.intern() == s3);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是采用 &quot;bbb&quot; 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Pool 中。</span></span><br><span class="line">String s4 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">String s5 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">System.out.println(s4 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><p><strong>6 参数传递</strong></p><p> Java 的参数是以值传递的形式传入方法中，而不是引用传递。 </p>]]></content>
    
    
    <summary type="html">包装、缓存池、Sting...</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【21/11/27】Java面向对象知识碎片</title>
    <link href="http://example.com/2021/12/17/1_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2021/12/17/1_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-12-17T13:02:40.239Z</published>
    <updated>2021-12-17T13:18:10.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>(1) 面向过程：实现功能的时候，要详细处理每一个细节。</p><p>(2) 面向对象：实现功能的时候，不关心具体的步骤，而是找一个具有该功能的人来帮我做事。</p><img src="/2021/12/17/1_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1637415427333.png" class="" title="img"><hr><h3 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>将细节信息隐藏起来，对于外界不可见。</p><p>利用抽象数据类型将<strong>数据和基于数据的操作封装</strong>在一起，使其构成一个不可分割的独立实体。 </p><p>保留一些<strong>对外接口</strong>使之与外部发生联系。 可以通过对象对外提供的接口来访问该对象。 </p><p><strong>优点：</strong></p><ol><li>减小耦合</li><li>减轻维护的负担</li><li>有效地调节性能</li><li>提高软件可重用性</li><li>降低构建大型系统的风险</li></ol><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承是多态的前提，没有继承就没有多态。</p><p>解决的主要问题：<strong>共性抽取</strong>。</p><img src="/2021/12/17/1_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1637979780869.png" class="" title="img"><p>继承的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类的格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 父类名称 </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子类的格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类名称 <span class="keyword">extends</span> 父类名称 </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在父子类的继承关系中，创建子类对象，访问成员方法的规则：</p><p><strong>创建的对象是谁，就优先用谁，如果没有则向上找。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">        <span class="comment">// num: 局部变量，30</span></span><br><span class="line">        <span class="comment">// this.num: 成员变量，20</span></span><br><span class="line">        <span class="comment">// super.num: 父类的成员变量，10</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承应该遵循<strong>里氏替换原则</strong>，子类对象必须能够替换掉所有父类对象。</p><p><strong>重写(override)</strong></p><p>概念：在继承关系中，方法的名称一样，参数列表也一样。</p><p>重写(Override): 方法的名称一样，参数列表【也一样】。覆盖、覆写。</p><p>重载(Overload)：方法的名称一样，参数列表【不一样】。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测重写是否正确,一种检测手段。</span></span><br><span class="line"><span class="meta">@Override</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><p>保证父与子之间的方法名称相同，参数列表也相同。</p></li><li><p>子类方法的返回值必须【小于等于】父类方法的返回值范围。</p><p>java.lang.Object类是所有类的公共最高父类，java.lang.String是Object的子类。</p></li><li><p>子类方法的权限必须【大于等于】父类方法的权限修饰符。</p><p>public &gt; protected &gt; (default) &gt; private</p><p>(default)是留空不写。</p></li></ol><p><strong>设计原则</strong>：</p><p>对于已经使用的类，尽量不要进行修改。推荐定义一个新的类，来重复利用其中的共性内容，并且添加改动的新内容。</p><p><strong>构造方法：</strong></p><ol><li>子类构造方法中有一个默认隐含的super()调用，一定是先调用的父类构造，后执行的子类构造。</li><li>子类构造可以通过super关键字来调用父类重载构造。</li><li>super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。</li></ol><p><font color='red'>Java继承的特点</font></p><ol><li><p>Java语言是<strong>单继承</strong>的。</p><p>一个类的直接父类只能有唯一一个。</p></li><li><p>Java语言可以<strong>多级继承</strong>。</p><p>一个子类的父类，也可以有父类。</p></li><li><p>一个子类的直接父类是唯一的，但是一个父类可以拥有多个子类。</p></li></ol><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p> 多态分为<strong>编译时多态</strong>【 方法的重载 】和<strong>运行时多态</strong>【 程序中定义的对象引用所指向的具体类型在运行期间才确定 。包括<strong>继承、重写、向上转型</strong>】。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><ul><li><strong>泛化关系（Generalization）</strong>：用来描述<strong>继承关系</strong>。</li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png" alt="img"> </p><ul><li><strong>实现关系（Realization）</strong>：用来实现一个<strong>接口</strong>。</li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILK8IatCoQn.png" alt="img"> </p><ul><li><strong>聚合关系（Aggregation）</strong>： 表示<strong>整体由部分组成</strong>，但是整体和部分<strong>不是强依赖</strong>的，整体不存在了部分还是会存在。 </li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILLmJ4ylIar.png" alt="img"> </p><ul><li><strong>组合关系（Composition）</strong>： 组合中整体和部分是<strong>强依赖</strong>的，整体不存在了部分也不存在了。 </li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILLmpiyjo2_.png" alt="img"> </p><ul><li><strong>关联关系（Association）</strong>：表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</li></ul><p> <img src="https://pdai.tech/_images/pics/SoWkIImgAStDuU8goIp9ILLmB2xEJyv.png" alt="img"> （1对多的关系）</p><ul><li><strong>依赖关系（Dependency）</strong></li></ul><p> 依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式: </p><ul><li>A 类是 B 类中的(某中方法的)局部变量；</li><li>A 类是 B 类方法当中的一个参数；</li><li>A 类向 B 类发送消息，从而影响 B 类发生变化；</li></ul><p> <img src="https://pdai.tech/_images/pics/LOun2W9134NxVugmbJPp15d4LalxC4O.png" alt="img"> </p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>成员变量【属性】: 直接定义在类当中，在方法外面。</p><p>成员方法【行为】: 成员方法不要写static关键字。</p><p><strong>通常情况下，一个类不能直接使用，需要根据类创建一个对象，才能使用。</strong></p><ol><li>导包：指出需要使用的类，在什么位置。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名称.类名称;</span><br><span class="line"><span class="comment">// 对于和当前类同属一个包的情况，可以省略导包语句不写。</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建，格式:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名称 对象名 = <span class="keyword">new</span> 类名称();</span><br><span class="line"><span class="comment">// Student stu = new Student();</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用，分两种情况：</p><p>(1) 使用成员变量:  对象名.成员变量名</p><p>(2) 使用成员方法: 对象名.成员方法名(参数)</p><p>(想用谁就用“对象名.谁”。)</p></li></ol><p>当一个对象作为参数，传递到方法当中时，实际上传递进去的是<strong>对象的地址值</strong>。</p><h4 id="局部变量与成员变量"><a href="#局部变量与成员变量" class="headerlink" title="局部变量与成员变量"></a>局部变量与成员变量</h4><ol><li><p>定义的位置不同【重点】</p><p>(1) 局部变量: 在方法的内部。</p><p>(2) 成员变量: 在方法的外部，直接写在类当中。</p></li><li><p>作用范围不同【重点】</p><p>(1) 局部变量: 在方法中才能使用，在方法外不能使用。</p><p>(2) 成员变量: 整个类都能使用。</p></li><li><p>默认值不一样【重点】</p><p>(1) 局部变量: 没有默认值，使用时必须手动赋值。</p><p>(2) 成员变量: 如果没有赋值，就会有默认值，规则与数组一样。</p></li><li><p>内存的位置不同</p><p>(1) 局部变量: 位于栈内存。</p><p>(2) 成员变量: 位于堆内存。</p></li><li><p>生命周期不同</p><p>(1) 局部变量: 随着方法进栈而诞生，随着方法出栈而消失。</p><p>(2) 成员变量: 随着对象创建而诞生，随着对象被垃圾回收而消失。</p></li></ol><h4 id="private关键字使用"><a href="#private关键字使用" class="headerlink" title="private关键字使用"></a>private关键字使用</h4><p>间接访问private成员变量，就是定义一对<strong>Getter/Setter方法</strong>。</p><p>必须叫setXxx和getXxx命名规则：</p><p>(1) 对于Getter: 不能有参数，返回值类型和成员变量对应。</p><p>(2) 对于Setter: 不能有返回值，参数类型和成员变量对应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Persion</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">// Setter    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        age = num;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// Getter    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>对于基本数据类型boolean值，Getter方法一定要写成isXxx的形式，而setXxx规则不变。</li></ol><h4 id="this关键字使用"><a href="#this关键字使用" class="headerlink" title="this关键字使用"></a>this关键字使用</h4><p>当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，优先使用局部变量。</p><p>如果需要访问本类中的成员变量，需要使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.成员变量</span><br></pre></td></tr></table></figure><p>通过谁调用的方法，谁就是this。</p><hr><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>专门用来创建对象的方法，通过关键字new创建对象时，就是在调用构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">public</span> 类名(参数类型 参数名称) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li><p>构造方法名称必须和所在类的名称一致，大小写都要一致。</p></li><li><p>构造方法不要写返回值类型，void都不写。</p></li><li><p>构造方法没有return。</p></li></ol><hr><h3 id="一个标准的类"><a href="#一个标准的类" class="headerlink" title="一个标准的类"></a>一个标准的类</h3><p>包括四个组成部分：</p><ol><li>所有的成员变量都要使用private关键字修饰。</li><li>为每一个成员变量编写一对Getter/Setter方法。</li><li>编写一个无参数的构造方法。</li><li>编写一个全参数的构造方法。</li></ol><hr><h3 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h3><p>抽象方法：加上abstract关键字，然后去掉大括号直接分号结束。</p><p>抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 定义一个普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如何使用抽象类和抽象方法：</strong></p><ol><li><p>不能直接创建new抽象类对象。</p></li><li><p>必须用一个子类来继承抽象父类。</p></li><li><p>子类必须覆盖重写抽象父类中的<strong>所有的抽象方法</strong>。</p><p>覆盖重写(实现)：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</p></li><li><p>创建子类对象进行使用。</p></li></ol>]]></content>
    
    
    <summary type="html">Java面向对象的相关知识点。</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
